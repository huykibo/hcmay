import os
import mlflow
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time
import requests
import io
import sys
import tensorflow as tf
from tensorflow.keras import layers, models, callbacks
import gc

# H√†m ch·ªçn tham s·ªë t·ªëi ∆∞u d·ª±a tr√™n s·ªë m·∫´u
def get_optimal_params(num_samples):
    if num_samples <= 1000:
        return {
            "hidden_layer_sizes": (32,),
            "learning_rate": 0.001,
            "epochs": 30,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 32
        }
    elif num_samples <= 10000:
        return {
            "hidden_layer_sizes": (64, 32),
            "learning_rate": 0.0005,
            "epochs": 50,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 64
        }
    elif num_samples <= 50000:
        return {
            "hidden_layer_sizes": (128, 64),
            "learning_rate": 0.0003,
            "epochs": 70,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 128
        }
    else:
        return {
            "hidden_layer_sizes": (128, 64, 32),
            "learning_rate": 0.0001,
            "epochs": 100,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 256
        }

# H√†m ti·ªÅn x·ª≠ l√Ω ·∫£nh: cƒÉn gi·ªØa v√† l√†m r√µ n√©t v·∫Ω
def preprocess_image(image):
    image = np.array(image, dtype=np.float32)
    image = np.where(image > 127, 255, 0)
    return image / 255.0  # Chu·∫©n h√≥a ngay trong h√†m n√†y

def run_mnist_pseudo_labeling_app():
    # Thi·∫øt l·∫≠p MLflow
    mlflow_tracking_uri = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(mlflow_tracking_uri)
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets.")
        st.stop()

    EXPERIMENT_ID = "5"
    client = MlflowClient()
    experiment = client.get_experiment(EXPERIMENT_ID)
    if experiment is None:
        st.error(f"Experiment ID {EXPERIMENT_ID} kh√¥ng t·ªìn t·∫°i.")
        st.stop()

    st.title("Pseudo Labeling v·ªõi Neural Network tr√™n MNIST")

    # CSS t√πy ch·ªânh
    st.markdown("""
        <style>
            .section-title { font-size: 1.5em; font-weight: bold; color: #2c3e50; margin-bottom: 10px; }
            .info-box { background-color: #f8f9fa; padding: 10px; border-left: 4px solid #3498db; margin-bottom: 15px; }
            .prediction-box { margin-top: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f9; }
            .mode-title { font-size: 1.2em; font-weight: bold; color: #2c3e50; margin-bottom: 10px; }
        </style>
    """, unsafe_allow_html=True)

    tabs = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", "Pseudo Labeling", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"])
    tab_info, tab_load, tab_split, tab_pseudo, tab_demo, tab_log_info = tabs

    # Tab 1: Th√¥ng tin
    with tab_info:
        st.header("Gi·ªõi thi·ªáu v·ªÅ Pseudo Labeling")
        st.markdown("""
        ·ª®ng d·ª•ng n√†y tri·ªÉn khai thu·∫≠t to√°n **Pseudo Labeling** v·ªõi Neural Network tr√™n t·∫≠p d·ªØ li·ªáu **MNIST**.  
        **Pseudo Labeling** l√† m·ªôt ph∆∞∆°ng ph√°p h·ªçc b√°n gi√°m s√°t (semi-supervised learning) nh·∫±m t·∫≠n d·ª•ng d·ªØ li·ªáu ch∆∞a g√°n nh√£n b·∫±ng c√°ch:
        1. Hu·∫•n luy·ªán m√¥ h√¨nh tr√™n m·ªôt t·∫≠p d·ªØ li·ªáu nh·ªè c√≥ nh√£n (1% m·ªói l·ªõp).
        2. D·ª± ƒëo√°n nh√£n gi·∫£ (pseudo labels) cho d·ªØ li·ªáu ch∆∞a g√°n nh√£n.
        3. G√°n nh√£n gi·∫£ cho c√°c m·∫´u c√≥ ƒë·ªô tin c·∫≠y cao (threshold ‚â• 0.95).
        4. L·∫∑p l·∫°i qu√° tr√¨nh ƒë·ªÉ m·ªü r·ªông t·∫≠p d·ªØ li·ªáu c√≥ nh√£n.
        """, unsafe_allow_html=True)

        # Th√™m h√¨nh ·∫£nh minh h·ªça c√≥ t√™n "labelding"
        st.subheader("üìä Quy tr√¨nh Pseudo Labeling")
        st.markdown("""
        D∆∞·ªõi ƒë√¢y l√† h√¨nh ·∫£nh minh h·ªça quy tr√¨nh **Pseudo Labeling**:
        """, unsafe_allow_html=True)
        try:
            # Gi·∫£ s·ª≠ h√¨nh ·∫£nh c√≥ t√™n "labelding.png" (th√™m ƒëu√¥i file n·∫øu c·∫ßn)
            pseudo_image = Image.open("labelding.png")
            st.image(pseudo_image, caption="Quy tr√¨nh Pseudo Labeling", use_column_width=True)
        except FileNotFoundError:
            st.error("Kh√¥ng t√¨m th·∫•y file `labelding.png`. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ho·∫∑c t√™n file.")
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

        # Th√™m ch√∫ th√≠ch chi ti·∫øt cho t·ª´ng b∆∞·ªõc trong h√¨nh ·∫£nh
        st.markdown("""
        **Gi·∫£i th√≠ch c√°c b∆∞·ªõc trong h√¨nh ·∫£nh:**
        - **B∆∞·ªõc 1: Hu·∫•n luy·ªán v·ªõi d·ªØ li·ªáu c√≥ nh√£n**  
          M·ªôt t·∫≠p d·ªØ li·ªáu nh·ªè (m√†u xanh) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán m·ªôt **Initial Neural Network**. ƒê√¢y l√† t·∫≠p d·ªØ li·ªáu labeled ban ƒë·∫ßu (1% m·ªói l·ªõp t·ª´ 0-9).  
        - **B∆∞·ªõc 2: D·ª± ƒëo√°n nh√£n gi·∫£ cho d·ªØ li·ªáu ch∆∞a g√°n nh√£n**  
          M√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ d·ª± ƒëo√°n nh√£n cho t·∫≠p d·ªØ li·ªáu ch∆∞a g√°n nh√£n (m√†u x√°m). C√°c m·∫´u c√≥ ƒë·ªô tin c·∫≠y cao (threshold ‚â• 0.95) ƒë∆∞·ª£c g√°n nh√£n gi·∫£ (m√†u cam).  
        - **B∆∞·ªõc 3: Hu·∫•n luy·ªán l·∫°i v·ªõi d·ªØ li·ªáu c√≥ nh√£n v√† nh√£n gi·∫£**  
          T·∫≠p d·ªØ li·ªáu m·ªõi (bao g·ªìm d·ªØ li·ªáu labeled ban ƒë·∫ßu m√†u xanh v√† d·ªØ li·ªáu v·ª´a ƒë∆∞·ª£c g√°n nh√£n gi·∫£ m√†u cam) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán m·ªôt **New Neural Network**. Qu√° tr√¨nh n√†y l·∫∑p l·∫°i cho ƒë·∫øn khi g√°n h·∫øt nh√£n ho·∫∑c ƒë·∫°t s·ªë v√≤ng l·∫∑p t·ªëi ƒëa.
        """, unsafe_allow_html=True)

    # Tab 2: T·∫£i d·ªØ li·ªáu
    with tab_load:
        st.markdown('<div class="section-title">T·∫£i D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        if 'full_data' not in st.session_state:
            if st.button("T·∫£i d·ªØ li·ªáu MNIST", type="primary"):
                with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu MNIST..."):
                    (X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()
                    X = np.concatenate([X_train, X_test], axis=0)
                    y = np.concatenate([y_train, y_test], axis=0)
                    X = X.reshape(-1, 784).astype(np.float32) / 255.0  # Chu·∫©n h√≥a ngay l√∫c t·∫£i
                    y = y.astype(np.int32)
                    st.session_state['full_data'] = (X, y)
                    st.success(f"ƒê√£ t·∫£i d·ªØ li·ªáu: {X.shape[0]} m·∫´u, {X.shape[1]} ƒë·∫∑c tr∆∞ng")
                    st.rerun()
        else:
            st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i!")

    # Tab 3: Chia d·ªØ li·ªáu
    with tab_split:
        st.markdown('<div class="section-title">Chia T·∫≠p D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        if 'full_data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            X_full, y_full = st.session_state['full_data']
            test_size = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20, help="T·ª∑ l·ªá d·ªØ li·ªáu d√πng ƒë·ªÉ ki·ªÉm tra")
            if st.button("Chia d·ªØ li·ªáu", type="primary"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    X_train_full, X_test, y_train_full, y_test = train_test_split(
                        X_full, y_full, test_size=test_size / 100, stratify=y_full, random_state=42
                    )
                    # L·∫•y 1% d·ªØ li·ªáu c√≥ nh√£n cho m·ªói l·ªõp
                    X_labeled, y_labeled = [], []
                    X_unlabeled, y_unlabeled = [], []
                    for digit in range(10):
                        digit_indices = np.where(y_train_full == digit)[0]
                        num_labeled = max(1, int(0.01 * len(digit_indices)))  # 1% m·ªói l·ªõp
                        labeled_indices = np.random.choice(digit_indices, num_labeled, replace=False)
                        unlabeled_indices = np.setdiff1d(digit_indices, labeled_indices)
                        X_labeled.append(X_train_full[labeled_indices])
                        y_labeled.append(y_train_full[labeled_indices])
                        X_unlabeled.append(X_train_full[unlabeled_indices])
                        y_unlabeled.append(y_train_full[unlabeled_indices])
                    X_labeled = np.concatenate(X_labeled)
                    y_labeled = np.concatenate(y_labeled)
                    X_unlabeled = np.concatenate(X_unlabeled)
                    y_unlabeled = np.concatenate(y_unlabeled)

                    st.session_state['split_data'] = {
                        "X_labeled": X_labeled, "y_labeled": y_labeled,
                        "X_unlabeled": X_unlabeled, "y_unlabeled": y_unlabeled,
                        "X_test": X_test, "y_test": y_test
                    }
                    st.success(f"ƒê√£ chia d·ªØ li·ªáu: Labeled: {len(X_labeled)}, Unlabeled: {len(X_unlabeled)}, Test: {len(X_test)}")
                    del X_full, y_full, X_train_full, y_train_full
                    gc.collect()

    # Tab 4: Pseudo Labeling
    with tab_pseudo:
        st.markdown('<div class="section-title">Pseudo Labeling</div>', unsafe_allow_html=True)
        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            split_data = st.session_state['split_data']
            X_labeled = split_data["X_labeled"].copy()
            y_labeled = split_data["y_labeled"].copy()
            X_unlabeled = split_data["X_unlabeled"].copy()
            X_test = split_data["X_test"].copy()
            y_test = split_data["y_test"].copy()

            num_samples = len(X_labeled)
            params = get_optimal_params(num_samples)

            st.subheader("C·∫•u h√¨nh Pseudo Labeling")
            threshold = st.slider("Ng∆∞·ª°ng g√°n nh√£n gi·∫£ (Threshold)", 0.5, 1.0, 0.95, step=0.01)
            max_iterations = st.number_input("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa", 1, 10, 5)
            col_param1, col_param2 = st.columns(2)
            with col_param1:
                num_hidden_layers = st.number_input("S·ªë l·ªõp ·∫©n", 1, 3, len(params["hidden_layer_sizes"]))
                hidden_sizes = list(params["hidden_layer_sizes"])
                for i in range(num_hidden_layers):
                    hidden_sizes[i] = st.number_input(f"S·ªë n∆°-ron l·ªõp {i+1}", 16, 128, hidden_sizes[i])
                params["hidden_layer_sizes"] = tuple(hidden_sizes[:num_hidden_layers])
            with col_param2:
                params["learning_rate"] = st.selectbox("T·ªëc ƒë·ªô h·ªçc", [0.01, 0.001, 0.0001], index=1)
                params["epochs"] = st.number_input("S·ªë epoch", 10, 100, params["epochs"])
                params["batch_size"] = st.number_input("K√≠ch th∆∞·ªõc batch", 32, 256, params["batch_size"])

            if st.button("B·∫Øt ƒë·∫ßu Pseudo Labeling", type="primary"):
                with st.spinner("ƒêang th·ª±c hi·ªán Pseudo Labeling..."):
                    iteration = 0
                    accuracy_history = []  # L∆∞u l·ªãch s·ª≠ ƒë·ªô ch√≠nh x√°c
                    num_labeled_history = [len(X_labeled)]  # L∆∞u s·ªë l∆∞·ª£ng m·∫´u labeled qua t·ª´ng v√≤ng l·∫∑p

                    while len(X_unlabeled) > 0 and iteration < max_iterations:
                        iteration += 1
                        st.write(f"**V√≤ng l·∫∑p {iteration}**: Hu·∫•n luy·ªán v·ªõi {len(X_labeled)} m·∫´u c√≥ nh√£n")

                        # Hu·∫•n luy·ªán m√¥ h√¨nh
                        model = models.Sequential([
                            layers.Input(shape=(784,)),
                            *[layers.Dense(n, activation="relu") for n in params["hidden_layer_sizes"]],
                            layers.Dense(10, activation="softmax")
                        ])
                        model.compile(optimizer=tf.keras.optimizers.Adam(params["learning_rate"]),
                                    loss="sparse_categorical_crossentropy",
                                    metrics=["accuracy"])
                        history = model.fit(X_labeled, y_labeled, epochs=params["epochs"],
                                          batch_size=params["batch_size"], verbose=0)

                        # D·ª± ƒëo√°n nh√£n gi·∫£
                        pseudo_probs = model.predict(X_unlabeled, verbose=0)
                        pseudo_labels = np.argmax(pseudo_probs, axis=1)
                        max_probs = np.max(pseudo_probs, axis=1)

                        # G√°n nh√£n gi·∫£ cho c√°c m·∫´u v∆∞·ª£t ng∆∞·ª°ng
                        confident_mask = max_probs >= threshold
                        X_confident = X_unlabeled[confident_mask]
                        y_confident = pseudo_labels[confident_mask]

                        # C·∫≠p nh·∫≠t t·∫≠p d·ªØ li·ªáu
                        X_labeled = np.concatenate([X_labeled, X_confident])
                        y_labeled = np.concatenate([y_labeled, y_confident])
                        X_unlabeled = X_unlabeled[~confident_mask]

                        # ƒê√°nh gi√° tr√™n t·∫≠p test
                        y_test_pred = np.argmax(model.predict(X_test, verbose=0), axis=1)
                        acc_test = accuracy_score(y_test, y_test_pred)

                        # L∆∞u l·ªãch s·ª≠
                        accuracy_history.append(acc_test)
                        num_labeled_history.append(len(X_labeled))

                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=f"Pseudo_Iter_{iteration}"):
                            mlflow.log_params(params)
                            mlflow.log_metric("num_labeled", len(X_labeled))
                            mlflow.log_metric("accuracy_test", acc_test)
                            mlflow.log_metric("iteration", iteration)

                        st.write(f"ƒê√£ g√°n nh√£n cho {len(X_confident)} m·∫´u. ƒê·ªô ch√≠nh x√°c Test: {acc_test:.4f}")

                    # L∆∞u m√¥ h√¨nh cu·ªëi c√πng
                    st.session_state['model'] = model
                    st.session_state['training_results'] = {
                        "X_labeled": X_labeled, "y_labeled": y_labeled,
                        "accuracy_test": acc_test,
                        "iterations": iteration,
                        "accuracy_history": accuracy_history,
                        "num_labeled_history": num_labeled_history
                    }
                    st.success(f"Ho√†n t·∫•t sau {iteration} v√≤ng l·∫∑p! S·ªë m·∫´u ƒë∆∞·ª£c g√°n nh√£n: {len(X_labeled)}")

                    # V·∫Ω bi·ªÉu ƒë·ªì ƒë·ªô ch√≠nh x√°c qua c√°c v√≤ng l·∫∑p
                    st.subheader("üìà K·∫øt qu·∫£ Pseudo Labeling")
                    fig, ax1 = plt.subplots(figsize=(8, 4))
                    ax1.plot(range(1, len(accuracy_history) + 1), accuracy_history, 
                            label='Test Accuracy', color='blue', marker='o')
                    ax1.set_xlabel("V√≤ng l·∫∑p")
                    ax1.set_ylabel("ƒê·ªô ch√≠nh x√°c Test", color='blue')
                    ax1.tick_params(axis='y', labelcolor='blue')
                    ax1.grid(True)

                    # Th√™m tr·ª•c th·ª© hai ƒë·ªÉ v·∫Ω s·ªë l∆∞·ª£ng m·∫´u labeled
                    ax2 = ax1.twinx()
                    ax2.plot(range(0, len(num_labeled_history)), num_labeled_history, 
                            label='S·ªë m·∫´u labeled', color='orange', marker='x')
                    ax2.set_ylabel("S·ªë m·∫´u labeled", color='orange')
                    ax2.tick_params(axis='y', labelcolor='orange')

                    fig.tight_layout()
                    fig.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=2)
                    st.pyplot(fig)
                    plt.close(fig)

    # Tab 5: Demo d·ª± ƒëo√°n
    with tab_demo:
        st.markdown('<div class="section-title">Demo D·ª± ƒëo√°n</div>', unsafe_allow_html=True)
        if 'model' not in st.session_state:
            st.warning("Vui l√≤ng th·ª±c hi·ªán Pseudo Labeling tr∆∞·ªõc!")
        else:
            model = st.session_state['model']
            input_method = st.selectbox("Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p li·ªáu", ["T·∫£i ·∫£nh l√™n", "D·ªØ li·ªáu Test", "V·∫Ω tr·ª±c ti·∫øp"])

            if input_method == "T·∫£i ·∫£nh l√™n":
                uploaded_file = st.file_uploader("T·∫£i l√™n h√¨nh ·∫£nh", type=["png", "jpg"])
                if uploaded_file:
                    image = Image.open(uploaded_file).convert('L').resize((28, 28))
                    image_array = preprocess_image(image).reshape(1, 784)
                    if st.button("D·ª± ƒëo√°n"):
                        pred = model.predict(image_array, verbose=0)
                        predicted_class = np.argmax(pred[0])
                        confidence = pred[0][predicted_class] * 100
                        st.markdown(f"**D·ª± ƒëo√°n:** {predicted_class}, **ƒê·ªô tin c·∫≠y:** {confidence:.2f}%")

            elif input_method == "D·ªØ li·ªáu Test":
                X_test = st.session_state['split_data']["X_test"]
                y_test = st.session_state['split_data']["y_test"]
                idx = st.slider("Ch·ªçn m·∫´u Test", 0, len(X_test) - 1, 0)
                st.image(X_test[idx].reshape(28, 28), width=100)
                if st.button("D·ª± ƒëo√°n"):
                    pred = model.predict(X_test[idx].reshape(1, -1), verbose=0)
                    predicted_class = np.argmax(pred[0])
                    confidence = pred[0][predicted_class] * 100
                    st.markdown(f"**D·ª± ƒëo√°n:** {predicted_class}, **ƒê·ªô tin c·∫≠y:** {confidence:.2f}%, **Th·ª±c t·∫ø:** {y_test[idx]}")

            elif input_method == "V·∫Ω tr·ª±c ti·∫øp":
                canvas_result = st_canvas(stroke_width=20, stroke_color="#FFFFFF", background_color="#000000", height=280, width=280)
                if canvas_result.image_data is not None:
                    image = Image.fromarray(canvas_result.image_data.astype('uint8'), 'RGBA').convert('L').resize((28, 28))
                    image_array = preprocess_image(image).reshape(1, 784)
                    st.image(image_array.reshape(28, 28), width=100)
                    if st.button("D·ª± ƒëo√°n"):
                        pred = model.predict(image_array, verbose=0)
                        predicted_class = np.argmax(pred[0])
                        confidence = pred[0][predicted_class] * 100
                        st.markdown(f"**D·ª± ƒëo√°n:** {predicted_class}, **ƒê·ªô tin c·∫≠y:** {confidence:.2f}%")

    # Tab 6: Th√¥ng tin hu·∫•n luy·ªán
    with tab_log_info:
        st.markdown('<div class="section-title">Th√¥ng tin Hu·∫•n luy·ªán</div>', unsafe_allow_html=True)
        runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])
        if not runs:
            st.info("Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o.")
        else:
            run_id = st.selectbox("Ch·ªçn run:", [run.info.run_id for run in runs])
            run = client.get_run(run_id)
            st.write(f"**T√™n:** {run.data.tags.get('mlflow.runName', run_id)}")
            st.write(f"**Tham s·ªë:** {run.data.params}")
            st.write(f"**S·ªë li·ªáu:** {run.data.metrics}")

if __name__ == "__main__":
    run_mnist_pseudo_labeling_app()