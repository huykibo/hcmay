import os
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import SGDRegressor
from sklearn.preprocessing import PolynomialFeatures, MinMaxScaler, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score
import joblib
import mlflow
import mlflow.sklearn
from mlflow.tracking import MlflowClient
import time
from datetime import datetime

def run_titanic_app():
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(st.secrets["mlflow"]["MLFLOW_TRACKING_URI"])
        mlflow.set_experiment("Titanic")
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets. Vui l√≤ng c·∫•u h√¨nh secrets trong Streamlit.")
        st.stop()

    # Kh·ªüi t·∫°o session_state n·∫øu ch∆∞a c√≥
    if 'data_loaded' not in st.session_state:
        st.session_state.data_loaded = False
    if 'data_processed' not in st.session_state:
        st.session_state.data_processed = False
    if 'data_split' not in st.session_state:
        st.session_state.data_split = False
    if 'models_trained' not in st.session_state:
        st.session_state.models_trained = False
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'X_train' not in st.session_state:
        st.session_state.X_train = None
    if 'y_train' not in st.session_state:
        st.session_state.y_train = None
    if 'X_val' not in st.session_state:
        st.session_state.X_val = None
    if 'y_val' not in st.session_state:
        st.session_state.y_val = None
    if 'X_test' not in st.session_state:
        st.session_state.X_test = None
    if 'y_test' not in st.session_state:
        st.session_state.y_test = None
    if 'model' not in st.session_state:
        st.session_state.model = None
    if "run_id" not in st.session_state:
        st.session_state["run_id"] = None
    if "run_name" not in st.session_state:
        st.session_state["run_name"] = None
    if "selected_samples" not in st.session_state:
        st.session_state["selected_samples"] = None

    st.title("üö¢ D·ª± ƒëo√°n s·ªëng s√≥t tr√™n Titanic")

    # CSS cho tooltip v√† MathJax
    st.markdown("""
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-MML-AM_CHTML" async></script>
    <style>
    .tooltip {
      position: relative;
      display: inline-block;
      cursor: pointer;
      color: #1f77b4;
      font-weight: bold;
      margin-left: 5px;
    }
    .tooltip .tooltiptext {
      visibility: hidden;
      width: 400px;
      background-color: #f9f9f9;
      color: #333;
      text-align: left;
      border-radius: 6px;
      padding: 8px;
      position: absolute;
      z-index: 1;
      right: 105%;
      top: 50%;
      transform: translateY(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      border: 1px solid #ccc;
      font-size: 0.85em;
      line-height: 1.3;
    }
    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }
    </style>
    """, unsafe_allow_html=True)

    # T·∫°o c√°c tab
    tabs = st.tabs([
        "Th√¥ng tin ·ª©ng d·ª•ng",
        "Ph√¢n t√≠ch d·ªØ li·ªáu",
        "Hu·∫•n luy·ªán m√¥ h√¨nh",
        "D·ª± ƒëo√°n",
        "Th√¥ng tin hu·∫•n luy·ªán & MLflow UI"
    ])
    tab_info, tab_analysis, tab_train, tab_predict, tab_mlflow = tabs

    # ---------------- Tab 1: Th√¥ng tin ·ª©ng d·ª•ng ----------------
    with tab_info:
        st.header("Gi·ªõi thi·ªáu & Th√¥ng tin ·ª®ng d·ª•ng")
        st.markdown(r"""
**·ª®ng d·ª•ng "D·ª± ƒëo√°n s·ªëng s√≥t tr√™n Titanic"** gi√∫p ng∆∞·ªùi d√πng th·ª±c hi·ªán c√°c b∆∞·ªõc sau:
- **Ph√¢n t√≠ch d·ªØ li·ªáu:** T·∫£i v√† ki·ªÉm tra d·ªØ li·ªáu Titanic.
- **X·ª≠ l√Ω d·ªØ li·ªáu:** Lo·∫°i b·ªè c·ªôt kh√¥ng c·∫ßn thi·∫øt, t·ª± ƒë·ªông ƒëi·ªÅn gi√° tr·ªã thi·∫øu, m√£ h√≥a bi·∫øn ph√¢n lo·∫°i v√† chu·∫©n h√≥a d·ªØ li·ªáu.
- **Chia d·ªØ li·ªáu:** Ph√¢n chia d·ªØ li·ªáu th√†nh Train, Validation v√† Test.
- **Hu·∫•n luy·ªán m√¥ h√¨nh:** Hu·∫•n luy·ªán m√¥ h√¨nh h·ªìi quy v·ªõi Cross Validation.
- **D·ª± ƒëo√°n:** D·ª± ƒëo√°n kh·∫£ nƒÉng s·ªëng s√≥t k√®m ƒë·ªô tin c·∫≠y (Confidence).
- **Th√¥ng tin hu·∫•n luy·ªán & MLflow UI:** Xem chi ti·∫øt c√°c run ƒë√£ log, ƒë·ªïi t√™n, x√≥a v√† truy c·∫≠p MLflow UI.
        """, unsafe_allow_html=True)

    # ---------------- Tab 2: Ph√¢n t√≠ch d·ªØ li·ªáu ----------------
    with tab_analysis:
        st.header("Ph√¢n t√≠ch v√† x·ª≠ l√Ω d·ªØ li·ªáu")
        with st.expander("üì• T·∫£i d·ªØ li·ªáu", expanded=True):
            uploaded_file = st.file_uploader("T·∫£i file CSV (Titanic dataset)", type=["csv"])
            if uploaded_file is not None:
                st.session_state.df = pd.read_csv(uploaded_file)
                st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n:")
                st.write(st.session_state.df.head(10))
                st.session_state.data_loaded = True

        with st.expander("üîç Ki·ªÉm tra d·ªØ li·ªáu"):
            if st.session_state.get("data_loaded", False):
                df = st.session_state.df
                st.write("**Gi√° tr·ªã thi·∫øu:**")
                st.write(df.isnull().sum())
                st.write("**Ki·ªÉu d·ªØ li·ªáu:**")
                st.write(df.dtypes)
            else:
                st.warning("Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.")

        with st.expander("‚öôÔ∏è X·ª≠ l√Ω d·ªØ li·ªáu"):
            if st.session_state.get("data_loaded", False):
                df = st.session_state.df.copy()
                st.write("**X·ª≠ l√Ω d·ªØ li·ªáu:** Lo·∫°i b·ªè c·ªôt kh√¥ng c·∫ßn thi·∫øt, ƒëi·ªÅn gi√° tr·ªã thi·∫øu, m√£ h√≥a bi·∫øn ph√¢n lo·∫°i, v√† chu·∫©n h√≥a d·ªØ li·ªáu.")

                default_cols = ["PassengerId", "Name", "Ticket", "Cabin"]
                valid_default_cols = [col for col in default_cols if col in df.columns]
                dropped_cols = st.multiselect("Ch·ªçn c·ªôt c·∫ßn lo·∫°i b·ªè:", 
                                              df.columns.tolist(), 
                                              default=valid_default_cols)
                df.drop(columns=dropped_cols, errors='ignore', inplace=True)
                st.write(f"ƒê√£ lo·∫°i b·ªè c√°c c·ªôt: {', '.join(dropped_cols)}")

                st.write("**ƒêi·ªÅn gi√° tr·ªã thi·∫øu:**")
                missing_cols = df.columns[df.isnull().any()].tolist()
                if missing_cols:
                    st.write(f"C√°c c·ªôt c√≥ gi√° tr·ªã thi·∫øu: {', '.join(missing_cols)}")
                    fill_missing_cols = st.multiselect("Ch·ªçn c·ªôt ƒë·ªÉ ƒëi·ªÅn gi√° tr·ªã thi·∫øu:", 
                                                       missing_cols, 
                                                       default=missing_cols)
                    fill_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p ƒëi·ªÅn cho t·∫•t c·∫£ c·ªôt:", 
                                              ["trung v·ªã (median)", "trung b√¨nh (mean)", "mode", "lo·∫°i b·ªè"],
                                              index=0)
                    for col in fill_missing_cols:
                        if df[col].dtype in ['float64', 'int64']:
                            if fill_method == "trung v·ªã (median)":
                                df[col].fillna(df[col].median(), inplace=True)
                                st.write(f"- ƒê√£ ƒëi·ªÅn c·ªôt {col} b·∫±ng trung v·ªã: {df[col].median()}")
                            elif fill_method == "trung b√¨nh (mean)":
                                df[col].fillna(df[col].mean(), inplace=True)
                                st.write(f"- ƒê√£ ƒëi·ªÅn c·ªôt {col} b·∫±ng trung b√¨nh: {df[col].mean():.2f}")
                            elif fill_method == "lo·∫°i b·ªè":
                                df.dropna(subset=[col], inplace=True)
                                st.write(f"- ƒê√£ lo·∫°i b·ªè c√°c h√†ng thi·∫øu gi√° tr·ªã ·ªü c·ªôt {col}")
                        else:
                            if fill_method == "mode":
                                mode_value = df[col].mode()[0]
                                df[col].fillna(mode_value, inplace=True)
                                st.write(f"- ƒê√£ ƒëi·ªÅn c·ªôt {col} b·∫±ng mode: {mode_value}")
                            elif fill_method == "lo·∫°i b·ªè":
                                df.dropna(subset=[col], inplace=True)
                                st.write(f"- ƒê√£ lo·∫°i b·ªè c√°c h√†ng thi·∫øu gi√° tr·ªã ·ªü c·ªôt {col}")
                else:
                    st.info("Kh√¥ng c√≥ c·ªôt n√†o thi·∫øu gi√° tr·ªã sau khi lo·∫°i b·ªè c·ªôt.")

                st.write("**M√£ h√≥a c√°c bi·∫øn ph√¢n lo·∫°i:**")
                categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
                allowed_cols = ["Sex", "Embarked"]
                cols_to_encode = st.multiselect("Ch·ªçn c·ªôt ƒë·ªÉ m√£ h√≥a (ch·ªâ Sex v√† Embarked ƒë∆∞·ª£c ph√©p):", 
                                                categorical_cols, 
                                                default=[col for col in allowed_cols if col in categorical_cols])
                valid_cols = [col for col in cols_to_encode if col in allowed_cols]
                invalid_cols = [col for col in cols_to_encode if col not in allowed_cols]
                if invalid_cols:
                    st.error(f"C√°c c·ªôt sau kh√¥ng ƒë∆∞·ª£c ph√©p m√£ h√≥a: {', '.join(invalid_cols)}.")
                for col in valid_cols:
                    df[col] = df[col].astype('category').cat.codes
                    st.write(f"- ƒê√£ m√£ h√≥a c·ªôt {col}: {dict(enumerate(df[col].astype('category').cat.categories))}")

                st.write("**Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë:**")
                numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
                if "Survived" in numeric_cols:
                    numeric_cols.remove("Survived")
                norm_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p chu·∫©n h√≥a:", 
                                           ["Min-Max Scaling", "Standard Scaling"], 
                                           key="norm_method")
                if norm_method == "Min-Max Scaling":
                    scaler = MinMaxScaler(feature_range=(0, 1))
                    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])
                    st.write(f"- ƒê√£ chu·∫©n h√≥a c√°c c·ªôt s·ªë b·∫±ng Min-Max Scaling: {', '.join(numeric_cols)}")
                else:
                    scaler = StandardScaler()
                    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])
                    st.write(f"- ƒê√£ chu·∫©n h√≥a c√°c c·ªôt s·ªë b·∫±ng Standard Scaling: {', '.join(numeric_cols)}")

                st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!")
                st.write("D·ªØ li·ªáu sau khi x·ª≠ l√Ω:")
                st.write(df.head(10))
                st.session_state.df = df
                st.session_state.data_processed = True
            else:
                st.warning("Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.")

        with st.expander("üìä Chia d·ªØ li·ªáu"):
            if st.session_state.get("data_processed", False) and st.session_state.df is not None:
                df = st.session_state.df.copy()
                if "Survived" not in df.columns:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt m·ª•c ti√™u 'Survived'.")
                else:
                    st.write("### B∆∞·ªõc 1: Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u")
                    total_samples = len(df)
                    st.write(f"T·ªïng s·ªë m·∫´u hi·ªán c√≥: {total_samples}")
                    num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ s·ª≠ d·ª•ng:", 
                                            min_value=10, 
                                            max_value=total_samples, 
                                            value=min(100, total_samples), 
                                            step=1)
                    if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng m·∫´u"):
                        st.session_state["selected_samples"] = df.sample(n=num_samples, random_state=42)
                        st.success(f"ƒê√£ ch·ªët {num_samples} m·∫´u ƒë·ªÉ s·ª≠ d·ª•ng!")

                    if st.session_state["selected_samples"] is not None:
                        selected_df = st.session_state["selected_samples"]
                        total_selected_samples = len(selected_df)
                        st.write(f"### B∆∞·ªõc 2: Chia d·ªØ li·ªáu ({total_selected_samples} m·∫´u ƒë√£ ch·ªët)")
                        
                        test_pct = st.slider("T·ª∑ l·ªá t·∫≠p Test (%)", 
                                             0, 100, 20)
                        test_size = int(total_selected_samples * test_pct / 100)
                        
                        remaining_df = selected_df.copy()
                        if test_size > 0:
                            X_temp, X_test, y_temp, y_test = train_test_split(
                                remaining_df.drop(columns=["Survived"]),
                                remaining_df["Survived"],
                                test_size=test_size / len(remaining_df),
                                random_state=42
                            )
                            remaining_df = pd.concat([X_temp, y_temp], axis=1)
                        else:
                            X_test, y_test = pd.DataFrame(), pd.Series()
                        
                        remaining_samples = len(remaining_df)
                        valid_pct = st.slider("T·ª∑ l·ªá t·∫≠p Validation (%) t·ª´ ph·∫ßn c√≤n l·∫°i", 
                                              0, 100, 20)
                        valid_size = int(remaining_samples * valid_pct / 100)
                        
                        if valid_size > 0 and len(remaining_df) > valid_size:
                            X_train, X_val, y_train, y_val = train_test_split(
                                remaining_df.drop(columns=["Survived"]),
                                remaining_df["Survived"],
                                test_size=valid_size / len(remaining_df),
                                random_state=42
                            )
                        else:
                            X_train, y_train = remaining_df.drop(columns=["Survived"]), remaining_df["Survived"]
                            X_val, y_val = pd.DataFrame(), pd.Series()

                        train_size = len(X_train)
                        train_pct = (train_size / total_selected_samples) * 100
                        st.write(f"**Train:** {train_size} m·∫´u ({train_pct:.1f}%)")
                        st.write(f"**Validation:** {valid_size} m·∫´u ({valid_pct}%)")
                        st.write(f"**Test:** {test_size} m·∫´u ({test_pct}%)")

                        if st.button("X√°c nh·∫≠n chia d·ªØ li·ªáu"):
                            min_samples = 10
                            if train_size < min_samples:
                                st.warning("S·ªë m·∫´u t·∫≠p Train qu√° √≠t.")
                            if valid_size < min_samples and valid_size > 0:
                                st.warning("S·ªë m·∫´u t·∫≠p Validation qu√° √≠t.")
                            if test_size < min_samples and test_size > 0:
                                st.warning("S·ªë m·∫´u t·∫≠p Test qu√° √≠t.")
                            st.session_state.X_train = X_train
                            st.session_state.y_train = y_train
                            st.session_state.X_val = X_val
                            st.session_state.y_val = y_val
                            st.session_state.X_test = X_test
                            st.session_state.y_test = y_test
                            st.session_state.data_split = True
                            st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chia th√†nh c√¥ng!")
            else:
                st.warning("Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.")

    # ---------------- Tab 3: Hu·∫•n luy·ªán m√¥ h√¨nh ----------------
    with tab_train:
        st.header("Hu·∫•n luy·ªán & Ki·ªÉm th·ª≠ m√¥ h√¨nh")
        if st.session_state.get("data_split", False):
            col_model, col_model_tip = st.columns([0.8, 0.2])
            with col_model:
                model_choice_to_train = st.selectbox("Ch·ªçn m√¥ h√¨nh ƒë·ªÉ hu·∫•n luy·ªán:", 
                                                    ["H·ªìi quy ƒêa bi·∫øn", "H·ªìi quy ƒêa th·ª©c"])
            with col_model_tip:
                st.markdown("""
                <span class="tooltip">? 
                  <span class="tooltiptext">
                    <strong>H·ªìi quy ƒêa bi·∫øn</strong>: \(\hat{y} = \beta_0 + \beta_1 x_1 + \dots\).<br>
                    <strong>H·ªìi quy ƒêa th·ª©c</strong>: \(\hat{y} = \beta_0 + \beta_1 x + \beta_2 x^2 + \dots\).
                  </span>
                </span>
                """, unsafe_allow_html=True)

            col_lr, col_lr_tip = st.columns([0.8, 0.2])
            with col_lr:
                lr_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p learning rate:", 
                                        ["constant", "invscaling", "adaptive"], 
                                        index=0)
            with col_lr_tip:
                st.markdown("""
                <span class="tooltip">? 
                  <span class="tooltiptext">
                    Learning rate (\(\eta\)) ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô c·∫≠p nh·∫≠t tr·ªçng s·ªë \(\beta\).
                  </span>
                </span>
                """, unsafe_allow_html=True)

            eta0 = 0.01
            if lr_method == "constant":
                col_eta, col_eta_tip = st.columns([0.8, 0.2])
                with col_eta:
                    eta0 = st.number_input("Nh·∫≠p gi√° tr·ªã eta0:", 
                                           value=0.01, min_value=0.0001, max_value=1.0, 
                                           step=0.0001, format="%.4f")
                with col_eta_tip:
                    st.markdown("""
                    <span class="tooltip">? 
                      <span class="tooltiptext">
                        <strong>eta0</strong>: Learning rate ban ƒë·∫ßu trong "constant".
                      </span>
                    </span>
                    """, unsafe_allow_html=True)

            poly_degree = 1
            if model_choice_to_train == "H·ªìi quy ƒêa th·ª©c":
                col_poly, col_poly_tip = st.columns([0.8, 0.2])
                with col_poly:
                    poly_degree = st.number_input("Ch·ªçn b·∫≠c c·ªßa ƒëa th·ª©c:", 
                                                  min_value=1, max_value=5, value=2)
                with col_poly_tip:
                    st.markdown("""
                    <span class="tooltip">? 
                      <span class="tooltiptext">
                        <strong>B·∫≠c ƒëa th·ª©c</strong>: S·ªë m≈© cao nh·∫•t trong h·ªìi quy ƒëa th·ª©c.
                      </span>
                    </span>
                    """, unsafe_allow_html=True)

            col_fold, col_fold_tip = st.columns([0.8, 0.2])
            with col_fold:
                num_folds = st.number_input("Ch·ªçn s·ªë folds (KFold Cross-Validation):", 
                                            min_value=2, max_value=20, value=5, step=1)
            with col_fold_tip:
                st.markdown("""
                <span class="tooltip">? 
                  <span class="tooltiptext">
                    <strong>Cross Validation (K-Fold)</strong>: Chia d·ªØ li·ªáu th√†nh \(K\) ph·∫ßn.
                  </span>
                </span>
                """, unsafe_allow_html=True)

            if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
                X_train = st.session_state.X_train
                y_train = st.session_state.y_train
                X_val = st.session_state.X_val
                y_val = st.session_state.y_val
                X_test = st.session_state.X_test
                y_test = st.session_state.y_test

                if X_train.isnull().values.any() or y_train.isnull().values.any():
                    st.error("D·ªØ li·ªáu hu·∫•n luy·ªán ch·ª©a gi√° tr·ªã NaN. Vui l√≤ng ki·ªÉm tra l·∫°i b∆∞·ªõc x·ª≠ l√Ω d·ªØ li·ªáu.")
                    return
                if not np.isfinite(X_train.values).all() or not np.isfinite(y_train.values).all():
                    st.error("D·ªØ li·ªáu hu·∫•n luy·ªán ch·ª©a gi√° tr·ªã v√¥ c·ª±c. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                    return

                # Kh·ªüi t·∫°o thanh ti·∫øn tr√¨nh v√† tr·∫°ng th√°i
                progress_bar = st.progress(0)
                status_text = st.empty()
                start_time = time.time()

                with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi Cross Validation..."):
                    run_name = f"{model_choice_to_train}_Run_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}"
                    with mlflow.start_run(run_name=run_name) as run:
                        # Log tham s·ªë
                        params = {
                            "model_choice": model_choice_to_train,
                            "learning_rate_method": lr_method,
                            "eta0": eta0 if lr_method == "constant" else "N/A",
                            "poly_degree": poly_degree if model_choice_to_train == "H·ªìi quy ƒêa th·ª©c" else "N/A",
                            "num_folds": num_folds
                        }
                        mlflow.log_params(params)

                        # Hu·∫•n luy·ªán m√¥ h√¨nh
                        max_iter = 1000
                        tol = 1e-3

                        if model_choice_to_train == "H·ªìi quy ƒêa bi·∫øn":
                            model = SGDRegressor(
                                learning_rate=lr_method,
                                eta0=eta0 if lr_method == "constant" else 0.01,
                                max_iter=max_iter,
                                tol=tol,
                                random_state=42
                            )
                        else:
                            model = Pipeline([
                                ('poly', PolynomialFeatures(degree=poly_degree, include_bias=False)),
                                ('sgd', SGDRegressor(
                                    learning_rate=lr_method,
                                    eta0=eta0 if lr_method == "constant" else 0.01,
                                    max_iter=max_iter,
                                    tol=tol,
                                    random_state=42
                                ))
                            ])

                        # Quy tr√¨nh hu·∫•n luy·ªán
                        status_text.text("ƒêang th·ª±c hi·ªán Cross Validation...")
                        progress_bar.progress(0)
                        cv_scores = cross_val_score(model, X_train, y_train, cv=num_folds, scoring='r2')
                        progress_bar.progress(40)

                        status_text.text("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
                        model.fit(X_train, y_train)
                        progress_bar.progress(70)

                        status_text.text("ƒêang t√≠nh to√°n ch·ªâ s·ªë...")
                        y_pred_val = model.predict(X_val)
                        mse_val = mean_squared_error(y_val, y_pred_val)
                        r2_val = r2_score(y_val, y_pred_val)
                        y_pred_val_class = [1 if pred >= 0.5 else 0 for pred in y_pred_val]
                        accuracy_val = accuracy_score(y_val, y_pred_val_class)

                        y_pred_test = model.predict(X_test)
                        mse_test = mean_squared_error(y_test, y_pred_test)
                        r2_test = r2_score(y_test, y_pred_test)
                        y_pred_test_class = [1 if pred >= 0.5 else 0 for pred in y_pred_test]
                        accuracy_test = accuracy_score(y_test, y_pred_test_class)
                        progress_bar.progress(90)

                        status_text.text("ƒêang l∆∞u k·∫øt qu·∫£...")
                        training_time = time.time() - start_time

                        # Log metrics
                        metrics = {
                            "mean_cv_score_r2": float(np.mean(cv_scores)),
                            "mse_val": float(mse_val),
                            "r2_val": float(r2_val),
                            "accuracy_val": float(accuracy_val),
                            "mse_test": float(mse_test),
                            "r2_test": float(r2_test),
                            "accuracy_test": float(accuracy_test),
                            "training_time_seconds": float(training_time)
                        }
                        mlflow.log_metrics(metrics)

                        # L∆∞u model
                        mlflow.sklearn.log_model(model, "model")

                        # L∆∞u k·∫øt qu·∫£ v√†o session_state
                        st.session_state["run_id"] = run.info.run_id
                        st.session_state["run_name"] = run_name
                        st.session_state["cv_scores"] = cv_scores
                        st.session_state["mse_val"] = mse_val
                        st.session_state["r2_val"] = r2_val
                        st.session_state["accuracy_val"] = accuracy_val
                        st.session_state["mse_test"] = mse_test
                        st.session_state["r2_test"] = r2_test
                        st.session_state["accuracy_test"] = accuracy_test
                        st.session_state["y_pred_val"] = y_pred_val
                        st.session_state["y_pred_test"] = y_pred_test
                        st.session_state["training_time"] = training_time
                        st.session_state["params"] = params
                        st.session_state["model"] = model
                        st.session_state["models_trained"] = True

                        progress_bar.progress(100)
                        status_text.text("Ho√†n t·∫•t hu·∫•n luy·ªán!")

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu ƒë√£ hu·∫•n luy·ªán
            if st.session_state.get("models_trained", False):
                st.subheader("Th√¥ng tin K·∫øt qu·∫£")
                with st.expander("Xem chi ti·∫øt k·∫øt qu·∫£", expanded=True):
                    st.markdown("#### Th√¥ng tin l·∫ßn ch·∫°y:", unsafe_allow_html=True)
                    st.write(f"- **T√™n l·∫ßn ch·∫°y (Run Name)**: {st.session_state['run_name']}")
                    st.write(f"- **ID l·∫ßn ch·∫°y (Run ID)**: {st.session_state['run_id']}")

                    st.markdown("#### C√†i ƒë·∫∑t b·∫°n ƒë√£ ch·ªçn:", unsafe_allow_html=True)
                    st.write(f"- **Ph∆∞∆°ng ph√°p**: {st.session_state['params']['model_choice']}")
                    if st.session_state['params']['model_choice'] == "H·ªìi quy ƒêa th·ª©c":
                        st.write(f"- **B·∫≠c ƒëa th·ª©c**: {st.session_state['params']['poly_degree']}")
                    st.write(f"- **Ph∆∞∆°ng ph√°p Learning Rate**: {st.session_state['params']['learning_rate_method']}")
                    if st.session_state['params']['learning_rate_method'] == "constant":
                        st.write(f"- **Eta0**: {st.session_state['params']['eta0']}")
                    st.write(f"- **S·ªë folds Cross Validation**: {st.session_state['params']['num_folds']}")
                    st.write(f"- **Th·ªùi gian hu·∫•n luy·ªán**: {st.session_state['training_time']:.2f} gi√¢y")

                    st.markdown("#### K·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c:", unsafe_allow_html=True)
                    st.write(f"- **Mean CV Score (R¬≤)**: {np.mean(st.session_state['cv_scores']):.2f}")
                    st.write(f"- **Validation MSE**: {st.session_state['mse_val']:.2f}")
                    st.write(f"- **Validation R¬≤**: {st.session_state['r2_val']:.2f}")
                    st.write(f"- **Validation Accuracy (ng∆∞·ª°ng 0.5)**: {st.session_state['accuracy_val']:.2f}")
                    st.write(f"- **Test MSE**: {st.session_state['mse_test']:.2f}")
                    st.write(f"- **Test R¬≤**: {st.session_state['r2_test']:.2f}")
                    st.write(f"- **Test Accuracy (ng∆∞·ª°ng 0.5)**: {st.session_state['accuracy_test']:.2f}")
                    st.markdown(f"""
                    - **Nh·∫≠n x√©t**:  
                      *=> M√¥ h√¨nh ƒë·∫°t ƒë·ªô ch√≠nh x√°c {st.session_state['accuracy_test']:.2f} tr√™n t·∫≠p test, cho th·∫•y kh·∫£ nƒÉng t·ªïng qu√°t h√≥a { 't·ªët' if st.session_state['accuracy_test'] > 0.8 else 'trung b√¨nh' if st.session_state['accuracy_test'] > 0.6 else 'k√©m'}.*  
                      Mean CV Score (R¬≤) g·∫ßn 1 v√† MSE nh·ªè cho th·∫•y m√¥ h√¨nh kh·ªõp t·ªët v·ªõi d·ªØ li·ªáu.
                    """, unsafe_allow_html=True)

                st.markdown("### Bi·ªÉu ƒë·ªì Actual vs Predicted (Validation)")
                fig, ax = plt.subplots()
                sns.scatterplot(x=st.session_state.y_val, y=st.session_state['y_pred_val'], ax=ax)
                ax.plot([0, 1], [0, 1], 'r--')
                ax.set_xlabel("Th·ª±c t·∫ø")
                ax.set_ylabel("D·ª± ƒëo√°n")
                st.pyplot(fig)

                st.markdown("### Bi·ªÉu ƒë·ªì Actual vs Predicted (Test)")
                fig2, ax2 = plt.subplots()
                sns.scatterplot(x=st.session_state.y_test, y=st.session_state['y_pred_test'], ax=ax2)
                ax2.plot([0, 1], [0, 1], 'r--')
                ax2.set_xlabel("Th·ª±c t·∫ø")
                ax2.set_ylabel("D·ª± ƒëo√°n")
                st.pyplot(fig2)
        else:
            st.warning("Vui l√≤ng chia t·∫≠p d·ªØ li·ªáu tr∆∞·ªõc.")

    # ---------------- Tab 4: D·ª± ƒëo√°n ----------------
    with tab_predict:
        st.header("Demo D·ª± ƒëo√°n")
        if st.session_state.get("models_trained", False):
            mode = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c d·ª± ƒëo√°n:", ["Nh·∫≠p th√¥ng tin th·ªß c√¥ng", "D·ªØ li·ªáu t·ª´ Test"])

            progress_bar = st.progress(0)
            status_text = st.empty()

            if mode == "Nh·∫≠p th√¥ng tin th·ªß c√¥ng":
                st.write("Nh·∫≠p th√¥ng tin h√†nh kh√°ch:")
                df = st.session_state.df
                features = df.drop(columns=["Survived"]).columns.tolist()
                input_values = []
                for feature in features:
                    if np.issubdtype(df[feature].dtype, np.number):
                        default_value = int(round(abs(df[feature].median())))  # Chuy·ªÉn v·ªÅ s·ªë nguy√™n
                        value = st.number_input(f"{feature}:", value=default_value, step=1, format="%d", key=f"input_{feature}")
                    else:
                        options = list(sorted(df[feature].unique()))
                        value = st.selectbox(f"{feature}:", options, key=f"input_{feature}")
                    input_values.append(value)
                
                if st.button("D·ª± ƒëo√°n"):
                    with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                        for i in range(0, 51, 5):
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang x·ª≠ l√Ω {i}%{i % 4 * '.'}")
                            time.sleep(0.1)

                        input_array = np.array(input_values).reshape(1, -1)
                        prediction = st.session_state.model.predict(input_array)[0]
                        prediction = np.clip(prediction, 0, 1)
                        
                        if prediction >= 0.5:
                            result = "S·ªëng"
                            confidence = int(round(prediction * 100))  # Chuy·ªÉn v·ªÅ s·ªë nguy√™n
                        else:
                            result = "Kh√¥ng s·ªëng"
                            confidence = int(round((1 - prediction) * 100))  # Chuy·ªÉn v·ªÅ s·ªë nguy√™n

                        for i in range(50, 101, 5):
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang ho√†n t·∫•t {i}%{i % 4 * '.'}")
                            time.sleep(0.1)

                        st.success(f"D·ª± ƒëo√°n: **{result}** | ƒê·ªô tin c·∫≠y: **{confidence}%**")
                        
                        time.sleep(1)
                        progress_bar.empty()
                        status_text.empty()

            elif mode == "D·ªØ li·ªáu t·ª´ Test":
                X_test = st.session_state['X_test']
                y_test = st.session_state['y_test']
                if X_test.empty or y_test.empty:
                    st.warning("T·∫≠p Test kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng chia d·ªØ li·ªáu v·ªõi t·ª∑ l·ªá Test > 0.")
                else:
                    idx = st.slider("Ch·ªçn m·∫´u t·ª´ Test", 0, len(X_test)-1, 0)
                    if st.button("D·ª± ƒëo√°n"):
                        with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                            for i in range(0, 51, 5):
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang x·ª≠ l√Ω {i}%{i % 4 * '.'}")
                                time.sleep(0.1)

                            sample = X_test.iloc[idx].values.reshape(1, -1)
                            prediction = st.session_state.model.predict(sample)[0]
                            prediction = np.clip(prediction, 0, 1)
                            
                            if prediction >= 0.5:
                                result = "S·ªëng"
                                confidence = int(round(prediction * 100))  # Chuy·ªÉn v·ªÅ s·ªë nguy√™n
                            else:
                                result = "Kh√¥ng s·ªëng"
                                confidence = int(round((1 - prediction) * 100))  # Chuy·ªÉn v·ªÅ s·ªë nguy√™n

                            y_true = "S·ªëng" if y_test.iloc[idx] == 1 else "Kh√¥ng s·ªëng"

                            for i in range(50, 101, 5):
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang ho√†n t·∫•t {i}%{i % 4 * '.'}")
                                time.sleep(0.1)

                            st.success(f"D·ª± ƒëo√°n: **{result}** | ƒê·ªô tin c·∫≠y: **{confidence}%** | Gi√° tr·ªã th·ª±c: **{y_true}**")
                            
                            time.sleep(1)
                            progress_bar.empty()
                            status_text.empty()

        else:
            st.warning("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")

    # ---------------- Tab 5: Th√¥ng tin hu·∫•n luy·ªán & MLflow UI ----------------
    with tab_mlflow:
        st.header("Theo d√µi k·∫øt qu·∫£")
        st.markdown("""
        Tab n√†y cho ph√©p b·∫°n xem danh s√°ch c√°c l·∫ßn hu·∫•n luy·ªán, ƒë·ªïi t√™n, x√≥a v√† xem chi ti·∫øt tham s·ªë c√πng k·∫øt qu·∫£ c·ªßa t·ª´ng run.
        """, unsafe_allow_html=True)
        
        try:
            client = MlflowClient()
            experiment = client.get_experiment_by_name("Titanic")
            if not experiment:
                st.error("Kh√¥ng t√¨m th·∫•y experiment 'Titanic'. Vui l√≤ng ki·ªÉm tra l·∫°i MLflow tracking URI.")
            else:
                experiment_id = experiment.experiment_id
                runs = client.search_runs(experiment_ids=[experiment_id], order_by=["attributes.start_time DESC"])
                
                if not runs:
                    st.info("Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    run_names = list(run_options.values())

                    default_run_name = st.session_state.get('run_name', run_names[0]) if 'run_name' in st.session_state else run_names[0]

                    st.subheader("Danh s√°ch run")
                    selected_run_name = st.selectbox(
                        "Ch·ªçn run:",
                        options=run_names,
                        index=run_names.index(default_run_name) if default_run_name in run_names else 0,
                        key="main_select",
                        help="Ch·ªçn m·ªôt l·∫ßn ch·∫°y ƒë·ªÉ xem chi ti·∫øt, ƒë·ªïi t√™n ho·∫∑c x√≥a."
                    )
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input(
                        "Nh·∫≠p t√™n m·ªõi:",
                        value=selected_run_name,
                        key="rename_input"
                    )
                    if st.button("C·∫≠p nh·∫≠t t√™n", key="rename_button"):
                        if new_run_name.strip() and new_run_name.strip() != selected_run_name:
                            with st.spinner("ƒêang c·∫≠p nh·∫≠t t√™n..."):
                                client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                                if 'run_name' in st.session_state and st.session_state['run_id'] == selected_run_id:
                                    st.session_state['run_name'] = new_run_name.strip()
                                st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                                time.sleep(0.5)
                                st.rerun()
                        elif not new_run_name.strip():
                            st.warning("Vui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá.")
                        else:
                            st.info("T√™n m·ªõi tr√πng v·ªõi t√™n hi·ªán t·∫°i.")

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y", key="delete_button"):
                        with st.spinner("ƒêang x√≥a l·∫ßn ch·∫°y..."):
                            client.delete_run(selected_run_id)
                            if 'run_id' in st.session_state and st.session_state['run_id'] == selected_run_id:
                                del st.session_state['run_id']
                                del st.session_state['run_name']
                            st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                            time.sleep(0.5)
                            st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt c·ªßa Run")
                    st.write(f"**T√™n l·∫ßn ch·∫°y:** {selected_run_name}")
                    st.write(f"**ID l·∫ßn ch·∫°y:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")

                    st.markdown("**Tham s·ªë:**", unsafe_allow_html=True)
                    if selected_run.data.params:
                        st.json(selected_run.data.params, expanded=True)
                    else:
                        st.write("Kh√¥ng c√≥ tham s·ªë ƒë∆∞·ª£c ghi nh·∫≠n.")

                    st.markdown("**K·∫øt qu·∫£:**", unsafe_allow_html=True)
                    if selected_run.data.metrics:
                        metrics_display = {
                            "Th·ªùi gian hu·∫•n luy·ªán (gi√¢y)": f"{selected_run.data.metrics.get('training_time_seconds', 'N/A'):.2f}",
                            "Mean CV Score (R¬≤)": f"{selected_run.data.metrics.get('mean_cv_score_r2', 'N/A'):.2f}",
                            "Validation MSE": f"{selected_run.data.metrics.get('mse_val', 'N/A'):.2f}",
                            "Validation R¬≤": f"{selected_run.data.metrics.get('r2_val', 'N/A'):.2f}",
                            "Validation Accuracy": f"{selected_run.data.metrics.get('accuracy_val', 'N/A'):.2f}",
                            "Test MSE": f"{selected_run.data.metrics.get('mse_test', 'N/A'):.2f}",
                            "Test R¬≤": f"{selected_run.data.metrics.get('r2_test', 'N/A'):.2f}",
                            "Test Accuracy": f"{selected_run.data.metrics.get('accuracy_test', 'N/A'):.2f}"
                        }
                        st.json(metrics_display, expanded=True)
                    else:
                        st.write("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë∆∞·ª£c ghi nh·∫≠n.")

                    st.subheader("Truy c·∫≠p MLflow UI")
                    if st.button("M·ªü MLflow UI tr√™n Dagshub"):
                        st.write(f"ƒêang chuy·ªÉn h∆∞·ªõng t·ªõi: https://dagshub.com/huykibo/streamlit_mlflow.mlflow")
                        st.markdown(f'<meta http-equiv="refresh" content="0;URL=https://dagshub.com/huykibo/streamlit_mlflow.mlflow">', unsafe_allow_html=True)
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi MLflow: {e}. Vui l√≤ng ki·ªÉm tra MLFLOW_TRACKING_URI v√† th√¥ng tin x√°c th·ª±c.")

if __name__ == "__main__":
    run_titanic_app()