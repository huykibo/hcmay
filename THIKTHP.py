import os
import mlflow
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from datetime import datetime
import time
import gc

#l∆∞u √≠ b·∫≠t mlflow ui tr∆∞·ªõc sau ƒë√≥ ch·∫°y streamlit run c·ªßa file code...
# H√†m x·ª≠ l√Ω d·ªØ li·ªáu ·∫£nh (n·∫øu d·ªØ li·ªáu l√† ·∫£nh)
def process_image_to_features(image_path):
    img = Image.open(image_path).convert('L').resize((64, 64))  # Gi·∫£ s·ª≠ ·∫£nh hoa 64x64 grayscale
    img_array = np.array(img).flatten() / 255.0  # Chu·∫©n h√≥a v·ªÅ [0, 1]
    return img_array

# H√†m t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ CSV
def load_and_preprocess_data(uploaded_file):
    if uploaded_file.name.endswith('.csv'):
        data = pd.read_csv(uploaded_file)
        required_columns = ['Leaf_Length', 'Leaf_Width', 'Stem_Length', 'Petal_Size', 'Label']
        missing_columns = [col for col in required_columns if col not in data.columns]
        if missing_columns:
            st.error(f"‚ùå File CSV thi·∫øu c√°c c·ªôt c·∫ßn thi·∫øt: {', '.join(missing_columns)}. D·ªØ li·ªáu c·∫ßn c√≥ c√°c c·ªôt: {', '.join(required_columns)}.")
            return None, None
        
        X = data[['Leaf_Length', 'Leaf_Width', 'Stem_Length', 'Petal_Size']].values
        y = data['Label'].values
    else:
        st.error("‚ùå Hi·ªán ch·ªâ h·ªó tr·ª£ file CSV. N·∫øu d√πng ·∫£nh, c·∫ßn th√™m logic x·ª≠ l√Ω ri√™ng.")
        return None, None
    return X, y

# ·ª®ng d·ª•ng ch√≠nh
def run_flower_classification_app():
    # Thi·∫øt l·∫≠p MLflow c·ª•c b·ªô
    mlflow.set_tracking_uri("http://localhost:5000")
    mlflow.set_experiment("Flower_Classification")
    EXPERIMENT_ID = mlflow.get_experiment_by_name("Flower_Classification").experiment_id

    # Ti√™u ƒë·ªÅ ch√≠nh
    st.title("üå∏ ·ª®ng d·ª•ng Ph√¢n lo·∫°i Hoa v·ªõi Logistic Regression v√† SVM")
    st.markdown("---")

    # T·∫°o c√°c tab
    tab_preprocess, tab_train, tab_predict, tab_mlflow = st.tabs([
        "üìä Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu", "üõ†Ô∏è Hu·∫•n luy·ªán m√¥ h√¨nh", "üîç D·ª± ƒëo√°n", "üìà Th√¥ng tin MLflow"
    ])

    # Tab 1: Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
    with tab_preprocess:
        st.header("üìä Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
        st.markdown("""
        **H∆∞·ªõng d·∫´n:** T·∫£i l√™n file CSV ch·ª©a d·ªØ li·ªáu hoa v·ªõi c√°c c·ªôt:  
        - `Leaf_Length` (Chi·ªÅu d√†i l√°)  
        - `Leaf_Width` (Chi·ªÅu r·ªông l√°)  
        - `Stem_Length` (Chi·ªÅu d√†i th√¢n)  
        - `Petal_Size` (K√≠ch th∆∞·ªõc c√°nh hoa)  
        - `Label` (Nh√£n lo√†i hoa: 0 ho·∫∑c 1)  
        D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c chu·∫©n h√≥a v√† hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng bi·ªÉu ƒë·ªì ph√¢n t√°n.
        """)
        
        uploaded_file = st.file_uploader("üìÇ T·∫£i l√™n file d·ªØ li·ªáu", type=["csv"])
        if uploaded_file:
            with st.spinner("‚è≥ ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
                X, y = load_and_preprocess_data(uploaded_file)
                if X is not None:
                    scaler = StandardScaler()
                    X_scaled = scaler.fit_transform(X)
                    st.session_state['data'] = (X_scaled, y, scaler)
                    st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu: {X.shape[0]} m·∫´u, {X.shape[1]} ƒë·∫∑c tr∆∞ng")

                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n t√°n
                    with st.container():
                        st.subheader("üìà Minh h·ªça d·ªØ li·ªáu")
                        fig, ax = plt.subplots(figsize=(10, 6))
                        sample_indices = np.random.choice(len(X), min(100, len(X)), replace=False)
                        sns.scatterplot(x=X[sample_indices, 0], y=X[sample_indices, 1], hue=y[sample_indices], 
                                        palette="Set2", size=10, ax=ax)
                        ax.set_title("Ph√¢n b·ªë d·ªØ li·ªáu hoa (Chi·ªÅu d√†i l√° v√† Chi·ªÅu r·ªông l√°)", fontsize=14, pad=15)
                        ax.set_xlabel("Chi·ªÅu d√†i l√° (Leaf_Length)", fontsize=12)
                        ax.set_ylabel("Chi·ªÅu r·ªông l√° (Leaf_Width)", fontsize=12)
                        ax.grid(True, linestyle='--', alpha=0.7)
                        ax.legend(title="Lo√†i hoa (Label)", loc="best")
                        st.pyplot(fig)
                        plt.close(fig)

                    # Gi·∫£i th√≠ch bi·ªÉu ƒë·ªì
                    with st.expander("‚ÑπÔ∏è Gi·∫£i th√≠ch bi·ªÉu ƒë·ªì"):
                        st.markdown("""
                        Bi·ªÉu ƒë·ªì tr√™n l√† m·ªôt **ƒë·ªì th·ªã ph√¢n t√°n (scatter plot)** th·ªÉ hi·ªán ph√¢n b·ªë c·ªßa d·ªØ li·ªáu hoa d·ª±a tr√™n hai ƒë·∫∑c tr∆∞ng:  
                        - **Chi·ªÅu d√†i l√° (Leaf_Length)**: Tr·ª•c X.  
                        - **Chi·ªÅu r·ªông l√° (Leaf_Width)**: Tr·ª•c Y.  
                        - **M√†u s·∫Øc**: Bi·ªÉu th·ªã c√°c lo√†i hoa kh√°c nhau (nh√£n `Label`: 0 ho·∫∑c 1).  
                        - **M·ª•c ƒë√≠ch**: Gi√∫p h√¨nh dung m·ª©c ƒë·ªô ph√¢n t√°ch gi·ªØa c√°c lo√†i hoa d·ª±a tr√™n hai ƒë·∫∑c tr∆∞ng n√†y. N·∫øu c√°c c·ª•m m√†u s·∫Øc t√°ch bi·ªát r√µ r√†ng, m√¥ h√¨nh h·ªçc m√°y s·∫Ω d·ªÖ d√†ng ph√¢n lo·∫°i h∆°n.
                        """)

    # Tab 2: Hu·∫•n luy·ªán m√¥ h√¨nh
    with tab_train:
        st.header("üõ†Ô∏è Hu·∫•n luy·ªán m√¥ h√¨nh")
        if 'data' not in st.session_state:
            st.info("‚ÑπÔ∏è Vui l√≤ng ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc khi hu·∫•n luy·ªán.")
        else:
            X, y, scaler = st.session_state['data']
            st.write(f"**T·ªïng s·ªë m·∫´u d·ªØ li·ªáu**: {len(X)}")

            # Ph√¢n chia d·ªØ li·ªáu
            with st.container():
                st.subheader("üìå Ph√¢n chia d·ªØ li·ªáu")
                col1, col2 = st.columns(2)
                with col1:
                    valid_pct = st.slider("T·ª∑ l·ªá Validation (%)", 0, 100, 15, help="Ph·∫ßn trƒÉm d·ªØ li·ªáu d√πng ƒë·ªÉ ki·ªÉm tra trong qu√° tr√¨nh hu·∫•n luy·ªán.")
                with col2:
                    test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 100 - valid_pct, 15, help="Ph·∫ßn trƒÉm d·ªØ li·ªáu d√πng ƒë·ªÉ ƒë√°nh gi√° cu·ªëi c√πng.")
                train_pct = 100 - valid_pct - test_pct
                st.write(f"**Ph√¢n b·ªï d·ªØ li·ªáu**: Train: {train_pct}%, Validation: {valid_pct}%, Test: {test_pct}%")

                if st.button("üìä Chia d·ªØ li·ªáu", type="primary"):
                    X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_pct/100, random_state=42)
                    X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, 
                                                                          test_size=valid_pct/(100 - test_pct) if test_pct < 100 else 0, 
                                                                          random_state=42)
                    st.session_state['split_data'] = {
                        "X_train": X_train, "y_train": y_train,
                        "X_valid": X_valid, "y_valid": y_valid,
                        "X_test": X_test, "y_test": y_test
                    }
                    st.success("‚úÖ ƒê√£ chia d·ªØ li·ªáu th√†nh c√¥ng!")

            # Hu·∫•n luy·ªán m√¥ h√¨nh
            if 'split_data' in st.session_state:
                split_data = st.session_state['split_data']
                X_train, y_train = split_data['X_train'], split_data['y_train']

                with st.container():
                    st.subheader("‚öôÔ∏è C·∫•u h√¨nh hu·∫•n luy·ªán")
                    model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh", ["Logistic Regression", "SVM"], key="train_model_selectbox")
                    model_name = st.text_input("T√™n m√¥ h√¨nh", value=f"{model_choice}_Model", help="ƒê·∫∑t t√™n cho m√¥ h√¨nh ƒë·ªÉ d·ªÖ nh·∫≠n di·ªán.")
                    k_folds = st.slider("S·ªë l·∫ßn ki·ªÉm tra ch√©o (K-folds)", 2, 10, 5, help="S·ªë l·∫ßn ki·ªÉm tra ch√©o ƒë·ªÉ ƒë√°nh gi√° ƒë·ªô ·ªïn ƒë·ªãnh c·ªßa m√¥ h√¨nh.")

                    # C·∫•u h√¨nh tham s·ªë m√¥ h√¨nh
                    params = {}
                    if model_choice == "Logistic Regression":
                        with st.expander("üîß Tham s·ªë Logistic Regression"):
                            params["ƒê·ªô ƒëi·ªÅu ch·ªânh"] = st.number_input("ƒê·ªô ƒëi·ªÅu ch·ªânh (C)", min_value=0.01, max_value=100.0, value=1.0,
                                                                     help="ƒêi·ªÅu ch·ªânh m·ª©c ƒë·ªô regularization: Gi√° tr·ªã nh·ªè tƒÉng regularization, gi·∫£m overfitting.")
                            params["S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa"] = st.number_input("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa", min_value=100, max_value=5000, value=1000,
                                                                         help="S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa ƒë·ªÉ m√¥ h√¨nh h·ªôi t·ª•.")
                            params["H√¨nh ph·∫°t"] = st.selectbox("H√¨nh ph·∫°t", ["l2", "l1"], index=0,
                                                               help="Lo·∫°i regularization: 'l2' (m·∫∑c ƒë·ªãnh) ho·∫∑c 'l1' (Lasso).")
                            params["Ph∆∞∆°ng ph√°p gi·∫£i"] = st.selectbox("Ph∆∞∆°ng ph√°p gi·∫£i", ["lbfgs", "liblinear", "saga"], index=0,
                                                                      help="Ph∆∞∆°ng ph√°p t·ªëi ∆∞u: 'lbfgs' (m·∫∑c ƒë·ªãnh), 'liblinear' (nh·ªè g·ªçn), 'saga' (h·ªó tr·ª£ l1).")
                    elif model_choice == "SVM":
                        with st.expander("üîß Tham s·ªë SVM"):
                            params["ƒê·ªô ƒëi·ªÅu ch·ªânh"] = st.number_input("ƒê·ªô ƒëi·ªÅu ch·ªânh (C)", min_value=0.01, max_value=100.0, value=1.0,
                                                                     help="ƒêi·ªÅu ch·ªânh m·ª©c ƒë·ªô sai s·ªë v√† l·ªÅ: Gi√° tr·ªã l·ªõn ∆∞u ti√™n ph√¢n lo·∫°i ch√≠nh x√°c h∆°n.")
                            params["Lo·∫°i kernel"] = st.selectbox("Lo·∫°i kernel", ["linear", "rbf", "poly", "sigmoid"], index=1,
                                                                 help="Lo·∫°i kernel cho SVM: Linear (tuy·∫øn t√≠nh), RBF (phi tuy·∫øn), Polynomial (ƒëa th·ª©c), Sigmoid.")

                    if st.button("üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán", type="primary"):
                        # Thanh ti·∫øn tr√¨nh
                        progress_text = st.empty()
                        progress_bar = st.progress(0)
                        with st.spinner(f"‚è≥ ƒêang hu·∫•n luy·ªán m√¥ h√¨nh {model_name}..."):
                            start_time = time.time()
                            if model_choice == "Logistic Regression":
                                model = LogisticRegression(C=params["ƒê·ªô ƒëi·ªÅu ch·ªânh"], max_iter=params["S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa"], 
                                                           penalty=params["H√¨nh ph·∫°t"], solver=params["Ph∆∞∆°ng ph√°p gi·∫£i"])
                            else:
                                model = SVC(C=params["ƒê·ªô ƒëi·ªÅu ch·ªânh"], kernel=params["Lo·∫°i kernel"], probability=True)

                            pipeline = Pipeline([('classifier', model)])
                            pipeline.fit(X_train, y_train)

                            # Gi·∫£ l·∫≠p thanh ti·∫øn tr√¨nh (d·ª±a tr√™n th·ªùi gian hu·∫•n luy·ªán)
                            training_time = time.time() - start_time
                            for i in range(101):
                                time.sleep(training_time / 100)  # Chia nh·ªè th·ªùi gian ƒë·ªÉ hi·ªÉn th·ªã ti·∫øn tr√¨nh
                                progress_text.text(f"Ti·∫øn tr√¨nh hu·∫•n luy·ªán: {i}%")
                                progress_bar.progress(i)
                            progress_text.empty()

                            cv_scores = cross_val_score(pipeline, X_train, y_train, cv=k_folds)
                            cv_mean = cv_scores.mean()
                            cv_std = cv_scores.std()

                            acc_valid = accuracy_score(split_data['y_valid'], pipeline.predict(split_data['X_valid']))
                            acc_test = accuracy_score(split_data['y_test'], pipeline.predict(split_data['X_test']))

                            run_name = f"{model_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                            with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=run_name):
                                mlflow.log_param("model", model_choice)
                                mlflow.log_param("k_folds", k_folds)
                                if model_choice == "Logistic Regression":
                                    mlflow.log_param("ƒê·ªô ƒëi·ªÅu ch·ªânh", params["ƒê·ªô ƒëi·ªÅu ch·ªânh"])
                                    mlflow.log_param("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa", params["S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa"])
                                    mlflow.log_param("H√¨nh ph·∫°t", params["H√¨nh ph·∫°t"])
                                    mlflow.log_param("Ph∆∞∆°ng ph√°p gi·∫£i", params["Ph∆∞∆°ng ph√°p gi·∫£i"])
                                else:
                                    mlflow.log_param("ƒê·ªô ƒëi·ªÅu ch·ªânh", params["ƒê·ªô ƒëi·ªÅu ch·ªânh"])
                                    mlflow.log_param("Lo·∫°i kernel", params["Lo·∫°i kernel"])
                                mlflow.log_metric("cv_mean", cv_mean)
                                mlflow.log_metric("cv_std", cv_std)
                                mlflow.log_metric("accuracy_valid", acc_valid)
                                mlflow.log_metric("accuracy_test", acc_test)
                                mlflow.log_metric("training_time", time.time() - start_time)
                                mlflow.sklearn.log_model(pipeline, "model")

                            st.session_state[f'model_{model_name}'] = pipeline
                            st.success(f"‚úÖ ƒê√£ hu·∫•n luy·ªán m√¥ h√¨nh {model_name}! Th·ªùi gian: {time.time() - start_time:.2f} gi√¢y")
                            st.write(f"**Ki·ªÉm tra ch√©o (Cross-Validation)**: Trung b√¨nh = {cv_mean:.4f}, ƒê·ªô l·ªách chu·∫©n = {cv_std:.4f}")
                            st.write(f"**ƒê·ªô ch√≠nh x√°c**: Validation = {acc_valid:.4f}, Test = {acc_test:.4f}")

                            # Bi·ªÉu ƒë·ªì ƒë√°nh gi√° chuy√™n nghi·ªáp
                            with st.container():
                                st.subheader("üìä ƒê√°nh gi√° hi·ªáu su·∫•t m√¥ h√¨nh")
                                fig, ax = plt.subplots(figsize=(8, 5))
                                metrics = ['Validation', 'Test']
                                values = [acc_valid, acc_test]
                                colors = ['#66BB6A', '#42A5F5']  # M√†u s·∫Øc chuy√™n nghi·ªáp
                                bars = ax.bar(metrics, values, color=colors, width=0.5)
                                ax.set_ylim(0, 1.1)
                                ax.set_title(f"Hi·ªáu su·∫•t c·ªßa m√¥ h√¨nh {model_name}" + 
                                             (f" (Kernel: {params['Lo·∫°i kernel']})" if model_choice == "SVM" else ""), 
                                             fontsize=14, pad=15)
                                ax.set_ylabel("ƒê·ªô ch√≠nh x√°c", fontsize=12)
                                ax.set_xlabel("T·∫≠p d·ªØ li·ªáu", fontsize=12)
                                ax.grid(True, axis='y', linestyle='--', alpha=0.7)
                                for bar in bars:
                                    yval = bar.get_height()
                                    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.02, f"{yval:.4f}", 
                                            ha='center', va='bottom', fontsize=10, color='black')
                                st.pyplot(fig)
                                plt.close(fig)

                            # Gi·∫£i th√≠ch k·∫øt qu·∫£
                            with st.expander("‚ÑπÔ∏è Ph√¢n t√≠ch k·∫øt qu·∫£"):
                                if model_choice == "Logistic Regression":
                                    explanation = """
                                    **Ph√¢n t√≠ch hi·ªáu su·∫•t Logistic Regression:**  
                                    - **Trung b√¨nh ki·ªÉm tra ch√©o (CV Mean)**: {cv_mean:.4f} ‚Äì ƒê·ªô ch√≠nh x√°c trung b√¨nh t·ª´ {k_folds} l·∫ßn ki·ªÉm tra ch√©o, th·ªÉ hi·ªán hi·ªáu su·∫•t ·ªïn ƒë·ªãnh tr√™n d·ªØ li·ªáu hu·∫•n luy·ªán.  
                                    - **ƒê·ªô l·ªách chu·∫©n CV (CV Std)**: {cv_std:.4f} ‚Äì ƒê·ªô bi·∫øn thi√™n c·ªßa ƒë·ªô ch√≠nh x√°c, gi√° tr·ªã nh·ªè cho th·∫•y m√¥ h√¨nh ·ªïn ƒë·ªãnh.  
                                    - **ƒê·ªô ch√≠nh x√°c Validation**: {acc_valid:.4f} ‚Äì Kh·∫£ nƒÉng d·ª± ƒëo√°n tr√™n t·∫≠p validation (d·ªØ li·ªáu ch∆∞a th·∫•y trong hu·∫•n luy·ªán).  
                                    - **ƒê·ªô ch√≠nh x√°c Test**: {acc_test:.4f} ‚Äì Kh·∫£ nƒÉng t·ªïng qu√°t h√≥a tr√™n t·∫≠p test (d·ªØ li·ªáu m·ªõi).  
                                    - **Nh·∫≠n x√©t**: N·∫øu ƒë·ªô ch√≠nh x√°c Validation v√† Test cao v√† g·∫ßn nhau, m√¥ h√¨nh c√≥ kh·∫£ nƒÉng ph√¢n lo·∫°i t·ªët, √≠t b·ªã overfitting.  
                                    - **Tham s·ªë ·∫£nh h∆∞·ªüng**:  
                                      - `ƒê·ªô ƒëi·ªÅu ch·ªânh (C) = {C}`: ƒêi·ªÅu ch·ªânh m·ª©c ƒë·ªô regularization.  
                                      - `H√¨nh ph·∫°t = {penalty}`: Lo·∫°i regularization.  
                                      - `Ph∆∞∆°ng ph√°p gi·∫£i = {solver}`: ·∫¢nh h∆∞·ªüng ƒë·∫øn t·ªëc ƒë·ªô h·ªôi t·ª•.
                                    """
                                    st.markdown(explanation.format(k_folds=k_folds, cv_mean=cv_mean, cv_std=cv_std, 
                                                                   acc_valid=acc_valid, acc_test=acc_test, 
                                                                   C=params["ƒê·ªô ƒëi·ªÅu ch·ªânh"], penalty=params["H√¨nh ph·∫°t"], 
                                                                   solver=params["Ph∆∞∆°ng ph√°p gi·∫£i"]))
                                else:  # SVM
                                    explanation = """
                                    **Ph√¢n t√≠ch hi·ªáu su·∫•t SVM:**  
                                    - **Trung b√¨nh ki·ªÉm tra ch√©o (CV Mean)**: {cv_mean:.4f} ‚Äì ƒê·ªô ch√≠nh x√°c trung b√¨nh t·ª´ {k_folds} l·∫ßn ki·ªÉm tra ch√©o, th·ªÉ hi·ªán hi·ªáu su·∫•t ·ªïn ƒë·ªãnh tr√™n d·ªØ li·ªáu hu·∫•n luy·ªán.  
                                    - **ƒê·ªô l·ªách chu·∫©n CV (CV Std)**: {cv_std:.4f} ‚Äì ƒê·ªô bi·∫øn thi√™n c·ªßa ƒë·ªô ch√≠nh x√°c, gi√° tr·ªã nh·ªè cho th·∫•y m√¥ h√¨nh ·ªïn ƒë·ªãnh.  
                                    - **ƒê·ªô ch√≠nh x√°c Validation**: {acc_valid:.4f} ‚Äì Kh·∫£ nƒÉng d·ª± ƒëo√°n tr√™n t·∫≠p validation.  
                                    - **ƒê·ªô ch√≠nh x√°c Test**: {acc_test:.4f} ‚Äì Kh·∫£ nƒÉng t·ªïng qu√°t h√≥a tr√™n t·∫≠p test.  
                                    - **Nh·∫≠n x√©t**: N·∫øu ƒë·ªô ch√≠nh x√°c Validation v√† Test cao v√† g·∫ßn nhau, m√¥ h√¨nh c√≥ kh·∫£ nƒÉng ph√¢n lo·∫°i t·ªët, √≠t b·ªã overfitting.  
                                    - **Tham s·ªë ·∫£nh h∆∞·ªüng**:  
                                      - `ƒê·ªô ƒëi·ªÅu ch·ªânh (C) = {C}`: ƒêi·ªÅu ch·ªânh sai s·ªë v√† l·ªÅ.  
                                      - `Lo·∫°i kernel = {kernel}`: Quy·∫øt ƒë·ªãnh c√°ch ph√¢n t√°ch d·ªØ li·ªáu, ph√π h·ª£p v·ªõi d·ªØ li·ªáu c√≥ ph√¢n b·ªë {kernel_desc}.
                                    """
                                    kernel_desc = "tuy·∫øn t√≠nh" if params["Lo·∫°i kernel"] == "linear" else "phi tuy·∫øn ph·ª©c t·∫°p"
                                    st.markdown(explanation.format(k_folds=k_folds, cv_mean=cv_mean, cv_std=cv_std, 
                                                                   acc_valid=acc_valid, acc_test=acc_test, 
                                                                   C=params["ƒê·ªô ƒëi·ªÅu ch·ªânh"], kernel=params["Lo·∫°i kernel"], 
                                                                   kernel_desc=kernel_desc))

    # Tab 3: D·ª± ƒëo√°n
    with tab_predict:
        st.header("üîç D·ª± ƒëo√°n lo√†i hoa")
        if 'data' not in st.session_state or not any(key.startswith('model_') for key in st.session_state.keys()):
            st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i d·ªØ li·ªáu v√† hu·∫•n luy·ªán √≠t nh·∫•t m·ªôt m√¥ h√¨nh tr∆∞·ªõc.")
        else:
            X, y, scaler = st.session_state['data']
            model_options = [key.replace('model_', '') for key in st.session_state.keys() if key.startswith('model_')]
            if not model_options:
                st.warning("‚ö†Ô∏è Ch∆∞a c√≥ m√¥ h√¨nh n√†o ƒë∆∞·ª£c hu·∫•n luy·ªán.")
            else:
                with st.container():
                    st.subheader("üìå Ch·ªçn m√¥ h√¨nh v√† d·ªØ li·ªáu d·ª± ƒëo√°n")
                    model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh", model_options, key="predict_model_selectbox")

                    prediction_method = st.radio("Ch·ªçn c√°ch l·∫•y d·ªØ li·ªáu d·ª± ƒëo√°n", ["Ch·ªçn t·ª´ t·∫≠p d·ªØ li·ªáu", "Ng·∫´u nhi√™n", "T·∫£i l√™n file CSV"])
                    
                    if prediction_method == "Ch·ªçn t·ª´ t·∫≠p d·ªØ li·ªáu":
                        sample_idx = st.slider("Ch·ªçn m·∫´u d·ªØ li·ªáu", 0, len(X) - 1, 0, help="Ch·ªçn m·ªôt m·∫´u t·ª´ t·∫≠p d·ªØ li·ªáu ƒë√£ t·∫£i.")
                        X_sample = X[sample_idx].reshape(1, -1)
                        true_label = y[sample_idx]
                    elif prediction_method == "Ng·∫´u nhi√™n":
                        sample_idx = np.random.randint(0, len(X))
                        X_sample = X[sample_idx].reshape(1, -1)
                        true_label = y[sample_idx]
                    else:
                        uploaded_sample = st.file_uploader("üìÇ T·∫£i l√™n m·∫´u d·ªØ li·ªáu (CSV)", type=["csv"], key="predict_upload")
                        if uploaded_sample:
                            X_sample, _ = load_and_preprocess_data(uploaded_sample)
                            true_label = None
                        else:
                            X_sample = None

                    if X_sample is not None:
                        if st.button("üîç D·ª± ƒëo√°n", type="primary"):
                            with st.spinner("‚è≥ ƒêang d·ª± ƒëo√°n..."):
                                model_key = f'model_{model_choice}'
                                if model_key in st.session_state:
                                    model = st.session_state[model_key]
                                    pred_proba = model.predict_proba(X_sample)[0]
                                    pred_class = model.predict(X_sample)[0]
                                    confidence = pred_proba.max() * 100
                                    st.write(f"**K·∫øt qu·∫£ d·ª± ƒëo√°n**: {pred_class}")
                                    if true_label is not None:
                                        st.write(f"**Nh√£n th·ª±c t·∫ø**: {true_label}")
                                    st.write(f"**ƒê·ªô tin c·∫≠y**: {confidence:.2f}%")
                                    st.success("‚úÖ D·ª± ƒëo√°n ho√†n t·∫•t!")
                                else:
                                    st.error(f"‚ùå M√¥ h√¨nh '{model_choice}' ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán ho·∫∑c kh√¥ng t·ªìn t·∫°i.")

    # Tab 4: Th√¥ng tin MLflow
    with tab_mlflow:
        st.header("üìà Qu·∫£n l√Ω th√¥ng tin MLflow")
        if st.button("üîÑ L√†m m·ªõi danh s√°ch"):
            st.session_state.pop('mlflow_runs', None)
            st.rerun()

        try:
            with st.spinner("‚è≥ ƒêang t·∫£i th√¥ng tin t·ª´ MLflow..."):
                client = MlflowClient()
                runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])
                if not runs:
                    st.info("‚ÑπÔ∏è Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")
                else:
                    # Ph·∫ßn 1: Chi ti·∫øt l·∫ßn ch·∫°y
                    with st.container():
                        st.subheader("üìã Chi ti·∫øt l·∫ßn ch·∫°y")
                        run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                        selected_run_name = st.selectbox("Ch·ªçn l·∫ßn ch·∫°y", list(run_options.values()))
                        selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                        selected_run = client.get_run(selected_run_id)

                        new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi", value=selected_run_name)
                        if st.button("‚úèÔ∏è C·∫≠p nh·∫≠t t√™n"):
                            client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                            st.success(f"‚úÖ ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                            st.rerun()

                        if st.button("üóëÔ∏è X√≥a l·∫ßn ch·∫°y"):
                            client.delete_run(selected_run_id)
                            st.success(f"‚úÖ ƒê√£ x√≥a: {selected_run_name}")
                            st.rerun()

                        st.write(f"**T√™n l·∫ßn ch·∫°y**: {selected_run_name}")
                        st.write(f"**ID**: {selected_run_id}")
                        st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu**: {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")
                        st.write("**Tham s·ªë**:")
                        st.json(selected_run.data.params)
                        st.write("**S·ªë li·ªáu**:")
                        st.json(selected_run.data.metrics)
                        st.markdown("üîó Xem chi ti·∫øt t·∫°i: [MLflow UI](http://localhost:5000)")

                    # Ph·∫ßn 2: So s√°nh c√°c m√¥ h√¨nh
                    with st.container():
                        st.subheader("üìä So s√°nh hi·ªáu su·∫•t c√°c m√¥ h√¨nh")
                        # T·∫°o danh s√°ch c√°c l·∫ßn ch·∫°y ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
                        run_names = [run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs]
                        selected_runs = st.multiselect("Ch·ªçn c√°c m√¥ h√¨nh ƒë·ªÉ so s√°nh", run_names)  # Kh√¥ng m·∫∑c ƒë·ªãnh ch·ªçn

                        if not selected_runs:
                            st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√¥ h√¨nh ƒë·ªÉ so s√°nh.")
                        else:
                            # L·ªçc d·ªØ li·ªáu c·ªßa c√°c m√¥ h√¨nh ƒë∆∞·ª£c ch·ªçn
                            comparison_data = []
                            for run in runs:
                                run_name = run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}")
                                if run_name in selected_runs:
                                    model_type = run.data.params.get('model', 'Kh√¥ng x√°c ƒë·ªãnh')
                                    acc_valid = run.data.metrics.get('accuracy_valid', 0.0)
                                    acc_test = run.data.metrics.get('accuracy_test', 0.0)
                                    comparison_data.append({
                                        "T√™n l·∫ßn ch·∫°y": run_name,
                                        "Lo·∫°i m√¥ h√¨nh": model_type,
                                        "ƒê·ªô ch√≠nh x√°c Validation": acc_valid,
                                        "ƒê·ªô ch√≠nh x√°c Test": acc_test
                                    })

                            # Hi·ªÉn th·ªã b·∫£ng so s√°nh
                            if comparison_data:
                                comparison_df = pd.DataFrame(comparison_data)
                                st.write("**B·∫£ng so s√°nh hi·ªáu su·∫•t:**")
                                st.dataframe(comparison_df.style.format({
                                    "ƒê·ªô ch√≠nh x√°c Validation": "{:.4f}",
                                    "ƒê·ªô ch√≠nh x√°c Test": "{:.4f}"
                                }))

                                # Bi·ªÉu ƒë·ªì so s√°nh
                                st.write("**Bi·ªÉu ƒë·ªì so s√°nh ƒë·ªô ch√≠nh x√°c:**")
                                fig, ax = plt.subplots(figsize=(10, 6))
                                bar_width = 0.35
                                index = np.arange(len(comparison_df))
                                bars1 = ax.bar(index, comparison_df["ƒê·ªô ch√≠nh x√°c Validation"], bar_width, label="Validation", color="#66BB6A")
                                bars2 = ax.bar(index + bar_width, comparison_df["ƒê·ªô ch√≠nh x√°c Test"], bar_width, label="Test", color="#42A5F5")
                                ax.set_xlabel("T√™n l·∫ßn ch·∫°y", fontsize=12)
                                ax.set_ylabel("ƒê·ªô ch√≠nh x√°c", fontsize=12)
                                ax.set_title("So s√°nh hi·ªáu su·∫•t c√°c m√¥ h√¨nh", fontsize=14, pad=15)
                                ax.set_xticks(index + bar_width / 2)
                                ax.set_xticklabels(comparison_df["T√™n l·∫ßn ch·∫°y"], rotation=45, ha="right")
                                ax.set_ylim(0, 1.1)
                                ax.grid(True, axis='y', linestyle='--', alpha=0.7)
                                ax.legend()
                                for bar in bars1:
                                    yval = bar.get_height()
                                    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.02, f"{yval:.4f}", ha='center', va='bottom', fontsize=8)
                                for bar in bars2:
                                    yval = bar.get_height()
                                    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.02, f"{yval:.4f}", ha='center', va='bottom', fontsize=8)
                                st.pyplot(fig)
                                plt.close(fig)
                            else:
                                st.info("‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ so s√°nh.")

        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫£i th√¥ng tin MLflow: {e}")

if __name__ == "__main__":
    run_flower_classification_app()