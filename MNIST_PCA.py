import os
import mlflow
import streamlit as st
import openml
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from mlflow.tracking import MlflowClient
from datetime import datetime
from sklearn.impute import SimpleImputer
import time
import plotly.express as px
from PIL import Image

def resize_image(image_path, size=(50, 50)):
    """Resize image to specified size and return as bytes."""
    img = Image.open(image_path)
    img_resized = img.resize(size, Image.Resampling.LANCZOS)  # LANCZOS for better quality
    return img_resized

def run_mnist_dimension_reduction_app():
    st.title("·ª®ng d·ª•ng Tr·ª±c quan h√≥a D·ªØ li·ªáu MNIST v·ªõi PCA v√† t-SNE")

    # CSS for inline layout
    st.markdown("""
        <style>
            .inline-container {
                display: inline-flex;
                align-items: center;
                gap: 5px;
            }
            .image-container {
                max-width: 800px; /* Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa */
                margin: auto;
            }
        </style>
    """, unsafe_allow_html=True)

    # ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a h√¨nh ·∫£nh minh h·ªça PCA v√† t-SNE
    pca_image_dir = r"pca"
    tsne_image_dir = r"tsne_steps"

    # Kh·ªüi t·∫°o v√† ki·ªÉm tra/t·∫°o experiment
    client = MlflowClient()
    experiment_name = "MNIST_PCA"
    experiment = client.get_experiment_by_name(experiment_name)
    if not experiment:
        st.warning(f"Experiment '{experiment_name}' ch∆∞a t·ªìn t·∫°i. ƒêang t·∫°o m·ªõi...")
        experiment_id = client.create_experiment(experiment_name)
        st.success(f"ƒê√£ t·∫°o experiment '{experiment_name}' v·ªõi ID: {experiment_id}")
    else:
        experiment_id = experiment.experiment_id

    # Tabs for navigation
    tab_info, tab_load, tab_visualize, tab_log_info = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "Tr·ª±c quan h√≥a", "Theo d√µi k·∫øt qu·∫£"])

    # Tab Th√¥ng tin (C·∫≠p nh·∫≠t v·ªõi th√¥ng tin MNIST trong selectbox)
    with tab_info:
        st.header("Gi·ªõi thi·ªáu v·ªÅ PCA v√† t-SNE")
        st.markdown("""
        ·ª®ng d·ª•ng n√†y gi√∫p b·∫°n tr·ª±c quan h√≥a t·∫≠p d·ªØ li·ªáu **MNIST** b·∫±ng c√°ch gi·∫£m chi·ªÅu d·ªØ li·ªáu t·ª´ $784$ chi·ªÅu (28x28 pixel) xu·ªëng $2D$ ho·∫∑c $3D$ s·ª≠ d·ª•ng **PCA** (Ph√¢n t√≠ch Th√†nh ph·∫ßn Ch√≠nh) v√† **t-SNE** (Nh√∫ng Ng·∫´u nhi√™n L√°ng gi·ªÅng Ph√¢n ph·ªëi t).  
        - **M·ª•c ti√™u**: Kh√°m ph√° c·∫•u tr√∫c ·∫©n trong d·ªØ li·ªáu, gi√∫p hi·ªÉu c√°ch c√°c ch·ªØ s·ªë (0-9) ph√¢n b·ªë trong kh√¥ng gian th·∫•p chi·ªÅu.  
        - **Kh√°c bi·ªát ch√≠nh**: PCA l√† tuy·∫øn t√≠nh v√† nhanh, trong khi t-SNE l√† phi tuy·∫øn t√≠nh v√† t·∫≠p trung v√†o c·∫•u tr√∫c c·ª•c b·ªô.  
        """, unsafe_allow_html=True)

        st.subheader("Ch·ªçn m·ª•c ƒë·ªÉ t√¨m hi·ªÉu:")
        info_option = st.selectbox(
            "",
            ["MNIST l√† g√¨?", "PCA l√† g√¨?", "t-SNE l√† g√¨?", "So s√°nh PCA v√† t-SNE"],
            label_visibility="collapsed",
            help="Ch·ªçn ƒë·ªÉ xem chi ti·∫øt v·ªÅ MNIST, PCA, t-SNE ho·∫∑c so s√°nh PCA v√† t-SNE."
        )

        if info_option == "MNIST l√† g√¨?":
            st.subheader("üìö MNIST ‚Äì T·∫≠p d·ªØ li·ªáu MNIST l√† g√¨?")
            st.markdown("""
            **MNIST** (Modified National Institute of Standards and Technology) l√† m·ªôt t·∫≠p d·ªØ li·ªáu n·ªïi ti·∫øng trong lƒ©nh v·ª±c h·ªçc m√°y v√† th·ªã gi√°c m√°y t√≠nh, ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i ƒë·ªÉ hu·∫•n luy·ªán v√† ki·ªÉm tra c√°c m√¥ h√¨nh nh·∫≠n di·ªán ch·ªØ s·ªë vi·∫øt tay.  
            - **Ngu·ªìn g·ªëc**: ƒê∆∞·ª£c t·∫°o ra b·ªüi Yann LeCun, Corinna Cortes v√† Christopher Burges, d·ª±a tr√™n d·ªØ li·ªáu t·ª´ NIST (National Institute of Standards and Technology).  
            - **C·∫•u tr√∫c**:  
              - **S·ªë l∆∞·ª£ng m·∫´u**: 70,000 h√¨nh ·∫£nh, chia th√†nh:  
                - 60,000 m·∫´u hu·∫•n luy·ªán.  
                - 10,000 m·∫´u ki·ªÉm tra.  
              - **K√≠ch th∆∞·ªõc**: M·ªói h√¨nh ·∫£nh l√† ·∫£nh x√°m (grayscale) 28x28 pixel, t·ªïng c·ªông 784 ƒë·∫∑c tr∆∞ng (pixel).  
              - **Nh√£n**: 10 l·ªõp t∆∞∆°ng ·ª©ng v·ªõi c√°c ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9.  
            - **ƒê·∫∑c ƒëi·ªÉm**:  
              - C√°c h√¨nh ·∫£nh ƒë∆∞·ª£c chu·∫©n h√≥a (centered v√† normalized) ƒë·ªÉ c√°c ch·ªØ s·ªë n·∫±m ·ªü gi·ªØa khung 28x28.  
              - D·ªØ li·ªáu ƒë∆°n gi·∫£n nh∆∞ng ƒë·ªß th√°ch th·ª©c ƒë·ªÉ th·ª≠ nghi·ªám c√°c thu·∫≠t to√°n h·ªçc m√°y c∆° b·∫£n v√† n√¢ng cao.  
            - **·ª®ng d·ª•ng**: ƒê∆∞·ª£c d√πng trong gi√°o d·ª•c, nghi√™n c·ª©u, v√† l√† chu·∫©n m·ª±c (benchmark) ƒë·ªÉ so s√°nh hi·ªáu su·∫•t c√°c m√¥ h√¨nh h·ªçc m√°y.  
            - **ƒê·ªãnh d·∫°ng d·ªØ li·ªáu**: M·ªói pixel c√≥ gi√° tr·ªã t·ª´ 0 (ƒëen) ƒë·∫øn 255 (tr·∫Øng), bi·ªÉu th·ªã c∆∞·ªùng ƒë·ªô s√°ng. Trong ·ª©ng d·ª•ng n√†y, d·ªØ li·ªáu ƒë∆∞·ª£c chu·∫©n h√≥a v·ªÅ [0, 1] tr∆∞·ªõc khi gi·∫£m chi·ªÅu.  
            - **Th√°ch th·ª©c**: S·ª± bi·∫øn thi√™n l·ªõn trong c√°ch vi·∫øt tay (k√≠ch th∆∞·ªõc, ƒë·ªô d√†y n√©t, g√≥c nghi√™ng) t·∫°o ra th·ª≠ th√°ch cho c√°c m√¥ h√¨nh nh·∫≠n di·ªán.  
            """, unsafe_allow_html=True)

            # Th√™m ·∫£nh minh h·ªça MNIST (mnist.png)
            st.markdown("### Minh h·ªça t·∫≠p d·ªØ li·ªáu MNIST")
            mnist_image_path = os.path.join("mnist.png")  # ƒê∆∞·ªùng d·∫´n t·ªõi ·∫£nh
            try:
                img_resized = resize_image(mnist_image_path, size=(900, 500))
                st.image(img_resized, caption="V√≠ d·ª• m·ªôt s·ªë h√¨nh ·∫£nh t·ª´ t·∫≠p d·ªØ li·ªáu MNIST", use_container_width=False)
            except FileNotFoundError:
                st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh 'mnist.png'. Vui l√≤ng ƒë·∫∑t ·∫£nh v√†o th∆∞ m·ª•c 'images' v√† ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")

        elif info_option == "PCA l√† g√¨?":
            st.subheader("üìä PCA ‚Äì Ph√¢n t√≠ch Th√†nh ph·∫ßn Ch√≠nh")
            st.markdown("""
            **PCA** l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu tuy·∫øn t√≠nh, chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ kh√¥ng gian chi·ªÅu cao (v√≠ d·ª•: $784$ chi·ªÅu c·ªßa MNIST) sang kh√¥ng gian chi·ªÅu th·∫•p (nh∆∞ $2D$ ho·∫∑c $3D$) b·∫±ng c√°ch t√¨m c√°c h∆∞·ªõng (th√†nh ph·∫ßn ch√≠nh) c√≥ ph∆∞∆°ng sai l·ªõn nh·∫•t.  
            - **√ù t∆∞·ªüng ch√≠nh**: T√¨m c√°c tr·ª•c m·ªõi sao cho d·ªØ li·ªáu ƒë∆∞·ª£c chi·∫øu l√™n gi·ªØ l·∫°i t·ªëi ƒëa th√¥ng tin (ph∆∞∆°ng sai).  
            - **·ª®ng d·ª•ng**: Tr·ª±c quan h√≥a, n√©n d·ªØ li·ªáu, lo·∫°i b·ªè nhi·ªÖu.  
            """, unsafe_allow_html=True)

            st.markdown("### C√°c b∆∞·ªõc th·ª±c hi·ªán PCA:")

            st.subheader("1. T√¨m vector trung b√¨nh")
            st.markdown("""
            - T√≠nh trung b√¨nh c·ªßa d·ªØ li·ªáu d·ªçc theo m·ªói chi·ªÅu:  
              $$ \\bar{X} = \\frac{1}{n} \\sum_{i=1}^{n} X_i $$  
            - **Gi·∫£i th√≠ch**:  
              - $X_i$: Vector ƒë·∫∑c tr∆∞ng c·ªßa m·∫´u th·ª© $i$, c√≥ k√≠ch th∆∞·ªõc $p$ (s·ªë chi·ªÅu g·ªëc, v·ªõi MNIST l√† $784$).  
              - $n$: T·ªïng s·ªë m·∫´u trong t·∫≠p d·ªØ li·ªáu (v√≠ d·ª•: 70,000 v·ªõi MNIST).  
              - $\\bar{X}$: Vector trung b√¨nh, c≈©ng c√≥ k√≠ch th∆∞·ªõc $p$, bi·ªÉu th·ªã "t√¢m" c·ªßa ƒë√°m m√¢y d·ªØ li·ªáu.  
              - $\\sum_{i=1}^{n}$: T·ªïng c·ªông gi√° tr·ªã c·ªßa t·∫•t c·∫£ c√°c m·∫´u.  
            - M·ª•c ƒë√≠ch: Chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ g·ªëc t·ªça ƒë·ªô b·∫±ng c√°ch t√¨m ƒëi·ªÉm trung t√¢m c·ªßa t·∫≠p d·ªØ li·ªáu.
            """, unsafe_allow_html=True)
            img_path = os.path.join(pca_image_dir, "1pca.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça t√¨m vector trung b√¨nh", use_container_width=False)

            st.subheader("2. Tr·ª´ trung b√¨nh")
            st.markdown("""
            - Tr·ª´ vector trung b√¨nh kh·ªèi m·ªói m·∫´u ƒë·ªÉ chu·∫©n h√≥a d·ªØ li·ªáu:  
              $$ X_{\\text{centered}} = X - \\bar{X} $$  
            - **Gi·∫£i th√≠ch**:  
              - $X$: Ma tr·∫≠n d·ªØ li·ªáu g·ªëc, k√≠ch th∆∞·ªõc $n \\times p$ (h√†ng l√† m·∫´u, c·ªôt l√† ƒë·∫∑c tr∆∞ng).  
              - $\\bar{X}$: Vector trung b√¨nh t·ª´ b∆∞·ªõc 1, ƒë∆∞·ª£c tr·ª´ kh·ªèi t·ª´ng h√†ng c·ªßa $X$.  
              - $X_{\\text{centered}}$: Ma tr·∫≠n d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a, v·∫´n c√≥ k√≠ch th∆∞·ªõc $n \\times p$, nh∆∞ng trung b√¨nh b·∫±ng 0.  
            - M·ª•c ƒë√≠ch: Lo·∫°i b·ªè ·∫£nh h∆∞·ªüng c·ªßa gi√° tr·ªã trung b√¨nh, t·∫≠p trung v√†o s·ª± ph√¢n t√°n c·ªßa d·ªØ li·ªáu.
            """, unsafe_allow_html=True)
            img_path = os.path.join(pca_image_dir, "2pca.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça tr·ª´ trung b√¨nh", use_container_width=False)

            st.subheader("3. T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai")
            st.markdown("""
            - T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai ƒë·ªÉ ƒëo l∆∞·ªùng s·ª± ph√¢n t√°n v√† m·ªëi quan h·ªá gi·ªØa c√°c chi·ªÅu:  
              $$ S = \\frac{1}{n-1} X_{\\text{centered}}^T X_{\\text{centered}} $$  
            - **Gi·∫£i th√≠ch**:  
              - $X_{\\text{centered}}$: Ma tr·∫≠n d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a t·ª´ b∆∞·ªõc 2, k√≠ch th∆∞·ªõc $n \\times p$.  
              - $X_{\\text{centered}}^T$: Ma tr·∫≠n chuy·ªÉn v·ªã c·ªßa $X_{\\text{centered}}$, k√≠ch th∆∞·ªõc $p \\times n$.  
              - $S$: Ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai, k√≠ch th∆∞·ªõc $p \\times p$, ch·ª©a ph∆∞∆°ng sai (tr√™n ƒë∆∞·ªùng ch√©o) v√† hi·ªáp ph∆∞∆°ng sai (ngo√†i ƒë∆∞·ªùng ch√©o) gi·ªØa c√°c chi·ªÅu.  
              - $n-1$: Hi·ªáu ch·ªânh ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng kh√¥ng ch·ªách (Bessel's correction).  
            - M·ª•c ƒë√≠ch: X√°c ƒë·ªãnh m·ª©c ƒë·ªô bi·∫øn thi√™n v√† t∆∞∆°ng quan gi·ªØa c√°c ƒë·∫∑c tr∆∞ng ƒë·ªÉ t√¨m h∆∞·ªõng quan tr·ªçng nh·∫•t.
            """, unsafe_allow_html=True)
            img_path = os.path.join(pca_image_dir, "3-4pca.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça t√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai", use_container_width=False)

            st.subheader("4. T√≠nh gi√° tr·ªã ri√™ng v√† vector ri√™ng")
            st.markdown("""
            - Ph√¢n r√£ ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai ƒë·ªÉ t√¨m c√°c gi√° tr·ªã ri√™ng $\\lambda_i$ v√† vector ri√™ng $u_i$:  
              $$ S u_i = \\lambda_i u_i $$  
            - **Gi·∫£i th√≠ch**:  
              - $S$: Ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai t·ª´ b∆∞·ªõc 3, k√≠ch th∆∞·ªõc $p \\times p$.  
              - $u_i$: Vector ri√™ng th·ª© $i$, k√≠ch th∆∞·ªõc $p$, bi·ªÉu th·ªã h∆∞·ªõng c·ªßa th√†nh ph·∫ßn ch√≠nh (vu√¥ng g√≥c v·ªõi c√°c $u_j$ kh√°c).  
              - $\\lambda_i$: Gi√° tr·ªã ri√™ng th·ª© $i$, bi·ªÉu th·ªã ph∆∞∆°ng sai (ƒë·ªô l·ªõn) c·ªßa d·ªØ li·ªáu d·ªçc theo h∆∞·ªõng $u_i$.  
            - M·ª•c ƒë√≠ch: X√°c ƒë·ªãnh c√°c h∆∞·ªõng ch√≠nh (th√†nh ph·∫ßn ch√≠nh) v√† t·∫ßm quan tr·ªçng c·ªßa ch√∫ng th√¥ng qua ph∆∞∆°ng sai.
            """, unsafe_allow_html=True)
            img_path = os.path.join(pca_image_dir, "3-4pca.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça t√≠nh gi√° tr·ªã ri√™ng v√† vector ri√™ng", use_container_width=False)

            st.subheader("5. Ch·ªçn k vector ri√™ng v·ªõi gi√° tr·ªã ri√™ng l·ªõn nh·∫•t")
            st.markdown("""
            - S·∫Øp x·∫øp c√°c gi√° tr·ªã ri√™ng $\\lambda_i$ theo th·ª© t·ª± gi·∫£m d·∫ßn v√† ch·ªçn $k$ vector ri√™ng t∆∞∆°ng ·ª©ng (th∆∞·ªùng $k=2$ ho·∫∑c $3$ cho tr·ª±c quan h√≥a).  
            - **Gi·∫£i th√≠ch**:  
              - $\\lambda_i$: C√°c gi√° tr·ªã ri√™ng t·ª´ b∆∞·ªõc 4, ƒë·∫°i di·ªán cho ph∆∞∆°ng sai c·ªßa m·ªói th√†nh ph·∫ßn ch√≠nh.  
              - $k$: S·ªë l∆∞·ª£ng th√†nh ph·∫ßn ch√≠nh ƒë∆∞·ª£c ch·ªçn (s·ªë chi·ªÅu gi·∫£m xu·ªëng).  
            - M·ª•c ƒë√≠ch: Gi·ªõi h·∫°n s·ªë chi·ªÅu ƒë·ªÉ gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin quan tr·ªçng nh·∫•t.
            """, unsafe_allow_html=True)
            img_path = os.path.join(pca_image_dir, "5pca.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça ch·ªçn k vector ri√™ng", use_container_width=False)

            st.subheader("6. Chi·∫øu d·ªØ li·ªáu l√™n vector ƒë√£ ch·ªçn")
            st.markdown("""
            - Chi·∫øu d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a l√™n kh√¥ng gian m·ªõi ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a b·ªüi $k$ vector ri√™ng:  
              $$ Z = X_{\\text{centered}} U_k $$  
            - **Gi·∫£i th√≠ch**:  
              - $X_{\\text{centered}}$: Ma tr·∫≠n d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a t·ª´ b∆∞·ªõc 2, k√≠ch th∆∞·ªõc $n \\times p$.  
              - $U_k$: Ma tr·∫≠n ch·ª©a $k$ vector ri√™ng ƒë·∫ßu ti√™n (c√°c c·ªôt l√† $u_i$), k√≠ch th∆∞·ªõc $p \\times k$.  
              - $Z$: Ma tr·∫≠n d·ªØ li·ªáu sau khi gi·∫£m chi·ªÅu, k√≠ch th∆∞·ªõc $n \\times k$, ch·ª©a t·ªça ƒë·ªô trong kh√¥ng gian m·ªõi.  
            - M·ª•c ƒë√≠ch: Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang kh√¥ng gian th·∫•p chi·ªÅu d·ª±a tr√™n c√°c h∆∞·ªõng quan tr·ªçng nh·∫•t.
            """, unsafe_allow_html=True)
            img_path = os.path.join(pca_image_dir, "6pca.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça chi·∫øu d·ªØ li·ªáu", use_container_width=False)

            st.subheader("7. L·∫•y ƒëi·ªÉm chi·∫øu trong kh√¥ng gian th·∫•p")
            st.markdown("""
            - Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ gi·∫£m chi·ªÅu trong kh√¥ng gian $k$-chi·ªÅu (th∆∞·ªùng l√† 2D ho·∫∑c 3D) ƒë·ªÉ tr·ª±c quan h√≥a.  
            - **Gi·∫£i th√≠ch**:  
              - $Z$: Ma tr·∫≠n d·ªØ li·ªáu sau khi chi·∫øu t·ª´ b∆∞·ªõc 6, k√≠ch th∆∞·ªõc $n \\times k$.  
              - $k$: S·ªë chi·ªÅu c·ªßa kh√¥ng gian th·∫•p (th∆∞·ªùng l√† 2 ho·∫∑c 3).  
            - M·ª•c ƒë√≠ch: T·∫°o bi·ªÉu ƒë·ªì tr·ª±c quan ƒë·ªÉ kh√°m ph√° c·∫•u tr√∫c d·ªØ li·ªáu.
            """, unsafe_allow_html=True)
            img_path = os.path.join(pca_image_dir, "7pca.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça ƒëi·ªÉm chi·∫øu trong kh√¥ng gian th·∫•p", use_container_width=False)

            st.markdown("""
            - **Tham s·ªë ch√≠nh**:  
              - $n_{\\text{components}}$: S·ªë chi·ªÅu gi·∫£m xu·ªëng (t·ª©c l√† $k$), th∆∞·ªùng l√† $2$ ho·∫∑c $3$ cho tr·ª±c quan h√≥a.  
              - **T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch (Explained Variance Ratio - EVR)**:  
                $$ \\text{EVR} = \\frac{\\sum_{i=1}^{k} \\lambda_i}{\\sum_{i=1}^{p} \\lambda_i} $$  
                - $\\sum_{i=1}^{k} \\lambda_i$: T·ªïng ph∆∞∆°ng sai c·ªßa $k$ th√†nh ph·∫ßn ch√≠nh ƒë∆∞·ª£c ch·ªçn.  
                - $\\sum_{i=1}^{p} \\lambda_i$: T·ªïng ph∆∞∆°ng sai c·ªßa t·∫•t c·∫£ $p$ chi·ªÅu g·ªëc.  
                - √ù nghƒ©a: Ph·∫£n √°nh ph·∫ßn trƒÉm th√¥ng tin (ph∆∞∆°ng sai) gi·ªØ l·∫°i sau khi gi·∫£m chi·ªÅu.  

            - **∆Øu ƒëi·ªÉm**:  
              - T√≠nh to√°n nhanh, hi·ªáu qu·∫£ ngay c·∫£ v·ªõi d·ªØ li·ªáu l·ªõn (ƒë·ªô ph·ª©c t·∫°p $O(np^2)$).  
              - Gi·ªØ ƒë∆∞·ª£c c·∫•u tr√∫c to√†n c·ª•c c·ªßa d·ªØ li·ªáu (kho·∫£ng c√°ch l·ªõn gi·ªØa c√°c c·ª•m).  
              - D·ªÖ hi·ªÉu v√† tri·ªÉn khai.  
            - **Nh∆∞·ª£c ƒëi·ªÉm**:  
              - Ch·ªâ ph√π h·ª£p v·ªõi d·ªØ li·ªáu c√≥ m·ªëi quan h·ªá tuy·∫øn t√≠nh.  
              - Kh√¥ng gi·ªØ t·ªët kho·∫£ng c√°ch c·ª•c b·ªô gi·ªØa c√°c ƒëi·ªÉm g·∫ßn nhau.  
              - C√≥ th·ªÉ b·ªè l·ª° c·∫•u tr√∫c phi tuy·∫øn trong d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ MNIST.  
            """, unsafe_allow_html=True)

        elif info_option == "t-SNE l√† g√¨?":
            st.subheader("üìà t-SNE ‚Äì Nh√∫ng Ng·∫´u nhi√™n L√°ng gi·ªÅng Ph√¢n ph·ªëi t")
            st.markdown("""
            **t-SNE** l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu phi tuy·∫øn t√≠nh, t·∫≠p trung v√†o vi·ªác gi·ªØ c·∫•u tr√∫c c·ª•c b·ªô c·ªßa d·ªØ li·ªáu b·∫±ng c√°ch t·ªëi ∆∞u h√≥a s·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c ƒëi·ªÉm trong kh√¥ng gian chi·ªÅu cao v√† chi·ªÅu th·∫•p.  
            - **√ù t∆∞·ªüng ch√≠nh**: B·∫£o to√†n m·ªëi quan h·ªá l√°ng gi·ªÅng g·∫ßn trong d·ªØ li·ªáu g·ªëc, l√†m n·ªïi b·∫≠t c√°c c·ª•m c·ª•c b·ªô.  
            - **·ª®ng d·ª•ng**: Tr·ª±c quan h√≥a d·ªØ li·ªáu ph·ª©c t·∫°p, ph√°t hi·ªán c·ª•m trong kh√¥ng gian th·∫•p chi·ªÅu.  
            """, unsafe_allow_html=True)

            st.markdown("### C√°c b∆∞·ªõc th·ª±c hi·ªán t-SNE:")

            st.subheader("1. T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng trong kh√¥ng gian g·ªëc")
            st.markdown("""
            - S·ª≠ d·ª•ng ph√¢n ph·ªëi Gaussian ƒë·ªÉ t√≠nh x√°c su·∫•t $p_{ij}$ r·∫±ng ƒëi·ªÉm $x_i$ ch·ªçn $x_j$ l√†m l√°ng gi·ªÅng:  
              $$ p_{j|i} = \\frac{\\exp(-||x_i - x_j||^2 / 2\\sigma_i^2)}{\\sum_{k \\neq i} \\exp(-||x_i - x_k||^2 / 2\\sigma_i^2)} $$  
              $$ p_{ij} = \\frac{p_{j|i} + p_{i|j}}{2n} $$  
            - **Gi·∫£i th√≠ch tham s·ªë v√† k√Ω t·ª±**:  
              - $x_i, x_j$: Vector ƒë·∫∑c tr∆∞ng c·ªßa m·∫´u $i$ v√† $j$ trong kh√¥ng gian g·ªëc, k√≠ch th∆∞·ªõc $p$ (v·ªõi MNIST l√† $784$).  
              - $||x_i - x_j||^2$: B√¨nh ph∆∞∆°ng kho·∫£ng c√°ch Euclidean gi·ªØa $x_i$ v√† $x_j$.  
              - $\\sigma_i$: ƒê·ªô l·ªách chu·∫©n c·ªßa ph√¢n ph·ªëi Gaussian quanh $x_i$, ƒëi·ªÅu ch·ªânh b·ªüi **perplexity**.  
              - $p_{j|i}$: X√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán $x_i$ ch·ªçn $x_j$ l√†m l√°ng gi·ªÅng.  
              - $\\exp()$: H√†m m≈©, gi√∫p chuy·ªÉn ƒë·ªïi kho·∫£ng c√°ch th√†nh x√°c su·∫•t (g·∫ßn th√¨ x√°c su·∫•t cao).  
              - $\\sum_{k \\neq i}$: T·ªïng chu·∫©n h√≥a ƒë·ªÉ ƒë·∫£m b·∫£o t·ªïng x√°c su·∫•t b·∫±ng 1.  
              - $p_{ij}$: X√°c su·∫•t ƒë·ªëi x·ª©ng gi·ªØa $x_i$ v√† $x_j$, chu·∫©n h√≥a b·∫±ng $2n$.  
              - $n$: T·ªïng s·ªë m·∫´u trong t·∫≠p d·ªØ li·ªáu.  
            - M·ª•c ƒë√≠ch: ƒêo m·ª©c ƒë·ªô "g·∫ßn" gi·ªØa c√°c ƒëi·ªÉm trong kh√¥ng gian g·ªëc ƒë·ªÉ b·∫£o to√†n c·∫•u tr√∫c c·ª•c b·ªô.
            """, unsafe_allow_html=True)
            img_path = os.path.join(tsne_image_dir, "1tsne.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça t√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng Gaussian", use_container_width=False)

            st.subheader("2. Kh·ªüi t·∫°o kh√¥ng gian chi·ªÅu th·∫•p")
            st.markdown("""
            - T·∫°o ng·∫´u nhi√™n c√°c ƒëi·ªÉm $y_i$ trong kh√¥ng gian $k$-chi·ªÅu (th∆∞·ªùng $k=2$ ho·∫∑c $3$).  
            - **Gi·∫£i th√≠ch**:  
              - $y_i$: Vector t·ªça ƒë·ªô c·ªßa m·∫´u $i$ trong kh√¥ng gian th·∫•p chi·ªÅu, k√≠ch th∆∞·ªõc $k$.  
              - $k$: S·ªë chi·ªÅu c·ªßa kh√¥ng gian m·ªõi (th∆∞·ªùng l√† 2 ho·∫∑c 3 ƒë·ªÉ tr·ª±c quan h√≥a).  
            - M·ª•c ƒë√≠ch: T·∫°o ƒëi·ªÉm kh·ªüi ƒë·∫ßu ng·∫´u nhi√™n ƒë·ªÉ t-SNE t·ªëi ∆∞u h√≥a v·ªã tr√≠ trong kh√¥ng gian th·∫•p chi·ªÅu.
            """, unsafe_allow_html=True)
            img_path = os.path.join(tsne_image_dir, "2tsne.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça kh·ªüi t·∫°o ng·∫´u nhi√™n", use_container_width=False)

            st.subheader("3. T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng trong kh√¥ng gian m·ªõi")
            st.markdown("""
            - S·ª≠ d·ª•ng ph√¢n ph·ªëi t-Student (ƒë·ªô t·ª± do $1$, ƒëu√¥i d√†i) ƒë·ªÉ t√≠nh x√°c su·∫•t $q_{ij}$ trong kh√¥ng gian th·∫•p chi·ªÅu:  
              $$ q_{ij} = \\frac{(1 + ||y_i - y_j||^2)^{-1}}{\\sum_{k \\neq l} (1 + ||y_k - y_l||^2)^{-1}} $$  
            - **Gi·∫£i th√≠ch**:  
              - $y_i, y_j$: Vector t·ªça ƒë·ªô c·ªßa m·∫´u $i$ v√† $j$ trong kh√¥ng gian th·∫•p chi·ªÅu, k√≠ch th∆∞·ªõc $k$.  
              - $||y_i - y_j||^2$: B√¨nh ph∆∞∆°ng kho·∫£ng c√°ch Euclidean gi·ªØa $y_i$ v√† $y_j$ trong kh√¥ng gian m·ªõi.  
              - $(1 + ||y_i - y_j||^2)^{-1}$: Ngh·ªãch ƒë·∫£o kho·∫£ng c√°ch, d·ª±a tr√™n ph√¢n ph·ªëi t-Student, ∆∞u ti√™n c√°c ƒëi·ªÉm g·∫ßn nhau.  
              - $\\sum_{k \\neq l}$: T·ªïng chu·∫©n h√≥a ƒë·ªÉ ƒë·∫£m b·∫£o t·ªïng x√°c su·∫•t $q_{ij}$ b·∫±ng 1.  
              - $q_{ij}$: X√°c su·∫•t ƒë·ªëi x·ª©ng gi·ªØa $y_i$ v√† $y_j$ trong kh√¥ng gian th·∫•p chi·ªÅu.  
            - M·ª•c ƒë√≠ch: ƒêo m·ª©c ƒë·ªô "g·∫ßn" trong kh√¥ng gian m·ªõi, s·ª≠ d·ª•ng t-Student ƒë·ªÉ gi·∫£m v·∫•n ƒë·ªÅ chen ch√∫c (crowding problem).
            """, unsafe_allow_html=True)
            img_path = os.path.join(tsne_image_dir, "3tsne.png")
            img_resized = resize_image(img_path, size=(400, 400))
            st.image(img_resized, caption="Minh h·ªça t√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng t-Student", use_container_width=False)

            st.subheader("4. T·ªëi ∆∞u h√≥a")
            st.markdown("""
            - Gi·∫£m thi·ªÉu sai s·ªë Kullback-Leibler (KL-divergence) gi·ªØa $p_{ij}$ v√† $q_{ij}$ b·∫±ng gradient descent:  
              $$ \\text{KL}(P || Q) = \\sum_{i \\neq j} p_{ij} \\log \\frac{p_{ij}}{q_{ij}} $$  
            - **Gi·∫£i th√≠ch**:  
              - $p_{ij}$: X√°c su·∫•t ƒë·ªëi x·ª©ng trong kh√¥ng gian g·ªëc t·ª´ b∆∞·ªõc 1.  
              - $q_{ij}$: X√°c su·∫•t ƒë·ªëi x·ª©ng trong kh√¥ng gian th·∫•p chi·ªÅu t·ª´ b∆∞·ªõc 3.  
              - $\\text{KL}(P || Q)$: ƒê·ªô ƒëo KL-divergence, bi·ªÉu th·ªã s·ª± kh√°c bi·ªát gi·ªØa ph√¢n ph·ªëi $P$ (kh√¥ng gian g·ªëc) v√† $Q$ (kh√¥ng gian m·ªõi).  
              - $\\sum_{i \\neq j}$: T·ªïng tr√™n t·∫•t c·∫£ c√°c c·∫∑p ƒëi·ªÉm (tr·ª´ $i=j$).  
              - $\\log \\frac{p_{ij}}{q_{ij}}$: ƒê·ªô ch√™nh l·ªách logarit gi·ªØa hai x√°c su·∫•t, ƒë∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ $q_{ij}$ g·∫ßn $p_{ij}$.  
            - M·ª•c ƒë√≠ch: ƒêi·ªÅu ch·ªânh $y_i$ sao cho c·∫•u tr√∫c l√°ng gi·ªÅng trong kh√¥ng gian th·∫•p chi·ªÅu t∆∞∆°ng ƒë·ªìng v·ªõi kh√¥ng gian g·ªëc.
            """, unsafe_allow_html=True)
            img_path = os.path.join(tsne_image_dir, "4tsne.png")
            img_resized = resize_image(img_path, size=(900, 400))
            st.image(img_resized, caption="Minh h·ªça qu√° tr√¨nh t·ªëi ∆∞u h√≥a", use_container_width=False)

            st.markdown("""
            - **Tham s·ªë ch√≠nh**:  
              - $n_{\\text{components}}$: S·ªë chi·ªÅu gi·∫£m xu·ªëng (t·ª©c l√† $k$), th∆∞·ªùng $2$ ho·∫∑c $3$.  
              - **Perplexity**: S·ªë l√°ng gi·ªÅng hi·ªáu qu·∫£, ·∫£nh h∆∞·ªüng ƒë·∫øn $\\sigma_i$:  
                $$ \\text{Perplexity} = 2^{H(P_i)}, \\quad H(P_i) = -\\sum_j p_{j|i} \\log_2 p_{j|i} $$  
                - $H(P_i)$: Entropy c·ªßa ph√¢n ph·ªëi $p_{j|i}$, ƒëo m·ª©c ƒë·ªô kh√¥ng ch·∫Øc ch·∫Øn trong vi·ªác ch·ªçn l√°ng gi·ªÅng.  
                - Th∆∞·ªùng ch·ªçn t·ª´ $5$ ƒë·∫øn $50$, ph·ª• thu·ªôc v√†o k√≠ch th∆∞·ªõc d·ªØ li·ªáu.  
              - **Learning Rate**: T·ªëc ƒë·ªô c·∫≠p nh·∫≠t $y_i$ trong gradient descent, th∆∞·ªùng t·ª´ $10$ ƒë·∫øn $1000$.  
              - **Early Exaggeration**: Ph√≥ng ƒë·∫°i $p_{ij}$ ban ƒë·∫ßu (m·∫∑c ƒë·ªãnh 12.0) ƒë·ªÉ t·∫°o c·ª•m r√µ h∆°n trong giai ƒëo·∫°n ƒë·∫ßu t·ªëi ∆∞u h√≥a.  

            - **∆Øu ƒëi·ªÉm**:  
              - Gi·ªØ t·ªët c·∫•u tr√∫c c·ª•c b·ªô, t·∫°o ra c√°c nh√≥m tr·ª±c quan r√µ r√†ng (h·ªØu √≠ch v·ªõi MNIST).  
              - Hi·ªáu qu·∫£ cho d·ªØ li·ªáu phi tuy·∫øn t√≠nh, ph·ª©c t·∫°p.  
              - T·ªët trong vi·ªác ph√°t hi·ªán c·ª•m nh·ªè.  
            - **Nh∆∞·ª£c ƒëi·ªÉm**:  
              - Ch·∫≠m v·ªõi d·ªØ li·ªáu l·ªõn (ƒë·ªô ph·ª©c t·∫°p $O(n^2)$).  
              - Kh√¥ng gi·ªØ c·∫•u tr√∫c to√†n c·ª•c t·ªët (kho·∫£ng c√°ch l·ªõn c√≥ th·ªÉ b·ªã b√≥p m√©o).  
              - K·∫øt qu·∫£ nh·∫°y v·ªõi tham s·ªë (perplexity, learning rate).  
            """, unsafe_allow_html=True)

        elif info_option == "So s√°nh PCA v√† t-SNE":
            st.subheader("So s√°nh PCA v√† t-SNE")
            st.markdown("""
            PCA v√† t-SNE ƒë·ªÅu l√† c√°c ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu ph·ªï bi·∫øn, nh∆∞ng ch√∫ng kh√°c nhau v·ªÅ m·ª•c ti√™u, c√°ch ti·∫øp c·∫≠n v√† ·ª©ng d·ª•ng. D∆∞·ªõi ƒë√¢y l√† so s√°nh chi ti·∫øt:
            """, unsafe_allow_html=True)
            st.markdown("""
            | **Ti√™u ch√≠**            | **PCA**                              | **t-SNE**                            |  
            |-------------------------|--------------------------------------|--------------------------------------|  
            | **Lo·∫°i**               | Tuy·∫øn t√≠nh                          | Phi tuy·∫øn t√≠nh                      |  
            | **M·ª•c ti√™u**           | T·ªëi ƒëa h√≥a ph∆∞∆°ng sai to√†n c·ª•c      | T·ªëi ∆∞u h√≥a c·∫•u tr√∫c c·ª•c b·ªô          |  
            | **T·ªëc ƒë·ªô**             | Nhanh ($O(np^2)$)                  | Ch·∫≠m h∆°n ($O(n^2)$)                |  
            | **C·∫•u tr√∫c d·ªØ li·ªáu**   | Gi·ªØ to√†n c·ª•c (kho·∫£ng c√°ch l·ªõn)     | Gi·ªØ c·ª•c b·ªô (l√°ng gi·ªÅng g·∫ßn)         |  
            | **Tham s·ªë ch√≠nh**      | $n_{\\text{components}}$           | $n_{\\text{components}}$, Perplexity, Learning Rate |  
            | **ƒê·ªô ƒëo hi·ªáu qu·∫£**     | T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch        | KL-divergence                      |  
            | **·ª®ng d·ª•ng MNIST**     | Nhanh, ƒë∆°n gi·∫£n, c·∫•u tr√∫c tuy·∫øn t√≠nh| Chi ti·∫øt, c·ª•m r√µ r√†ng, phi tuy·∫øn t√≠nh|  
            | **T√≠nh t√°i l·∫≠p**       | ·ªîn ƒë·ªãnh (k·∫øt qu·∫£ c·ªë ƒë·ªãnh)          | Ng·∫´u nhi√™n (ph·ª• thu·ªôc kh·ªüi t·∫°o)     |  

            - **Khi n√†o d√πng PCA?**  
              - D·ªØ li·ªáu l·ªõn, c·∫ßn x·ª≠ l√Ω nhanh.  
              - Mu·ªën gi·ªØ c·∫•u tr√∫c to√†n c·ª•c ho·∫∑c ph√¢n t√≠ch tuy·∫øn t√≠nh.  
              - C·∫ßn k·∫øt qu·∫£ ·ªïn ƒë·ªãnh ƒë·ªÉ ph√¢n t√≠ch s√¢u h∆°n.  
            - **Khi n√†o d√πng t-SNE?**  
              - D·ªØ li·ªáu ph·ª©c t·∫°p, phi tuy·∫øn t√≠nh (nh∆∞ MNIST).  
              - Mu·ªën tr·ª±c quan h√≥a c√°c c·ª•m c·ª•c b·ªô r√µ r√†ng.  
              - Ch·∫•p nh·∫≠n th·ªùi gian x·ª≠ l√Ω l√¢u ƒë·ªÉ c√≥ k·∫øt qu·∫£ chi ti·∫øt.  
            """, unsafe_allow_html=True)

    # Tab T·∫£i d·ªØ li·ªáu
    with tab_load:
        st.header("T·∫£i D·ªØ li·ªáu MNIST")
        st.markdown("""
        Ph·∫ßn n√†y cho ph√©p t·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML v√† ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ tr·ª±c quan h√≥a. T·ªïng c·ªông c√≥ $70,000$ m·∫´u, b·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt ph·∫ßn nh·ªè h∆°n ƒë·ªÉ gi·∫£m th·ªùi gian x·ª≠ l√Ω.
        """, unsafe_allow_html=True)

        if st.button("T·∫£i d·ªØ li·ªáu"):
            try:
                with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                    mnist = openml.datasets.get_dataset(554)
                    progress_bar.progress(20)
                    status_text.text("ƒê√£ t·∫£i 20% - ƒêang truy xu·∫•t d·ªØ li·ªáu...")

                    X, y, _, _ = mnist.get_data(target=mnist.default_target_attribute)
                    progress_bar.progress(50)
                    status_text.text("ƒê√£ t·∫£i 50% - ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")

                    if X.isnull().values.any():
                        progress_bar.progress(70)
                        status_text.text("ƒê√£ t·∫£i 70% - ƒêang x·ª≠ l√Ω gi√° tr·ªã NaN...")
                        imputer = SimpleImputer(strategy='mean')
                        X = pd.DataFrame(imputer.fit_transform(X), columns=X.columns, index=X.index)

                    st.session_state['full_data'] = (X, y)
                    progress_bar.progress(90)
                    status_text.text(f"ƒê√£ t·∫£i 90% - Ho√†n t·∫•t {X.shape[0]} m·∫´u...")

                    with mlflow.start_run(experiment_id=experiment_id, run_name="Data_Load"):
                        mlflow.log_param("total_samples", X.shape[0])
                    
                    progress_bar.progress(100)
                    status_text.text("ƒê√£ t·∫£i 100% - Ho√†n t·∫•t!")
                    time.sleep(1)
                    status_text.empty()
                    progress_bar.empty()
                    st.success("T·∫£i d·ªØ li·ªáu th√†nh c√¥ng.")
                    st.write("K√≠ch th∆∞·ªõc d·ªØ li·ªáu g·ªëc:", X.shape)
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")

        if 'full_data' in st.session_state:
            X_full, y_full = st.session_state['full_data']
            num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", 
                                    min_value=10, max_value=len(X_full), value=min(1000, len(X_full)), step=1)
            if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng m·∫´u"):
                try:
                    with st.spinner(f"ƒêang x·ª≠ l√Ω {num_samples} m·∫´u..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()

                        df = pd.concat([X_full, y_full.rename("label")], axis=1)
                        progress_bar.progress(30)
                        status_text.text("ƒê√£ x·ª≠ l√Ω 30% - ƒêang k·∫øt h·ª£p d·ªØ li·ªáu...")

                        sampled_df = df.sample(n=num_samples, random_state=42)
                        progress_bar.progress(70)
                        status_text.text("ƒê√£ x·ª≠ l√Ω 70% - ƒêang l·∫•y m·∫´u ng·∫´u nhi√™n...")

                        X_sampled = sampled_df.drop(columns=["label"])
                        y_sampled = sampled_df["label"]
                        st.session_state['data'] = (X_sampled, y_sampled)
                        progress_bar.progress(90)
                        status_text.text("ƒêang x·ª≠ l√Ω 90% - ƒêang l∆∞u tr·ªØ d·ªØ li·ªáu...")

                        with mlflow.start_run(experiment_id=experiment_id, run_name="Data_Sample"):
                            mlflow.log_param("num_samples", num_samples)
                        
                        progress_bar.progress(100)
                        status_text.text("ƒê√£ x·ª≠ l√Ω 100% - Ho√†n t·∫•t!")
                        time.sleep(1)
                        status_text.empty()
                        progress_bar.empty()
                        st.success(f"ƒê√£ ch·ªçn {num_samples} m·∫´u ƒë·ªÉ tr·ª±c quan h√≥a.")
                except Exception as e:
                    st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

    # Tab Tr·ª±c quan h√≥a
    with tab_visualize:
        st.header("Tr·ª±c quan h√≥a D·ªØ li·ªáu MNIST")
        st.markdown("""
        Ph·∫ßn n√†y gi√∫p b·∫°n gi·∫£m chi·ªÅu d·ªØ li·ªáu MNIST t·ª´ $784$ chi·ªÅu xu·ªëng $2D$ ho·∫∑c $3D$ b·∫±ng PCA ho·∫∑c t-SNE, sau ƒë√≥ tr·ª±c quan h√≥a k·∫øt qu·∫£. Nh√£n th·∫≠t ($0$-$9$) s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë·ªÉ so s√°nh.
        """, unsafe_allow_html=True)

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i d·ªØ li·ªáu t·ª´ tab 'T·∫£i d·ªØ li·ªáu' tr∆∞·ªõc khi th·ª±c hi·ªán tr·ª±c quan h√≥a.")
        else:
            X, y = st.session_state['data']
            num_samples = X.shape[0]
            st.write(f"D·ªØ li·ªáu hi·ªán t·∫°i: {num_samples} ·∫£nh, m·ªói ·∫£nh c√≥ {X.shape[1]} ƒë·∫∑c tr∆∞ng.")

            st.subheader("C·∫•u h√¨nh Tr·ª±c quan h√≥a")
            col1, col2 = st.columns([1, 1])

            with col1:
                reduce_method = st.selectbox(
                    "Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu:",
                    ["PCA", "t-SNE"],
                    help="PCA nhanh v√† tuy·∫øn t√≠nh; t-SNE ch·∫≠m h∆°n nh∆∞ng gi·ªØ c·∫•u tr√∫c c·ª•c b·ªô."
                )

            suggestion_data_pca = {
                "S·ªë l∆∞·ª£ng m·∫´u": ["nh·ªè h∆°n 1,000", "1,000‚Äì10,000", "l·ªõn h∆°n 10,000"],
                "n_components": ["2 ho·∫∑c 3", "2 ho·∫∑c 3", "2 ho·∫∑c 3"]
            }
            suggestion_data_tsne = {
                "S·ªë l∆∞·ª£ng m·∫´u": ["nh·ªè h∆°n 1,000", "1,000‚Äì10,000", "l·ªõn h∆°n 10,000"],
                "n_components": ["2 ho·∫∑c 3", "2 ho·∫∑c 3", "2 ho·∫∑c 3"],
                "perplexity": ["5‚Äì10", "20‚Äì30", "30‚Äì50"],
                "learning_rate": ["100‚Äì200", "200‚Äì500", "500‚Äì1000"]
            }

            if num_samples < 1000:
                range_idx = 0
                suggested_perplexity = 10
                suggested_learning_rate = 200
            elif num_samples <= 10000:
                range_idx = 1
                suggested_perplexity = 30
                suggested_learning_rate = 200
            else:
                range_idx = 2
                suggested_perplexity = 50
                suggested_learning_rate = 500

            suggested_n_components = 2

            params = {}
            with col2:
                if reduce_method == "PCA":
                    st.markdown("**S·ªë chi·ªÅu ($n_{\\text{components}}$)**", unsafe_allow_html=True)
                    n_components = st.selectbox(
                        "",
                        [2, 3],
                        index=0,
                        label_visibility="collapsed",
                        help=f"G·ª£i √Ω: {suggestion_data_pca['n_components'][range_idx]}. Gi√° tr·ªã t·ªëi ∆∞u t·ª± ƒë·ªông: {suggested_n_components}"
                    )
                    params["n_components"] = n_components
                else:
                    st.markdown("**S·ªë chi·ªÅu ($n_{\\text{components}}$)**", unsafe_allow_html=True)
                    n_components = st.selectbox(
                        "",
                        [2, 3],
                        index=0,
                        label_visibility="collapsed",
                        help=f"G·ª£i √Ω: {suggestion_data_tsne['n_components'][range_idx]}. Gi√° tr·ªã t·ªëi ∆∞u t·ª± ƒë·ªông: {suggested_n_components}"
                    )
                    st.markdown("**Perplexity**", unsafe_allow_html=True)
                    perplexity = st.number_input(
                        "",
                        min_value=5.0, max_value=50.0, value=float(suggested_perplexity), step=1.0,
                        label_visibility="collapsed",
                        help=f"G·ª£i √Ω: {suggestion_data_tsne['perplexity'][range_idx]}. Gi√° tr·ªã t·ªëi ∆∞u t·ª± ƒë·ªông: {suggested_perplexity}"
                    )
                    st.markdown("**Learning Rate**", unsafe_allow_html=True)
                    learning_rate = st.number_input(
                        "",
                        min_value=10.0, max_value=1000.0, value=float(suggested_learning_rate), step=10.0,
                        label_visibility="collapsed",
                        help=f"G·ª£i √Ω: {suggestion_data_tsne['learning_rate'][range_idx]}. Gi√° tr·ªã t·ªëi ∆∞u t·ª± ƒë·ªông: {suggested_learning_rate}"
                    )
                    params["n_components"] = n_components
                    params["perplexity"] = perplexity
                    params["learning_rate"] = learning_rate

            st.subheader("G·ª£i √Ω tham s·ªë t·ªëi ∆∞u d·ª±a tr√™n s·ªë l∆∞·ª£ng d·ªØ li·ªáu")
            st.markdown(
                f"D·ª±a tr√™n s·ªë l∆∞·ª£ng m·∫´u hi·ªán t·∫°i (**{num_samples} m·∫´u**), d∆∞·ªõi ƒë√¢y l√† g·ª£i √Ω tham s·ªë t·ªëi ∆∞u cho {reduce_method}:",
                unsafe_allow_html=True
            )
            if reduce_method == "PCA":
                st.table(suggestion_data_pca)
            else:
                st.table(suggestion_data_tsne)

            if st.button("B·∫Øt ƒë·∫ßu gi·∫£m chi·ªÅu"):
                try:
                    with st.spinner("ƒêang x·ª≠ l√Ω..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        start_time = time.time()

                        status_text.text("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu...")
                        X_processed = X / 255.0
                        scaler = StandardScaler()
                        X_processed = scaler.fit_transform(X_processed)
                        progress_bar.progress(20)

                        run_name = f"{reduce_method}_Run_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                        with mlflow.start_run(experiment_id=experiment_id, run_name=run_name) as run:
                            if reduce_method == "PCA":
                                status_text.text("ƒêang ch·∫°y PCA...")
                                model = PCA(n_components=n_components)
                                progress_bar.progress(40)
                                X_reduced = model.fit_transform(X_processed)
                                explained_variance_ratio = model.explained_variance_ratio_.sum()
                                progress_bar.progress(80)
                                mlflow.log_metric("explained_variance_ratio", explained_variance_ratio)
                                mlflow.sklearn.log_model(model, "pca_model")
                            else:
                                status_text.text("ƒêang ch·∫°y t-SNE (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)...")
                                model = TSNE(n_components=n_components, perplexity=perplexity, learning_rate=learning_rate, random_state=42)
                                progress_bar.progress(40)
                                X_reduced = model.fit_transform(X_processed)
                                progress_bar.progress(80)
                                mlflow.sklearn.log_model(model, "tsne_model")

                            training_time = time.time() - start_time
                            mlflow.log_params(params)
                            mlflow.log_param("reduce_method", reduce_method)
                            mlflow.log_metric("training_time_seconds", training_time)

                            run_id = run.info.run_id
                            st.session_state['latest_run'] = {'run_id': run_id, 'run_name': run_name}
                            st.session_state['X_reduced'] = X_reduced

                        status_text.text("ƒêang chu·∫©n b·ªã bi·ªÉu ƒë·ªì tr·ª±c quan...")
                        df_plot = pd.DataFrame(X_reduced, columns=[f"Dim{i+1}" for i in range(n_components)])
                        df_plot['Label'] = y.values
                        progress_bar.progress(95)

                        status_text.text("ƒêang ho√†n t·∫•t...")
                        if n_components == 2:
                            fig = px.scatter(
                                df_plot, x="Dim1", y="Dim2", color="Label",
                                title=f"{reduce_method} - Tr·ª±c quan h√≥a 2D",
                                width=900, height=600,
                                hover_data=["Label"]
                            )
                        else:
                            fig = px.scatter_3d(
                                df_plot, x="Dim1", y="Dim2", z="Dim3", color="Label",
                                title=f"{reduce_method} - Tr·ª±c quan h√≥a 3D",
                                width=900, height=600,
                                hover_data=["Label"]
                            )
                        progress_bar.progress(100)
                        status_text.text("Ho√†n t·∫•t!")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()

                        st.success(f"Gi·∫£m chi·ªÅu xong! Th·ªùi gian: {training_time:.2f} gi√¢y.")

                        st.subheader(f"K·∫øt qu·∫£ Tr·ª±c quan h√≥a ({n_components}D)")
                        st.plotly_chart(fig, use_container_width=True)

                        st.subheader("Hi·ªÉu bi·ªÉu ƒë·ªì n√†y nh∆∞ th·∫ø n√†o?")
                        if reduce_method == "PCA":
                            st.markdown(f"""
                            - **Bi·ªÉu ƒë·ªì**: M·ªói ƒëi·ªÉm l√† m·ªôt ·∫£nh ch·ªØ s·ªë, gi·∫£m t·ª´ $784$ chi·ªÅu xu·ªëng ${n_components}D$ b·∫±ng PCA.  
                            - **M√†u s·∫Øc**: M·ªói nh√£n ($0$-$9$) c√≥ m·ªôt m√†u ri√™ng.  
                            - **√ù nghƒ©a**: PCA gi·ªØ c·∫•u tr√∫c to√†n c·ª•c, c√°c ƒëi·ªÉm c√πng nh√£n n√™n n·∫±m g·∫ßn nhau n·∫øu d·ªØ li·ªáu c√≥ t√≠nh tuy·∫øn t√≠nh.  
                            - **T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch**: ${explained_variance_ratio:.4f}$ (ph·∫ßn d·ªØ li·ªáu ƒë∆∞·ª£c gi·ªØ l·∫°i).  
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown(f"""
                            - **Bi·ªÉu ƒë·ªì**: M·ªói ƒëi·ªÉm l√† m·ªôt ·∫£nh ch·ªØ s·ªë, gi·∫£m t·ª´ $784$ chi·ªÅu xu·ªëng ${n_components}D$ b·∫±ng t-SNE.  
                            - **M√†u s·∫Øc**: M·ªói nh√£n ($0$-$9$) c√≥ m·ªôt m√†u ri√™ng.  
                            - **√ù nghƒ©a**: t-SNE gi·ªØ c·∫•u tr√∫c c·ª•c b·ªô, c√°c ƒëi·ªÉm c√πng nh√£n th∆∞·ªùng t·∫°o th√†nh c√°c nh√≥m r√µ r√†ng h∆°n PCA.  
                            """, unsafe_allow_html=True)

                        st.subheader("Th√¥ng tin chi ti·∫øt")
                        with st.expander("Xem chi ti·∫øt k·∫øt qu·∫£", expanded=True):
                            st.markdown("**Th√¥ng tin l·∫ßn ch·∫°y:**")
                            st.write(f"- T√™n l·∫ßn ch·∫°y: {run_name}")
                            st.write(f"- ID l·∫ßn ch·∫°y: {run_id}")

                            st.markdown("**C√†i ƒë·∫∑t:**")
                            st.write(f"- Ph∆∞∆°ng ph√°p: {reduce_method}")
                            st.write(f"- S·ªë chi·ªÅu: {n_components}")
                            if reduce_method == "t-SNE":
                                st.write(f"- Perplexity: {perplexity}")
                                st.write(f"- Learning Rate: {learning_rate}")
                            st.write(f"- Th·ªùi gian ch·∫°y: {training_time:.2f} gi√¢y")

                            st.markdown("**K·∫øt qu·∫£ chi ti·∫øt:**")
                            if reduce_method == "PCA":
                                st.write(f"- T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: {explained_variance_ratio:.4f}")
                            st.write(f"- S·ªë m·∫´u ƒë√£ x·ª≠ l√Ω: {num_samples}")
                except Exception as e:
                    st.error(f"L·ªói khi th·ª±c hi·ªán gi·∫£m chi·ªÅu: {e}")

    # Tab Theo d√µi k·∫øt qu·∫£
    with tab_log_info:
        st.header("Theo d√µi k·∫øt qu·∫£")
        st.markdown("""
        Tab n√†y cho ph√©p b·∫°n xem danh s√°ch c√°c l·∫ßn gi·∫£m chi·ªÅu ƒë√£ th·ª±c hi·ªán. Ch·ªçn m·ªôt l·∫ßn ch·∫°y ƒë·ªÉ xem chi ti·∫øt, ƒë·ªïi t√™n ho·∫∑c x√≥a.
        """, unsafe_allow_html=True)
        
        try:
            client = MlflowClient()
            experiment = client.get_experiment_by_name("MNIST_PCA")
            if not experiment:
                st.error(f"Kh√¥ng t√¨m th·∫•y experiment 'MNIST_PCA'. Vui l√≤ng ki·ªÉm tra l·∫°i MLflow tracking URI.")
            else:
                experiment_id = experiment.experiment_id
                runs = client.search_runs(experiment_ids=[experiment_id], order_by=["attributes.start_time DESC"])
                
                if not runs:
                    st.info("Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o ƒë∆∞·ª£c ghi nh·∫≠n trong experiment 'MNIST_PCA'.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    run_names = list(run_options.values())

                    default_run_name = st.session_state.get('latest_run', {}).get('run_name', run_names[0]) if 'latest_run' in st.session_state else run_names[0]

                    st.subheader("Danh s√°ch run")
                    selected_run_name = st.selectbox(
                        "Ch·ªçn run:",
                        options=run_names,
                        index=run_names.index(default_run_name) if default_run_name in run_names else 0,
                        key="main_select",
                        help="Ch·ªçn m·ªôt l·∫ßn ch·∫°y ƒë·ªÉ xem chi ti·∫øt, ƒë·ªïi t√™n ho·∫∑c x√≥a."
                    )
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input(
                        "Nh·∫≠p t√™n m·ªõi:",
                        value=selected_run_name,
                        key="rename_input"
                    )
                    if st.button("C·∫≠p nh·∫≠t t√™n", key="rename_button"):
                        if new_run_name.strip() and new_run_name.strip() != selected_run_name:
                            with st.spinner("ƒêang c·∫≠p nh·∫≠t t√™n..."):
                                client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                                if 'latest_run' in st.session_state and st.session_state['latest_run']['run_id'] == selected_run_id:
                                    st.session_state['latest_run']['run_name'] = new_run_name.strip()
                                st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                                time.sleep(0.5)
                                st.rerun()
                        elif not new_run_name.strip():
                            st.warning("Vui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá.")
                        else:
                            st.info("T√™n m·ªõi tr√πng v·ªõi t√™n hi·ªán t·∫°i.")

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y", key="delete_button"):
                        with st.spinner("ƒêang x√≥a l·∫ßn ch·∫°y..."):
                            client.delete_run(selected_run_id)
                            if 'latest_run' in st.session_state and st.session_state['latest_run']['run_id'] == selected_run_id:
                                del st.session_state['latest_run']
                            st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                            time.sleep(0.5)
                            st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt c·ªßa Run")
                    st.write(f"**T√™n l·∫ßn ch·∫°y:** {selected_run_name}")
                    st.write(f"**ID l·∫ßn ch·∫°y:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")

                    st.markdown("**Tham s·ªë:**", unsafe_allow_html=True)
                    if selected_run.data.params:
                        st.json(selected_run.data.params, expanded=True)
                    else:
                        st.write("Kh√¥ng c√≥ tham s·ªë ƒë∆∞·ª£c ghi nh·∫≠n.")

                    st.markdown("**K·∫øt qu·∫£:**", unsafe_allow_html=True)
                    if selected_run.data.metrics:
                        reduce_method = selected_run.data.params.get("reduce_method", "Kh√¥ng x√°c ƒë·ªãnh")
                        metrics_display = {}

                        training_time = selected_run.data.metrics.get("training_time_seconds", "N/A")
                        metrics_display["Th·ªùi gian th·ª±c hi·ªán (gi√¢y)"] = f"{float(training_time):.2f}" if training_time != "N/A" else "N/A"

                        if reduce_method == "PCA":
                            evr = selected_run.data.metrics.get("explained_variance_ratio", "N/A")
                            metrics_display["T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch"] = f"{float(evr):.4f}" if evr != "N/A" else "N/A"

                        st.json(metrics_display, expanded=True)
                    else:
                        st.write("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë∆∞·ª£c ghi nh·∫≠n.")

                    # Th√™m n√∫t li√™n k·∫øt t·ªõi MLflow UI
                    st.subheader("Truy c·∫≠p MLflow UI")
                    mlflow_url = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"  # Thay b·∫±ng URL MLflow c·ªßa b·∫°n n·∫øu kh√°c
                    if st.button("M·ªü MLflow UI tr√™n Dagshub"):
                        st.markdown(f'[Click ƒë·ªÉ m·ªü MLflow UI]({mlflow_url})', unsafe_allow_html=True)
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi MLflow: {e}. Vui l√≤ng ki·ªÉm tra MLFLOW_TRACKING_URI v√† th√¥ng tin x√°c th·ª±c.")

if __name__ == "__main__":
    run_mnist_dimension_reduction_app()