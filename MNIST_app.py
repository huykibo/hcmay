import os
import mlflow
import streamlit as st
import openml
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time
import requests

# H√†m t·∫£i d·ªØ li·ªáu MNIST
def fetch_mnist_data():
    try:
        mnist = openml.datasets.get_dataset(554)
        X, y, _, _ = mnist.get_data(target=mnist.default_target_attribute)
        return X, y
    except Exception as e:
        st.error(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c MNIST t·ª´ OpenML: {e}")
        return None, None

# H√†m ki·ªÉm tra v√† chu·∫©n h√≥a pixel
def validate_and_fix_pixels(X, name="d·ªØ li·ªáu"):
    X = np.array(X, dtype=np.float64)
    invalid_mask = (X < 0) | (X > 255)
    if np.any(invalid_mask):
        st.warning(f"Ph√°t hi·ªán gi√° tr·ªã pixel kh√¥ng h·ª£p l·ªá trong {name}. ƒêang chu·∫©n h√≥a...")
        X = np.clip(X, 0, 255)
        return X, True
    return X, False

def run_mnist_classification_app():
    # Thi·∫øt l·∫≠p MLflow
    mlflow_tracking_uri = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(mlflow_tracking_uri)
        mlflow.set_experiment("MNIST")
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets.")
        st.stop()

    try:
        response = requests.get(mlflow_tracking_uri, timeout=5)
        if response.status_code != 200:
            st.error(f"K·∫øt n·ªëi MLflow th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}.")
            st.stop()
    except requests.exceptions.RequestException as e:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi MLflow: {e}.")
        st.stop()

    EXPERIMENT_ID = mlflow.get_experiment_by_name("MNIST").experiment_id

    st.title("Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Decision Tree v√† SVM")

    # CSS t√πy ch·ªânh
    st.markdown("""
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-MML-AM_CHTML" async></script>
        <style>
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: pointer;
                color: #1f77b4;
                font-weight: bold;
                margin-left: 5px;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 400px;
                background-color: #f9f9f9;
                color: #333;
                text-align: left;
                border-radius: 6px;
                padding: 10px;
                position: absolute;
                z-index: 1;
                right: 105%;
                top: 50%;
                transform: translateY(-50%);
                opacity: 0;
                transition: opacity 0.3s;
                border: 1px solid #ccc;
                font-size: 0.9em;
                line-height: 1.4;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
            .section-title {
                font-size: 1.5em;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            .info-box {
                background-color: #f8f9fa;
                padding: 10px;
                border-left: 4px solid #3498db;
                margin-bottom: 15px;
            }
        </style>
    """, unsafe_allow_html=True)

    tabs = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "X·ª≠ l√Ω d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", "Hu·∫•n luy·ªán/ƒê√°nh gi√°", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"])
    tab_info, tab_load, tab_preprocess, tab_split, tab_train_eval, tab_demo, tab_log_info = tabs

    with tab_info:
        st.header("Gi·ªõi thi·ªáu v·ªÅ ·ª®ng d·ª•ng v√† C√°c M√¥ h√¨nh Ph√¢n lo·∫°i")
        st.markdown("""
        Ch√†o b·∫°n! ƒê√¢y l√† ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ t·∫≠p d·ªØ li·ªáu **MNIST** b·∫±ng **Decision Tree** v√† **SVM**. H√£y kh√°m ph√° c√°ch ho·∫°t ƒë·ªông c·ªßa ch√∫ng nh√©!
        """, unsafe_allow_html=True)

        info_option = st.selectbox(
            "",
            [
                "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?",
                "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a",
                "Decision Tree ‚Äì C√¢y Quy·∫øt ƒë·ªãnh",
                "SVM ‚Äì M√°y Vector H·ªó tr·ª£",
                "So s√°nh Decision Tree v√† SVM",
                "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)"
            ],
            label_visibility="collapsed",
            help="Ch·ªçn ƒë·ªÉ xem chi ti·∫øt v·ªÅ ·ª©ng d·ª•ng, d·ªØ li·ªáu ho·∫∑c m√¥ h√¨nh."
        )

        if info_option == "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 1. ·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?")
                st.markdown("""
                ƒê√¢y l√† ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay d·ª±a tr√™n t·∫≠p d·ªØ li·ªáu **MNIST**, s·ª≠ d·ª•ng hai m√¥ h√¨nh: **Decision Tree** v√† **SVM**.  
                - **MNIST**: T·∫≠p d·ªØ li·ªáu g·ªìm $70,000$ ·∫£nh ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$, m·ªói ·∫£nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel (t·ªïng c·ªông $784$ ƒë·∫∑c tr∆∞ng).  
                - **M·ª•c ti√™u**:  
                  - X√¢y d·ª±ng v√† hu·∫•n luy·ªán c√°c m√¥ h√¨nh ƒë·ªÉ nh·∫≠n di·ªán ch√≠nh x√°c c√°c ch·ªØ s·ªë.  
                  - So s√°nh hi·ªáu qu·∫£ c·ªßa Decision Tree v√† SVM tr√™n b√†i to√°n n√†y.  
                  - Cung c·∫•p c√¥ng c·ª• tr·ª±c quan ƒë·ªÉ h·ªçc t·∫≠p v√† th·ª≠ nghi·ªám.  

                **Th√¥ng tin c∆° b·∫£n**:  
                - **$784$ ƒë·∫∑c tr∆∞ng**: M·ªói ·∫£nh l√† vector $784$ chi·ªÅu (gi√° tr·ªã pixel t·ª´ $0$ ƒë·∫øn $255$).  
                - **$70,000$ m·∫´u**: T·ªïng s·ªë ·∫£nh, ƒë∆∞·ª£c chia th√†nh t·∫≠p hu·∫•n luy·ªán, ki·ªÉm tra v√† x√°c th·ª±c.  
                - **Nhi·ªám v·ª•**: D·ª± ƒëo√°n nh√£n ($0$-$9$) d·ª±a tr√™n ƒë·∫∑c tr∆∞ng pixel.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 2. T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a")
                st.markdown("""
                **MNIST** l√† t·∫≠p d·ªØ li·ªáu chu·∫©n trong h·ªçc m√°y, ƒë∆∞·ª£c t·∫°o b·ªüi Yann LeCun v√† c√°c c·ªông s·ª±.  
                - **ƒê·∫∑c ƒëi·ªÉm**:  
                  - G·ªìm c√°c ·∫£nh ch·ªØ s·ªë vi·∫øt tay t·ª´ h·ªçc sinh trung h·ªçc v√† nh√¢n vi√™n ƒëi·ªÅu tra d√¢n s·ªë M·ªπ.  
                  - Chu·∫©n h√≥a th√†nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel, thang ƒë·ªô x√°m (gi√° tr·ªã t·ª´ $0$ ƒë·∫øn $255$).  

                **√ù nghƒ©a**:  
                - L√† b√†i to√°n c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng ph√¢n lo·∫°i c·ªßa c√°c m√¥ h√¨nh h·ªçc m√°y.  
                - ƒê∆°n gi·∫£n nh∆∞ng ƒë·ªß ph·ª©c t·∫°p ƒë·ªÉ ƒë√°nh gi√° kh·∫£ nƒÉng ph√¢n bi·ªát c√°c l·ªõp t∆∞∆°ng t·ª± (v√≠ d·ª•: "$4$" v√† "$9$").  
                - Ph√π h·ª£p cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† nghi√™n c·ª©u m√¥ h√¨nh ph·ª©c t·∫°p.  
                """, unsafe_allow_html=True)
                st.subheader("üì∑ Minh h·ªça d·ªØ li·ªáu MNIST")
                try:
                    mnist_image = Image.open("mnist.png")
                    st.image(mnist_image, caption="·∫¢nh minh h·ªça $10$ ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$ trong MNIST", width=800)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `mnist.png`.")
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "Decision Tree ‚Äì C√¢y Quy·∫øt ƒë·ªãnh":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 3. Decision Tree ‚Äì C√¢y Quy·∫øt ƒë·ªãnh")
                st.markdown("""
                **Decision Tree (C√¢y Quy·∫øt ƒë·ªãnh)** l√† m√¥ h√¨nh ph√¢n lo·∫°i x√¢y d·ª±ng m·ªôt c√¢y ph√¢n c·∫•p, trong ƒë√≥ m·ªói n√∫t ƒë·∫°i di·ªán cho m·ªôt quy·∫øt ƒë·ªãnh d·ª±a tr√™n ƒë·∫∑c tr∆∞ng (pixel trong MNIST) ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu th√†nh c√°c nh√£n ($0$-$9$).  
                """, unsafe_allow_html=True)
                st.subheader("üîß Quy tr√¨nh ho·∫°t ƒë·ªông")
                st.markdown("""
                1. **Kh·ªüi t·∫°o c√¢y**: B·∫Øt ƒë·∫ßu t·ª´ n√∫t g·ªëc ch·ª©a to√†n b·ªô d·ªØ li·ªáu.  
                2. **Chia nh√°nh**: Ch·ªçn ƒë·∫∑c tr∆∞ng (pixel) v√† ng∆∞·ª°ng t·ªëi ∆∞u d·ª±a tr√™n ti√™u ch√≠ nh∆∞ **Gini** ho·∫∑c **Entropy**.  
                3. **L·∫∑p l·∫°i**: Ti·∫øp t·ª•c chia cho ƒë·∫øn khi ƒë·∫°t ƒë·ªô s√¢u t·ªëi ƒëa (**Max Depth**) ho·∫∑c d·ªØ li·ªáu thu·∫ßn nh·∫•t.  
                4. **D·ª± ƒëo√°n**: ƒêi qua c√°c nh√°nh ƒë·ªÉ ƒë·∫øn n√∫t l√°, tr·∫£ v·ªÅ nh√£n.  

                **C√¥ng th·ª©c**:  
                - **Gini**: $$ Gini = 1 - \\sum_{i=0}^{9} p_i^2 $$  
                - **Entropy**: $$ Entropy = -\\sum_{i=0}^{9} p_i \\log_2(p_i) $$  
                - $p_i$: T·ª∑ l·ªá m·∫´u thu·ªôc l·ªõp $i$.  

                **Tham s·ªë ch√≠nh**:  
                - **Max Depth**: ƒê·ªô s√¢u t·ªëi ƒëa c·ªßa c√¢y, ki·ªÉm so√°t ƒë·ªô ph·ª©c t·∫°p (t·ª´ $5$ ƒë·∫øn $30$).  
                - **Criterion**: Ti√™u ch√≠ chia nh√°nh (Gini ho·∫∑c Entropy).  
                """, unsafe_allow_html=True)
                st.subheader("üü™ ∆Øu ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm")
                st.markdown("""
                - **‚úÖ ∆Øu ƒëi·ªÉm**: D·ªÖ hi·ªÉu, nhanh v·ªõi d·ªØ li·ªáu nh·ªè, kh√¥ng c·∫ßn chu·∫©n h√≥a.  
                - **‚ùå Nh∆∞·ª£c ƒëi·ªÉm**: D·ªÖ b·ªã overfitting n·∫øu **Max Depth** l·ªõn, k√©m hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ MNIST.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "SVM ‚Äì M√°y Vector H·ªó tr·ª£":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 4. SVM ‚Äì M√°y Vector H·ªó tr·ª£")
                st.markdown("""
                **SVM (Support Vector Machine)** t√¨m si√™u ph·∫≥ng t·ªëi ∆∞u trong kh√¥ng gian $784$ chi·ªÅu ƒë·ªÉ ph√¢n t√°ch c√°c l·ªõp ($0$-$9$). N·∫øu d·ªØ li·ªáu kh√¥ng tuy·∫øn t√≠nh, n√≥ d√πng **kernel** ƒë·ªÉ √°nh x·∫° l√™n kh√¥ng gian cao h∆°n.  
                """, unsafe_allow_html=True)
                st.subheader("üîß Quy tr√¨nh ho·∫°t ƒë·ªông")
                st.markdown("""
                1. **T√¨m si√™u ph·∫≥ng**: $$ f(x) = w \\cdot x + b $$  
                   - $w$: Vector tr·ªçng s·ªë, $x$: ƒê·∫∑c tr∆∞ng, $b$: Bias.  
                2. **T·ªëi ∆∞u l·ªÅ**: $$ \\min \\frac{1}{2} \\|w\\|^2 + C \\sum \\xi_i $$  
                   - $C$: Tham s·ªë c√¢n b·∫±ng l·ªÅ v√† l·ªói.  
                   - $\\xi_i$: Sai s·ªë cho ph√©p (soft margin).  
                3. **Kernel**: V√≠ d·ª• RBF: $$ K(x_i, x_j) = \\exp(-\\gamma \\|x_i - x_j\\|^2) $$  
                4. **D·ª± ƒëo√°n**: D·ª±a tr√™n kho·∫£ng c√°ch t·ªõi si√™u ph·∫≥ng.  

                **Tham s·ªë ch√≠nh**:  
                - **C**: ƒê·ªô nghi√™m ng·∫∑t ph√¢n lo·∫°i (t·ª´ $0.1$ ƒë·∫øn $10$).  
                - **Kernel**: Lo·∫°i √°nh x·∫° (linear, rbf, poly).  
                """, unsafe_allow_html=True)
                st.subheader("üü™ ∆Øu ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm")
                st.markdown("""
                - **‚úÖ ∆Øu ƒëi·ªÉm**: Ch√≠nh x√°c cao v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p, hi·ªáu qu·∫£ v·ªõi kernel ph√π h·ª£p.  
                - **‚ùå Nh∆∞·ª£c ƒëi·ªÉm**: Ch·∫≠m v·ªõi d·ªØ li·ªáu l·ªõn, c·∫ßn chu·∫©n h√≥a d·ªØ li·ªáu.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "So s√°nh Decision Tree v√† SVM":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 5. So s√°nh Decision Tree v√† SVM")
                st.markdown("""
                | **Ti√™u ch√≠**          | **Decision Tree**                     | **SVM**                           |
                |-----------------------|---------------------------------------|-----------------------------------|
                | **Ph∆∞∆°ng ph√°p**       | Chia d·ªØ li·ªáu theo ƒëi·ªÅu ki·ªán logic     | T√¨m si√™u ph·∫≥ng t·ªëi ∆∞u            |
                | **Tham s·ªë ch√≠nh**     | Max Depth, Criterion                  | C, Kernel                        |
                | **T·ªëc ƒë·ªô**           | Nhanh v·ªõi d·ªØ li·ªáu nh·ªè                 | Ch·∫≠m v·ªõi d·ªØ li·ªáu l·ªõn             |
                | **Chu·∫©n h√≥a**         | Kh√¥ng c·∫ßn                             | C·∫ßn                              |
                | **Hi·ªáu qu·∫£**          | D·ªÖ overfitting, k√©m v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p | Ch√≠nh x√°c cao, t·ªët v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p |

                **K·∫øt lu·∫≠n**: Decision Tree nhanh v√† ƒë∆°n gi·∫£n, SVM m·∫°nh m·∫Ω h∆°n nh∆∞ng t·ªën t√†i nguy√™n.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 6. C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)")
                st.markdown("""
                $$ \\text{Accuracy} = \\frac{\\text{S·ªë m·∫´u d·ª± ƒëo√°n ƒë√∫ng}}{\\text{T·ªïng s·ªë m·∫´u}} $$  
                - **V√≠ d·ª•**: D·ª± ƒëo√°n ƒë√∫ng $92/100$ ·∫£nh ‚Üí $Accuracy = 0.92$ (92%).  
                - **√ù nghƒ©a**: ƒêo kh·∫£ nƒÉng ph√¢n lo·∫°i ƒë√∫ng c·ªßa m√¥ h√¨nh tr√™n t·∫≠p ki·ªÉm tra.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

    with tab_load:
        st.markdown('<div class="section-title">T·∫£i v√† Chu·∫©n b·ªã D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        st.markdown("""
        **T·∫≠p d·ªØ li·ªáu MNIST**: G·ªìm $70,000$ ·∫£nh ch·ªØ s·ªë ($0$-$9$), m·ªói ·∫£nh $28 \\times 28$ pixel. Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ hu·∫•n luy·ªán.  
        """, unsafe_allow_html=True)

        with st.container():
            st.subheader("T·∫£i d·ªØ li·ªáu")
            if st.button("T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML", type="primary"):
                with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 101, 20):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang t·∫£i d·ªØ li·ªáu... {i}%")
                        time.sleep(0.1)
                    X, y = fetch_mnist_data()
                    if X is not None:
                        X = np.array(X, dtype=np.float64)
                        y = np.array(y, dtype=np.int32)
                        st.session_state['full_data'] = (X, y)
                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Load"):
                            mlflow.log_param("total_samples", X.shape[0])
                        st.success("T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                        st.write(f"K√≠ch th∆∞·ªõc d·ªØ li·ªáu: {X.shape[0]} m·∫´u, {X.shape[1]} ƒë·∫∑c tr∆∞ng")
                        status_text.text("ƒê√£ t·∫£i xong! 100%")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()

        if 'full_data' in st.session_state:
            X_full, y_full = st.session_state['full_data']
            st.subheader("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u")
            st.markdown("""
            - **100 m·∫´u**: Th·ª≠ nghi·ªám nhanh (~v√†i gi√¢y).  
            - **1,000 m·∫´u**: Ki·ªÉm tra c∆° b·∫£n (~10-20 gi√¢y).  
            - **10,000 m·∫´u**: C√¢n b·∫±ng hi·ªáu su·∫•t (~1-2 ph√∫t).  
            - **50,000 m·∫´u**: Hu·∫•n luy·ªán chuy√™n s√¢u (~5-10 ph√∫t).  
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)
            with col1:
                sample_options = {
                    "100 m·∫´u (Th·ª≠ nghi·ªám nhanh)": 100,
                    "1,000 m·∫´u (Ki·ªÉm tra c∆° b·∫£n)": 1000,
                    "10,000 m·∫´u (C√¢n b·∫±ng hi·ªáu su·∫•t)": 10000,
                    "50,000 m·∫´u (Hu·∫•n luy·ªán chuy√™n s√¢u)": 50000
                }
                selected_option = st.selectbox("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", list(sample_options.keys()))
                num_samples = sample_options[selected_option]
                if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng (t√πy ch·ªçn c√≥ s·∫µn)", type="primary"):
                    with st.spinner(f"ƒêang l·∫•y {num_samples} m·∫´u..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        for i in range(0, 101, 20):
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang ch·ªçn {num_samples} m·∫´u... {i}%")
                            time.sleep(0.1)
                        indices = np.random.choice(len(X_full), size=num_samples, replace=False)
                        X_sampled = X_full[indices]
                        y_sampled = y_full[indices]
                        st.session_state['data'] = (X_sampled, y_sampled)
                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample"):
                            mlflow.log_param("num_samples", num_samples)
                        st.success(f"ƒê√£ ch·ªçn {num_samples} m·∫´u!")
                        status_text.text("ƒê√£ x·ª≠ l√Ω xong! 100%")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()

            with col2:
                custom_num_samples = st.number_input("Nh·∫≠p s·ªë l∆∞·ª£ng t√πy √Ω (t·ªëi ƒëa $70,000$):", min_value=1, max_value=70000, value=1000, step=100)
                if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng (t√πy √Ω)", type="primary"):
                    with st.spinner(f"ƒêang l·∫•y {custom_num_samples} m·∫´u..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        for i in range(0, 101, 20):
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang ch·ªçn {custom_num_samples} m·∫´u... {i}%")
                            time.sleep(0.1)
                        indices = np.random.choice(len(X_full), size=custom_num_samples, replace=False)
                        X_sampled = X_full[indices]
                        y_sampled = y_full[indices]
                        st.session_state['data'] = (X_sampled, y_sampled)
                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample_Custom"):
                            mlflow.log_param("num_samples", custom_num_samples)
                        st.success(f"ƒê√£ ch·ªçn {custom_num_samples} m·∫´u!")
                        status_text.text("ƒê√£ x·ª≠ l√Ω xong! 100%")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()

    with tab_preprocess:
        st.markdown('<div class="section-title">X·ª≠ l√Ω D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† ch·ªçn s·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc.")
        else:
            X, y = st.session_state['data']
            if "data_original" not in st.session_state:
                st.session_state["data_original"] = (X.copy(), y.copy())

            st.subheader("D·ªØ li·ªáu G·ªëc")
            fig, axes = plt.subplots(2, 5, figsize=(10, 4))
            for i, ax in enumerate(axes.flat):
                ax.imshow(X[i].reshape(28, 28), cmap='gray')
                ax.set_title(f"Label: {y[i]}")
                ax.axis("off")
            st.pyplot(fig)

            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button("Chu·∫©n h√≥a d·ªØ li·ªáu (Normalization)", type="primary"):
                    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 1]..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        for i in range(0, 101, 20):
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang chu·∫©n h√≥a d·ªØ li·ªáu... {i}%")
                            time.sleep(0.1)
                        X_norm = X / 255.0
                        st.session_state["data_processed"] = (X_norm, y)
                        st.success("ƒê√£ chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 1]!")
                        status_text.text("ƒê√£ x·ª≠ l√Ω xong! 100%")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()
                        st.rerun()
            with col2:
                st.markdown("""
                    <div class="tooltip">? (Norm)
                        <span class="tooltiptext">
                            ƒê∆∞a d·ªØ li·ªáu v·ªÅ $[0, 1]$ b·∫±ng c√°ch chia cho $255$.<br>
                            C√¥ng d·ª•ng: ƒê·∫£m b·∫£o thang ƒëo ƒë·ªìng nh·∫•t, ƒë·∫∑c bi·ªát c·∫ßn cho SVM.
                        </span>
                    </div>
                """, unsafe_allow_html=True)

            if "data_processed" in st.session_state:
                X_processed, y_processed = st.session_state["data_processed"]
                st.subheader("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
                fig, axes = plt.subplots(2, 5, figsize=(10, 4))
                for i, ax in enumerate(axes.flat):
                    ax.imshow(X_processed[i].reshape(28, 28), cmap='gray')
                    ax.set_title(f"Label: {y_processed[i]}")
                    ax.axis("off")
                st.pyplot(fig)

    with tab_split:
        st.markdown('<div class="section-title">Chia T·∫≠p D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            data_source = st.session_state.get('data_processed', st.session_state['data'])
            X, y = data_source
            total_samples = len(X)
            st.write(f"T·ªïng s·ªë m·∫´u: {total_samples}")

            col1, col2 = st.columns(2)
            with col1:
                test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20)
            with col2:
                valid_pct = st.slider("T·ª∑ l·ªá Validation (%)", 0, 50, 20)

            test_size = test_pct / 100
            X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
            valid_size = (valid_pct / 100) / (1 - test_size) if test_size < 1 else 0
            X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=valid_size, random_state=42)

            st.write(f"**Ph√¢n b·ªï d·ªØ li·ªáu**: Train: {len(X_train)}, Validation: {len(X_valid)}, Test: {len(X_test)}")
            if st.button("X√°c nh·∫≠n ph√¢n chia", type="primary"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 101, 20):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang chia d·ªØ li·ªáu... {i}%")
                        time.sleep(0.1)
                    st.session_state['split_data'] = {
                        "X_train": X_train, "y_train": y_train,
                        "X_valid": X_valid, "y_valid": y_valid,
                        "X_test": X_test, "y_test": y_test
                    }
                    st.success("ƒê√£ chia d·ªØ li·ªáu th√†nh c√¥ng!")
                    status_text.text("ƒê√£ x·ª≠ l√Ω xong! 100%")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

    with tab_train_eval:
        st.markdown('<div class="section-title">Hu·∫•n luy·ªán v√† ƒê√°nh gi√° M√¥ h√¨nh</div>', unsafe_allow_html=True)
        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            X_train = st.session_state['split_data']["X_train"]
            y_train = st.session_state['split_data']["y_train"]
            X_valid = st.session_state['split_data']["X_valid"]
            y_valid = st.session_state['split_data']["y_valid"]
            X_test = st.session_state['split_data']["X_test"]
            y_test = st.session_state['split_data']["y_test"]

            X_train = np.array(X_train, dtype=np.float64)
            y_train = np.array(y_train, dtype=np.int32)
            X_valid = np.array(X_valid, dtype=np.float64)
            y_valid = np.array(y_valid, dtype=np.int32)
            X_test = np.array(X_test, dtype=np.float64)
            y_test = np.array(y_test, dtype=np.int32)

            num_samples = len(X_train)
            st.write(f"**S·ªë m·∫´u hu·∫•n luy·ªán**: {num_samples}")

            model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh:", ["Decision Tree", "SVM"])

            def get_optimal_params(num_samples, model_choice):
                if model_choice == "Decision Tree":
                    if num_samples <= 1000:
                        return {"criterion": "gini", "max_depth": 5}
                    elif num_samples <= 5000:
                        return {"criterion": "gini", "max_depth": 10}
                    elif num_samples <= 50000:
                        return {"criterion": "gini", "max_depth": 20}
                    else:
                        return {"criterion": "gini", "max_depth": 30}
                else:  # SVM
                    if num_samples <= 1000:
                        return {"C": 0.1, "kernel": "rbf"}
                    elif num_samples <= 5000:
                        return {"C": 1.0, "kernel": "rbf"}
                    elif num_samples <= 50000:
                        return {"C": 5.0, "kernel": "rbf"}
                    else:
                        return {"C": 10.0, "kernel": "rbf"}

            if f"optimal_params_{model_choice}" not in st.session_state:
                st.session_state[f"optimal_params_{model_choice}"] = get_optimal_params(num_samples, model_choice)
            params = st.session_state.get(f"training_params_{model_choice}", st.session_state[f"optimal_params_{model_choice}"].copy())

            st.subheader("‚öôÔ∏è C·∫•u h√¨nh tham s·ªë m√¥ h√¨nh")
            st.markdown("""
            D∆∞·ªõi ƒë√¢y l√† b·∫£ng tham s·ªë t·ªëi ∆∞u d·ª±a tr√™n s·ªë m·∫´u hu·∫•n luy·ªán:
            """, unsafe_allow_html=True)
            if model_choice == "Decision Tree":
                st.markdown("""
                | S·ªë m·∫´u       | Criterion | Max Depth |
                |--------------|-----------|-----------|
                | $\\leq 1,000$| gini      | $5$       |
                | $1,000-5,000$| gini      | $10$      |
                | $5,000-50,000$| gini     | $20$      |
                | $>50,000$    | gini      | $30$      |
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                | S·ªë m·∫´u       | C     | Kernel |
                |--------------|-------|--------|
                | $\\leq 1,000$| $0.1$ | rbf    |
                | $1,000-5,000$| $1.0$ | rbf    |
                | $5,000-50,000$| $5.0$| rbf    |
                | $>50,000$    | $10.0$| rbf    |
                """, unsafe_allow_html=True)

            st.info(f"Tham s·ªë t·ªëi ∆∞u cho {num_samples} m·∫´u: {st.session_state[f'optimal_params_{model_choice}']}")

            col_param1, col_param2 = st.columns(2)
            with col_param1:
                with st.expander("C·∫•u tr√∫c m√¥ h√¨nh"):
                    if model_choice == "Decision Tree":
                        params["criterion"] = st.selectbox("Criterion", ["gini", "entropy"], index=["gini", "entropy"].index(params["criterion"]))
                        params["max_depth"] = st.number_input("Max Depth", min_value=1, max_value=100, value=params["max_depth"])
                    else:
                        params["C"] = st.number_input("C", min_value=0.01, max_value=100.0, value=params["C"])
                        params["kernel"] = st.selectbox("Kernel", ["linear", "rbf", "poly", "sigmoid"], index=["linear", "rbf", "poly", "sigmoid"].index(params["kernel"]))
            with col_param2:
                if st.button("üîÑ Kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u"):
                    st.session_state[f"training_params_{model_choice}"] = st.session_state[f"optimal_params_{model_choice}"].copy()
                    st.success("ƒê√£ kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u!")
                    st.rerun()

            st.session_state[f"training_params_{model_choice}"] = params

            if st.button("üöÄ B·∫Øt ƒë·∫ßu Hu·∫•n luy·ªán", type="primary"):
                with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    start_time = time.time()

                    status_text.text("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu... 20%")
                    progress_bar.progress(20)
                    time.sleep(0.1)

                    if model_choice == "Decision Tree":
                        pipeline = Pipeline([
                            ('imputer', SimpleImputer(strategy='mean')),
                            ('classifier', DecisionTreeClassifier(**params))
                        ])
                    else:
                        pipeline = Pipeline([
                            ('imputer', SimpleImputer(strategy='mean')),
                            ('classifier', SVC(probability=True, **params))
                        ])

                    status_text.text("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh... 50%")
                    progress_bar.progress(50)
                    pipeline.fit(X_train, y_train)

                    status_text.text("ƒêang ƒë√°nh gi√° m√¥ h√¨nh... 90%")
                    progress_bar.progress(90)
                    y_valid_pred = pipeline.predict(X_valid)
                    y_test_pred = pipeline.predict(X_test)
                    acc_valid = accuracy_score(y_valid, y_valid_pred)
                    acc_test = accuracy_score(y_test, y_test_pred)
                    cm_valid = confusion_matrix(y_valid, y_valid_pred)
                    cm_test = confusion_matrix(y_test, y_test_pred)

                    run_name = f"{model_choice}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=run_name) as run:
                        mlflow.log_params(params)
                        mlflow.log_metric("accuracy_val", acc_valid)
                        mlflow.log_metric("accuracy_test", acc_test)
                        mlflow.log_metric("training_time", time.time() - start_time)
                        mlflow.sklearn.log_model(pipeline, "model")

                        st.session_state['model'] = pipeline
                        st.session_state['training_results'] = {
                            'accuracy_val': acc_valid, 'accuracy_test': acc_test,
                            'cm_valid': cm_valid, 'cm_test': cm_test,
                            'run_name': run_name, 'run_id': run.info.run_id,
                            'params': params, 'training_time': time.time() - start_time,
                            'model_choice': model_choice
                        }

                    status_text.text("ƒê√£ ho√†n t·∫•t hu·∫•n luy·ªán! 100%")
                    progress_bar.progress(100)
                    st.success(f"ƒê√£ hu·∫•n luy·ªán xong! Th·ªùi gian: {time.time() - start_time:.2f} gi√¢y")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()
                    st.rerun()

            if 'training_results' in st.session_state and st.session_state['training_results']['model_choice'] == model_choice:
                results = st.session_state['training_results']
                st.subheader("üìä K·∫øt qu·∫£ Hu·∫•n luy·ªán")
                col_result1, col_result2, col_result3 = st.columns(3)
                with col_result1:
                    st.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{results['training_time']:.2f} gi√¢y")
                with col_result2:
                    st.metric("ƒê·ªô ch√≠nh x√°c Validation", f"{results['accuracy_val']*100:.2f}%")
                with col_result3:
                    st.metric("ƒê·ªô ch√≠nh x√°c Test", f"{results['accuracy_test']*100:.2f}%")

                st.subheader("üìà Ma tr·∫≠n Nh·∫ßm l·∫´n")
                col_cm1, col_cm2 = st.columns(2)
                with col_cm1:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_valid'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Validation")
                    st.pyplot(fig)
                with col_cm2:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_test'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Test")
                    st.pyplot(fig)

                st.subheader("‚ÑπÔ∏è Th√¥ng tin Chi ti·∫øt")
                with st.expander("Xem chi ti·∫øt", expanded=False):
                    st.markdown("**Th√¥ng tin l·∫ßn ch·∫°y:**")
                    st.write(f"- T√™n: {results['run_name']}")
                    st.write(f"- ID: {results['run_id']}")
                    st.write(f"- Th·ªùi gian hu·∫•n luy·ªán: {results['training_time']:.2f} gi√¢y")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Validation: {results['accuracy_val']*100:.2f}%")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Test: {results['accuracy_test']*100:.2f}%")
                    st.markdown("**Tham s·ªë ƒë√£ ch·ªçn:**")
                    st.json(results['params'])

    with tab_demo:
        st.markdown('<div class="section-title">Demo D·ª± ƒëo√°n Ch·ªØ s·ªë</div>', unsafe_allow_html=True)
        if 'split_data' not in st.session_state or 'model' not in st.session_state:
            st.info("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi s·ª≠ d·ª•ng Demo.")
        else:
            model_choice = st.session_state['training_results']['model_choice']
            st.write(f"**M√¥ h√¨nh hi·ªán t·∫°i**: {model_choice}")

            mode = st.selectbox("Ch·ªçn ph∆∞∆°ng th·ª©c d·ª± ƒëo√°n:", ["D·ªØ li·ªáu Test", "Upload ·∫£nh", "V·∫Ω s·ªë"])

            def preprocess_input(data, is_normalized):
                data, fixed = validate_and_fix_pixels(data)
                if fixed:
                    st.success("ƒê√£ chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 255]!")
                if not is_normalized:
                    data = data / 255.0
                return data

            is_normalized = 'data_processed' in st.session_state
            model = st.session_state['model']

            if mode == "D·ªØ li·ªáu Test":
                st.subheader("D·ª± ƒëo√°n t·ª´ D·ªØ li·ªáu Test")
                X_test = st.session_state['split_data']["X_test"]
                y_test = st.session_state['split_data']["y_test"]
                if len(X_test) == 0:
                    st.warning("T·∫≠p Test r·ªóng. Vui l√≤ng chia l·∫°i d·ªØ li·ªáu v·ªõi t·ª∑ l·ªá Test > 0%.")
                else:
                    col_select, col_display = st.columns([3, 2])
                    with col_select:
                        idx = st.slider("Ch·ªçn m·∫´u Test", 0, len(X_test) - 1, 0)
                    with col_display:
                        st.write("**·∫¢nh m·∫´u Test:**")
                        fig, ax = plt.subplots(figsize=(2, 2))
                        ax.imshow(X_test[idx].reshape(28, 28), cmap='gray')
                        ax.axis('off')
                        st.pyplot(fig)
                        st.write(f"**Nh√£n th·ª±c t·∫ø:** {y_test[idx]}")

                    if st.button("üîç D·ª± ƒëo√°n", key="predict_test"):
                        with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            for i in range(0, 101, 20):
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang d·ª± ƒëo√°n m·∫´u Test... {i}%")
                                time.sleep(0.1)
                            sample = X_test[idx].reshape(1, -1)
                            sample_processed = preprocess_input(sample, is_normalized)
                            prediction = model.predict(sample_processed)[0]
                            proba = model.predict_proba(sample_processed)[0]
                            max_proba = np.max(proba) * 100
                            st.markdown(f"""
                                <div class="prediction-box">
                                    <strong>D·ª± ƒëo√°n:</strong> {prediction}<br>
                                    <strong>ƒê·ªô tin c·∫≠y:</strong> {max_proba:.2f}%<br>
                                    <strong>Nh√£n th·ª±c t·∫ø:</strong> {y_test[idx]}
                                </div>
                            """, unsafe_allow_html=True)
                            status_text.text("ƒê√£ d·ª± ƒëo√°n xong! 100%")
                            time.sleep(0.5)
                            status_text.empty()
                            progress_bar.empty()

            elif mode == "Upload ·∫£nh":
                st.subheader("D·ª± ƒëo√°n t·ª´ ·∫¢nh T·∫£i l√™n")
                uploaded_images = st.file_uploader("Ch·ªçn ·∫£nh (PNG/JPG)", type=["png", "jpg"], accept_multiple_files=True)
                if uploaded_images:
                    for i, uploaded_image in enumerate(uploaded_images):
                        try:
                            img = Image.open(uploaded_image).convert('L').resize((28, 28))
                            img_array = np.array(img).flatten().reshape(1, -1)
                            col_img, col_btn = st.columns([1, 2])
                            with col_img:
                                st.image(img, caption=f"·∫¢nh {i+1}", width=150)
                            with col_btn:
                                if st.button(f"D·ª± ƒëo√°n ·∫£nh {i+1}", key=f"predict_upload_{i}"):
                                    with st.spinner(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}..."):
                                        progress_bar = st.progress(0)
                                        status_text = st.empty()
                                        for j in range(0, 101, 20):
                                            progress_bar.progress(j)
                                            status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}... {j}%")
                                            time.sleep(0.1)
                                        img_processed = preprocess_input(img_array, is_normalized)
                                        prediction = model.predict(img_processed)[0]
                                        proba = model.predict_proba(img_processed)[0]
                                        max_proba = np.max(proba) * 100
                                        st.markdown(f"""
                                            <div class="prediction-box">
                                                <strong>D·ª± ƒëo√°n:</strong> {prediction}<br>
                                                <strong>ƒê·ªô tin c·∫≠y:</strong> {max_proba:.2f}%
                                            </div>
                                        """, unsafe_allow_html=True)
                                        status_text.text(f"ƒê√£ d·ª± ƒëo√°n xong ·∫£nh {i+1}! 100%")
                                        time.sleep(0.5)
                                        status_text.empty()
                                        progress_bar.empty()
                        except Exception as e:
                            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh {i+1}: {e}")

            elif mode == "V·∫Ω s·ªë":
                st.subheader("D·ª± ƒëo√°n t·ª´ H√¨nh v·∫Ω")
                canvas_result = st_canvas(fill_color="black", stroke_width=20, stroke_color="white", 
                                          background_color="black", width=280, height=280, drawing_mode="freedraw", key="canvas")
                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button("D·ª± ƒëo√°n s·ªë ƒë√£ v·∫Ω"):
                        if canvas_result.image_data is not None and np.any(canvas_result.image_data):
                            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                                progress_bar = st.progress(0)
                                status_text = st.empty()
                                for i in range(0, 101, 20):
                                    progress_bar.progress(i)
                                    status_text.text(f"ƒêang x·ª≠ l√Ω h√¨nh v·∫Ω... {i}%")
                                    time.sleep(0.1)
                                img = Image.fromarray((canvas_result.image_data * 255).astype(np.uint8)).convert('L').resize((28, 28))
                                img_array = np.array(img).flatten().reshape(1, -1)
                                img_processed = preprocess_input(img_array, is_normalized)
                                prediction = model.predict(img_processed)[0]
                                proba = model.predict_proba(img_processed)[0]
                                max_proba = np.max(proba) * 100
                                st.markdown(f"""
                                    <div class="prediction-box">
                                        <strong>D·ª± ƒëo√°n:</strong> {prediction}<br>
                                        <strong>ƒê·ªô tin c·∫≠y:</strong> {max_proba:.2f}%
                                    </div>
                                """, unsafe_allow_html=True)
                                st.image(img, caption="H√¨nh v·∫Ω c·ªßa b·∫°n")
                                status_text.text("ƒê√£ d·ª± ƒëo√°n xong! 100%")
                                time.sleep(0.5)
                                status_text.empty()
                                progress_bar.empty()
                        else:
                            st.warning("Vui l√≤ng v·∫Ω tr∆∞·ªõc!")
                with col2:
                    if st.button("X√≥a Canvas"):
                        st.session_state['canvas_key'] = st.session_state.get('canvas_key', 0) + 1
                        st.rerun()

    with tab_log_info:
        st.markdown('<div class="section-title">Theo d√µi K·∫øt qu·∫£</div>', unsafe_allow_html=True)
        try:
            with st.spinner("ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 20):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán... {i}%")
                    time.sleep(0.1)
                client = MlflowClient()
                runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])
                if not runs:
                    st.info(f"Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o trong Experiment ID {EXPERIMENT_ID}.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    selected_run_name = st.selectbox("Ch·ªçn run:", list(run_options.values()))
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi:", value=selected_run_name)
                    if st.button("C·∫≠p nh·∫≠t t√™n"):
                        client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                        st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                        st.rerun()

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y"):
                        client.delete_run(selected_run_id)
                        st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                        st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt")
                    st.write(f"**T√™n:** {selected_run_name}")
                    st.write(f"**ID:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")
                    st.json(selected_run.data.params, expanded=True)
                    st.json(selected_run.data.metrics, expanded=True)

                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi MLflow: {e}")

if __name__ == "__main__":
    run_mnist_classification_app()