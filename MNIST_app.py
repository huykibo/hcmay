import os
import mlflow
import streamlit as st
import openml
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time
import requests
import gc

# H√†m t·∫£i d·ªØ li·ªáu MNIST
def fetch_mnist_data():
    try:
        mnist = openml.datasets.get_dataset(554)
        X, y, _, _ = mnist.get_data(target=mnist.default_target_attribute)
        return X, y
    except Exception as e:
        st.error(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c MNIST t·ª´ OpenML: {e}")
        return None, None

# H√†m ki·ªÉm tra v√† chu·∫©n h√≥a pixel
def validate_and_fix_pixels(X, name="d·ªØ li·ªáu"):
    X = np.array(X, dtype=np.float64)
    invalid_mask = (X < 0) | (X > 255)
    if np.any(invalid_mask):
        st.warning(f"Ph√°t hi·ªán gi√° tr·ªã pixel kh√¥ng h·ª£p l·ªá trong {name}. ƒêang chu·∫©n h√≥a...")
        X = np.clip(X, 0, 255)
        return X, True
    return X, False

def run_mnist_classification_app():
    # Thi·∫øt l·∫≠p MLflow
    mlflow_tracking_uri = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(mlflow_tracking_uri)
        mlflow.set_experiment("MNIST")
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets.")
        st.stop()

    try:
        response = requests.get(mlflow_tracking_uri, timeout=5)
        if response.status_code != 200:
            st.error(f"K·∫øt n·ªëi MLflow th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}.")
            st.stop()
    except requests.exceptions.RequestException as e:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi MLflow: {e}.")
        st.stop()

    EXPERIMENT_ID = mlflow.get_experiment_by_name("MNIST").experiment_id

    st.title("Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Decision Tree v√† SVM")

    # CSS t√πy ch·ªânh
    st.markdown("""
        <style>
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: pointer;
                color: #1f77b4;
                font-weight: bold;
                margin-left: 5px;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 400px;
                background-color: #f9f9f9;
                color: #333;
                text-align: left;
                border-radius: 6px;
                padding: 10px;
                position: absolute;
                z-index: 1;
                right: 105%;
                top: 50%;
                transform: translateY(-50%);
                opacity: 0;
                transition: opacity 0.3s;
                border: 1px solid #ccc;
                font-size: 0.9em;
                line-height: 1.4;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
            .section-title {
                font-size: 1.5em;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            .info-box {
                background-color: #f8f9fa;
                padding: 10px;
                border-left: 4px solid #3498db;
                margin-bottom: 15px;
            }
            .action-container {
                background-color: #ffffff;
                padding: 15px;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                margin-bottom: 20px;
            }
            .prediction-box {
                margin-top: 10px;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                background-color: #f9f9f9;
            }
            .mode-title {
                font-size: 1.2em;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            .stCanvas {
                border: 1px solid #ddd;
                border-radius: 5px;
            }
        </style>
    """, unsafe_allow_html=True)

    tabs = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "X·ª≠ l√Ω d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", "Hu·∫•n luy·ªán/ƒê√°nh gi√°", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"])
    tab_info, tab_load, tab_preprocess, tab_split, tab_train_eval, tab_demo, tab_log_info = tabs

    # Tab 1: Th√¥ng tin
    with tab_info:
        st.header("Gi·ªõi thi·ªáu v·ªÅ ·ª®ng d·ª•ng v√† C√°c M√¥ h√¨nh Ph√¢n lo·∫°i MNIST")
        st.markdown("""
        Ch√†o b·∫°n! ƒê√¢y l√† ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ t·∫≠p d·ªØ li·ªáu **MNIST** b·∫±ng **Decision Tree** v√† **SVM**. H√£y kh√°m ph√° c√°c t√≠nh nƒÉng v√† c√°ch ho·∫°t ƒë·ªông c·ªßa n√≥ nh√©!
        """, unsafe_allow_html=True)

        st.subheader("Ch·ªçn th√¥ng tin ƒë·ªÉ xem")
        info_option = st.selectbox(
            "",
            [
                "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?",
                "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a",
                "Decision Tree ‚Äì M√¥ h√¨nh c√¢y quy·∫øt ƒë·ªãnh",
                "SVM ‚Äì M√°y vector h·ªó tr·ª£",
                "So s√°nh Decision Tree v√† SVM",
                "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)"
            ],
            label_visibility="collapsed",
            help="Ch·ªçn ƒë·ªÉ xem chi ti·∫øt v·ªÅ ·ª©ng d·ª•ng, d·ªØ li·ªáu, ho·∫∑c m√¥ h√¨nh."
        )

        if info_option == "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 1. ·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?")
                st.markdown("""
                ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay d·ª±a tr√™n t·∫≠p d·ªØ li·ªáu **MNIST**, s·ª≠ d·ª•ng **Decision Tree** v√† **SVM**.  
                - **MNIST**: T·∫≠p d·ªØ li·ªáu g·ªìm $70,000$ ·∫£nh ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$, m·ªói ·∫£nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel (t·ªïng c·ªông $784$ ƒë·∫∑c tr∆∞ng).  
                - **M·ª•c ti√™u**:  
                  - X√¢y d·ª±ng v√† hu·∫•n luy·ªán hai m√¥ h√¨nh h·ªçc m√°y ƒë·ªÉ nh·∫≠n di·ªán ch√≠nh x√°c c√°c ch·ªØ s·ªë.  
                  - Cung c·∫•p c√¥ng c·ª• tr·ª±c quan ƒë·ªÉ h·ªçc t·∫≠p v√† ƒë√°nh gi√° hi·ªáu qu·∫£ c·ªßa thu·∫≠t to√°n.  

                **Th√¥ng tin c∆° b·∫£n**:  
                - **$784$ ƒë·∫∑c tr∆∞ng**: M·ªói ·∫£nh ƒë∆∞·ª£c bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng vector $784$ chi·ªÅu (gi√° tr·ªã pixel t·ª´ $0$ ƒë·∫øn $255$).  
                - **$70,000$ m·∫´u**: T·ªïng s·ªë ·∫£nh, ƒë∆∞·ª£c chia th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra.  
                - **Nhi·ªám v·ª•**: D·ª± ƒëo√°n nh√£n ($0$-$9$) d·ª±a tr√™n ƒë·∫∑c tr∆∞ng pixel.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 2. T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a")
                st.markdown("""
                **MNIST** l√† t·∫≠p d·ªØ li·ªáu chu·∫©n trong h·ªçc m√°y, ƒë∆∞·ª£c t·∫°o b·ªüi Yann LeCun v√† c√°c c·ªông s·ª±.  
                - **ƒê·∫∑c ƒëi·ªÉm**:  
                  - G·ªìm c√°c ·∫£nh ch·ªØ s·ªë vi·∫øt tay t·ª´ h·ªçc sinh trung h·ªçc v√† nh√¢n vi√™n ƒëi·ªÅu tra d√¢n s·ªë M·ªπ.  
                  - Chu·∫©n h√≥a th√†nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel, thang ƒë·ªô x√°m (gi√° tr·ªã t·ª´ $0$ ƒë·∫øn $255$).  

                **√ù nghƒ©a**:  
                - L√† b√†i to√°n c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng ph√¢n lo·∫°i c·ªßa c√°c m√¥ h√¨nh h·ªçc m√°y.  
                - ƒê∆°n gi·∫£n nh∆∞ng ƒë·ªß ph·ª©c t·∫°p ƒë·ªÉ ƒë√°nh gi√° kh·∫£ nƒÉng ph√¢n bi·ªát c√°c l·ªõp t∆∞∆°ng t·ª± (v√≠ d·ª•: "$4$" v√† "$9$").  
                - Ph√π h·ª£p cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† nghi√™n c·ª©u m√¥ h√¨nh ph·ª©c t·∫°p.  
                """, unsafe_allow_html=True)

                st.subheader("üì∑ Minh h·ªça d·ªØ li·ªáu MNIST")
                st.markdown("""
                D∆∞·ªõi ƒë√¢y l√† ·∫£nh minh h·ªça $10$ ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$ t·ª´ t·∫≠p d·ªØ li·ªáu MNIST ƒë·ªÉ b·∫°n h√¨nh dung. M·ªói ch·ªØ s·ªë ƒë∆∞·ª£c bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng ma tr·∫≠n $28 \\times 28$ pixel.
                """, unsafe_allow_html=True)
                try:
                    mnist_image = Image.open("mnist.png")
                    st.image(mnist_image, caption="·∫¢nh minh h·ªça $10$ ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$ trong MNIST", width=800)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `mnist.png`. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "Decision Tree ‚Äì M√¥ h√¨nh c√¢y quy·∫øt ƒë·ªãnh":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 3. Decision Tree ‚Äì M√¥ h√¨nh c√¢y quy·∫øt ƒë·ªãnh")
                st.markdown("""
                **Decision Tree (C√¢y quy·∫øt ƒë·ªãnh)** x√¢y d·ª±ng m·ªôt c·∫•u tr√∫c ph√¢n c·∫•p gi·ªëng nh∆∞ c√¢y, trong ƒë√≥ d·ªØ li·ªáu ƒë∆∞·ª£c chia nh·ªè d·∫ßn d·ª±a tr√™n c√°c ƒë·∫∑c tr∆∞ng (pixel trong MNIST) ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n cu·ªëi c√πng. Trong b√†i to√°n n√†y, tham s·ªë quan tr·ªçng nh∆∞ **Max Depth** ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm so√°t ƒë·ªô ph·ª©c t·∫°p c·ªßa c√¢y, tr√°nh hi·ªán t∆∞·ª£ng qu√° kh·ªõp (overfitting).
                """, unsafe_allow_html=True)

                st.subheader("üîß Quy tr√¨nh ho·∫°t ƒë·ªông")
                st.markdown("""
                Decision Tree ho·∫°t ƒë·ªông qua c√°c b∆∞·ªõc sau, ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a d·ª±a tr√™n c√°c tham s·ªë b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh trong tab **Hu·∫•n luy·ªán/ƒê√°nh gi√°**:
                """, unsafe_allow_html=True)

                st.subheader("1. N√∫t g·ªëc (Root Node)")
                st.markdown("""
                - Thu·∫≠t to√°n b·∫Øt ƒë·∫ßu v·ªõi to√†n b·ªô d·ªØ li·ªáu MNIST ($70,000$ m·∫´u, nh√£n $0$-$9$) v√† ch·ªçn m·ªôt pixel quan tr·ªçng, v√≠ d·ª•: "Pixel 5 > 100?" (gi·∫£ s·ª≠ Pixel 5 l√† gi√° tr·ªã t·∫°i v·ªã tr√≠ [0, 5] trong ·∫£nh $28 \\times 28$).  
                - D·ªØ li·ªáu ƒë∆∞·ª£c chia th√†nh hai nh√°nh: nh√°nh "Yes" n·∫øu Pixel 5 > 100, nh√°nh "No" n·∫øu Pixel 5 ‚â§ 100.  
                """, unsafe_allow_html=True)
                try:
                    tree_step_1 = Image.open("illustrations/tree_step_1.png")
                    st.image(tree_step_1, caption="B∆∞·ªõc 1: N√∫t g·ªëc v·ªõi to√†n b·ªô d·ªØ li·ªáu MNIST", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/tree_step_1.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("2. Chia nh√°nh ƒë·∫ßu ti√™n (Splitting)")
                st.markdown("""
                - T·ª´ n√∫t g·ªëc, nh√°nh "Yes" (Pixel 5 > 100) ch·ª©a c√°c m·∫´u c√≥ gi√° tr·ªã pixel s√°ng h∆°n, v√≠ d·ª•: ch·ªØ s·ªë "$1$" ho·∫∑c "$7$" (th∆∞·ªùng c√≥ n√©t d√†y ·ªü ƒë·∫ßu).  
                - Nh√°nh "No" (Pixel 5 ‚â§ 100) ch·ª©a c√°c m·∫´u t·ªëi h∆°n, v√≠ d·ª•: ch·ªØ s·ªë "$0$" ho·∫∑c "$2$".  
                """, unsafe_allow_html=True)
                try:
                    tree_step_2 = Image.open("illustrations/tree_step_2.png")
                    st.image(tree_step_2, caption="B∆∞·ªõc 2: Chia nh√°nh ƒë·∫ßu ti√™n", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/tree_step_2.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("3. Chia nh√°nh ti·∫øp theo")
                st.markdown("""
                - T·ª´ nh√°nh "Yes" (Pixel 5 > 100), ti·∫øp t·ª•c chia d·ª±a tr√™n "Pixel 10 > 50?" (gi·∫£ s·ª≠ Pixel 10 l√† v·ªã tr√≠ [0, 10]).  
                - Nh√°nh "Yes" (Pixel 10 > 50) ch·ª©a c√°c m·∫´u c√≥ n√©t d√†y h∆°n, v√≠ d·ª•: "$1$" (n√©t ƒë·ª©ng r√µ r·ªát).  
                - Nh√°nh "No" (Pixel 10 ‚â§ 50) ch·ª©a c√°c m·∫´u m·ªèng h∆°n, v√≠ d·ª•: "$7$".  
                """, unsafe_allow_html=True)
                try:
                    tree_step_3 = Image.open("illustrations/tree_step_3.png")
                    st.image(tree_step_3, caption="B∆∞·ªõc 3: Chia nh√°nh ti·∫øp theo d·ª±a tr√™n Pixel 10 > 50", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/tree_step_3.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("4. N√∫t l√° v√† ti√™u ch√≠ d·ª´ng")
                st.markdown("""
                - Qu√° tr√¨nh d·ª´ng khi nh√≥m d·ªØ li·ªáu thu·∫ßn nh·∫•t (t·∫•t c·∫£ m·∫´u trong nh√°nh thu·ªôc c√πng m·ªôt nh√£n) ho·∫∑c ƒë·∫°t **Max Depth** (ƒë·ªô s√¢u t·ªëi ƒëa c·ªßa c√¢y).  
                - V√≠ d·ª•: Nh√°nh "Yes" c·ªßa "Pixel 10 > 50" ‚Üí Nh√£n "$1$" (thu·∫ßn nh·∫•t).  
                - Nh√°nh "No" c·ªßa "Pixel 10 ‚â§ 50" ‚Üí Nh√£n "$9$" (thu·∫ßn nh·∫•t).  
                - Nh√°nh "No" c·ªßa "Pixel 5 > 100" ‚Üí Nh√£n "$0$" (ƒë·∫°t Max Depth).  
                """, unsafe_allow_html=True)
                try:
                    tree_step_4 = Image.open("illustrations/tree_step_4.png")
                    st.image(tree_step_4, caption="B∆∞·ªõc 4: N√∫t l√° v·ªõi nh√£n d·ª± ƒëo√°n (1, 9, 0)", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/tree_step_4.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("5. D·ª± ƒëo√°n")
                st.markdown("""
                - V·ªõi m·ªôt m·∫´u m·ªõi c√≥ Pixel 5 = 150 (> 100) v√† Pixel 10 = 60 (> 50), thu·∫≠t to√°n ƒëi qua nh√°nh "Yes" r·ªìi "Yes", d·∫´n ƒë·∫øn nh√£n "$1$".  
                - K·∫øt qu·∫£ d·ª± ƒëo√°n: "$1$" v·ªõi ƒë·ªô tin c·∫≠y cao d·ª±a tr√™n c√°c ƒëi·ªÅu ki·ªán pixel.  
                """, unsafe_allow_html=True)
                try:
                    tree_step_5 = Image.open("illustrations/tree_step_5.png")
                    st.image(tree_step_5, caption="B∆∞·ªõc 5: D·ª± ƒëo√°n nh√£n '1' cho m·∫´u m·ªõi", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/tree_step_5.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("‚öôÔ∏è C√°c tham s·ªë ch√≠nh v√† ·ª©ng d·ª•ng")
                st.markdown("""
                - **Ti√™u ch√≠ l·ª±a ch·ªçn ƒë·∫∑c tr∆∞ng**:  
                  - **Entropy**: ƒêo m·ª©c ƒë·ªô "h·ªón lo·∫°n" c·ªßa d·ªØ li·ªáu d·ª±a tr√™n ph√¢n b·ªë nh√£n:  
                    $$ Entropy(S) = -\\sum_{i=0}^{9} p_i \\log_2(p_i) $$  
                    - $p_i$: T·ª∑ l·ªá m·∫´u thu·ªôc nh√£n $i$.  
                  - **Gini Index**: ƒêo ƒë·ªô "tinh khi·∫øt" c·ªßa nh√≥m:  
                    $$ Gini(S) = 1 - \\sum_{i=0}^{9} p_i^2 $$  
                - **Max Depth**:  
                  - L√† tham s·ªë gi·ªõi h·∫°n s·ªë m·ª©c chia t·ªëi ƒëa c·ªßa c√¢y (ƒë·ªô s√¢u).  
                  - Trong b√†i to√°n MNIST, n·∫øu kh√¥ng gi·ªõi h·∫°n Max Depth, c√¢y c√≥ th·ªÉ ph√°t tri·ªÉn qu√° s√¢u (v√≠ d·ª•: $784$ m·ª©c t∆∞∆°ng ·ª©ng $784$ pixel), d·∫´n ƒë·∫øn overfitting.  
                  - Gi√° tr·ªã th∆∞·ªùng d√πng:  
                    - D·ªØ li·ªáu nh·ªè (<$1000$ m·∫´u): $5$-$10$.  
                    - D·ªØ li·ªáu trung b√¨nh ($1000$-$5000$ m·∫´u): $10$-$20$.  
                    - D·ªØ li·ªáu l·ªõn (>$5000$ m·∫´u): $20$-$50$.  
                  - V√≠ d·ª•: V·ªõi Max Depth = $10$, c√¢y d·ª´ng sau $10$ l·∫ßn chia, ngay c·∫£ khi d·ªØ li·ªáu ch∆∞a ho√†n to√†n thu·∫ßn nh·∫•t.

                **√Åp d·ª•ng v·ªõi MNIST**:  
                - Decision Tree chia d·ªØ li·ªáu d·ª±a tr√™n gi√° tr·ªã pixel (v√≠ d·ª•: Pixel 5, Pixel 10) ƒë·ªÉ ph√¢n bi·ªát nh√£n ($0$-$9$).  
                - Tham s·ªë Max Depth gi√∫p c√¢n b·∫±ng gi·ªØa ƒë·ªô ch√≠nh x√°c v√† kh·∫£ nƒÉng kh√°i qu√°t h√≥a, ƒë·∫∑c bi·ªát v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ MNIST ($784$ ƒë·∫∑c tr∆∞ng).
                """, unsafe_allow_html=True)

                st.subheader("üü™ ∆Øu ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm")
                st.markdown("""
                - **‚úÖ ∆Øu ƒëi·ªÉm**:  
                  - D·ªÖ hi·ªÉu, tr·ª±c quan nh∆∞ m·ªôt bi·ªÉu ƒë·ªì c√¢y h·ªèi ƒë√°p.  
                  - Nhanh v·ªõi d·ªØ li·ªáu nh·ªè, kh√¥ng y√™u c·∫ßu chu·∫©n h√≥a d·ªØ li·ªáu.  
                - **‚ùå Nh∆∞·ª£c ƒëi·ªÉm**:  
                  - D·ªÖ b·ªã **overfitting** n·∫øu Max Depth qu√° l·ªõn, ƒë·∫∑c bi·ªát khi d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ MNIST.  
                  - Kh√≥ x·ª≠ l√Ω c√°c m·∫´u c√≥ ƒë·∫∑c tr∆∞ng t∆∞∆°ng t·ª± (v√≠ d·ª•: "$3$" v√† "$8$").  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "SVM ‚Äì M√°y vector h·ªó tr·ª£":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 4. SVM ‚Äì M√°y vector h·ªó tr·ª£")
                st.markdown("""
                **SVM (Support Vector Machine)** t√¨m m·ªôt **si√™u ph·∫≥ng** trong kh√¥ng gian ƒë·∫∑c tr∆∞ng ($784$ chi·ªÅu v·ªõi MNIST) ƒë·ªÉ ph√¢n t√°ch c√°c l·ªõp nh√£n sao cho kho·∫£ng c√°ch t·ª´ si√™u ph·∫≥ng ƒë·∫øn c√°c m·∫´u g·∫ßn nh·∫•t (support vectors) l√† l·ªõn nh·∫•t. N·∫øu d·ªØ li·ªáu kh√¥ng ph√¢n t√°ch tuy·∫øn t√≠nh, n√≥ s·ª≠ d·ª•ng **kernel** ƒë·ªÉ chuy·ªÉn d·ªØ li·ªáu l√™n kh√¥ng gian cao h∆°n.
                """, unsafe_allow_html=True)

                st.subheader("üîß Quy tr√¨nh ho·∫°t ƒë·ªông")
                st.markdown("""
                SVM ho·∫°t ƒë·ªông qua c√°c b∆∞·ªõc sau, v·ªõi c√°c tham s·ªë b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh trong tab **Hu·∫•n luy·ªán/ƒê√°nh gi√°**:
                """, unsafe_allow_html=True)

                st.subheader("1. Si√™u ph·∫≥ng")
                st.markdown("""
                - Si√™u ph·∫≥ng l√† m·ªôt ranh gi·ªõi ph√¢n t√°ch trong kh√¥ng gian cao chi·ªÅu, ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a b·ªüi:  
                  $$ f(x) = w \\cdot x + b $$  
                  - $w$: Vector tr·ªçng s·ªë, x√°c ƒë·ªãnh h∆∞·ªõng c·ªßa si√™u ph·∫≥ng.  
                  - $x$: Vector ƒë·∫∑c tr∆∞ng ($784$ pixel).  
                  - $b$: ƒê·ªô l·ªách, ƒëi·ªÅu ch·ªânh v·ªã tr√≠ si√™u ph·∫≥ng.  
                - M·∫´u n·∫±m ·ªü ph√≠a n√†o c·ªßa si√™u ph·∫≥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh b·ªüi d·∫•u c·ªßa $f(x)$.  
                """, unsafe_allow_html=True)
                try:
                    svm_step_1 = Image.open("illustrations/svm_step_1.png")
                    st.image(svm_step_1, caption="B∆∞·ªõc 1: Si√™u ph·∫≥ng ph√¢n t√°ch d·ªØ li·ªáu", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/svm_step_1.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("2. T·ªëi ∆∞u h√≥a l·ªÅ")
                st.markdown("""
                - Kho·∫£ng c√°ch l·ªÅ (margin) t·ª´ si√™u ph·∫≥ng ƒë·∫øn c√°c ƒëi·ªÉm g·∫ßn nh·∫•t ƒë∆∞·ª£c t√≠nh l√†:  
                  $$ Margin = \\frac{2}{\\|w\\|} $$  
                  - $\\|w\\|$: ƒê·ªô d√†i vector $w$.  
                - M·ª•c ti√™u t·ªëi ∆∞u h√≥a:  
                  $$ \\min_{w,b} \\frac{1}{2} \\|w\\|^2 $$  
                  V·ªõi r√†ng bu·ªôc:  
                  $$ y_i (w \\cdot x_i + b) \\geq 1 $$  
                  - $y_i$: Nh√£n th·ª±c t·∫ø (+1 ho·∫∑c -1 cho ph√¢n lo·∫°i nh·ªã ph√¢n).  
                  - $x_i$: Vector ƒë·∫∑c tr∆∞ng c·ªßa m·∫´u.  
                """, unsafe_allow_html=True)
                try:
                    svm_step_2 = Image.open("illustrations/svm_step_2.png")
                    st.image(svm_step_2, caption="B∆∞·ªõc 2: Si√™u ph·∫≥ng t·ªëi ∆∞u v·ªõi l·ªÅ l·ªõn nh·∫•t v√† support vectors", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/svm_step_2.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("3. Soft Margin")
                st.markdown("""
                - Khi d·ªØ li·ªáu kh√¥ng ph√¢n t√°ch ho√†n h·∫£o (c√≥ l·∫´n l·ªôn gi·ªØa c√°c l·ªõp), SVM cho ph√©p sai s·ªë:  
                  $$ \\min_{w,b,\\xi} \\frac{1}{2} \\|w\\|^2 + C \\sum \\xi_i $$  
                  - $\\xi_i$: Bi·∫øn "l·ªèng" (slack variable), ƒëo m·ª©c ƒë·ªô vi ph·∫°m c·ªßa m·∫´u.  
                  - $C$: Tham s·ªë ƒëi·ªÅu ch·ªânh, c√¢n b·∫±ng gi·ªØa vi·ªác t·ªëi ƒëa h√≥a l·ªÅ v√† gi·∫£m thi·ªÉu l·ªói.  
                - $C$ l·ªõn ∆∞u ti√™n √≠t l·ªói h∆°n, $C$ nh·ªè ∆∞u ti√™n l·ªÅ l·ªõn h∆°n.  
                """, unsafe_allow_html=True)
                try:
                    svm_step_4 = Image.open("illustrations/svm_step_4.png")
                    st.image(svm_step_4, caption="B∆∞·ªõc 3: Soft Margin v·ªõi d·ªØ li·ªáu l·∫´n l·ªôn", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/svm_step_4.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("4. Kernel Trick")
                st.markdown("""
                - Khi d·ªØ li·ªáu kh√¥ng ph√¢n t√°ch tuy·∫øn t√≠nh trong kh√¥ng gian ban ƒë·∫ßu, SVM √°nh x·∫° d·ªØ li·ªáu l√™n kh√¥ng gian cao h∆°n th√¥ng qua h√†m kernel:  
                  $$ K(x_i, x_j) = \\phi(x_i) \\cdot \\phi(x_j) $$  
                  - $\\phi$: H√†m √°nh x·∫° (kh√¥ng c·∫ßn t√≠nh tr·ª±c ti·∫øp).  
                - C√°c lo·∫°i kernel:  
                  - **Linear**: $K(x_i, x_j) = x_i \\cdot x_j$.  
                  - **Polynomial**: $K(x_i, x_j) = (x_i \\cdot x_j + c)^d$.  
                  - **RBF**: $K(x_i, x_j) = \\exp(-\\gamma \\|x_i - x_j\\|^2)$, th∆∞·ªùng d√πng cho d·ªØ li·ªáu phi tuy·∫øn.  
                - Kernel gi√∫p t√¨m ranh gi·ªõi ph√¢n t√°ch trong kh√¥ng gian m·ªõi m√† kh√¥ng c·∫ßn t√≠nh to√°n t·ªça ƒë·ªô tr·ª±c ti·∫øp.  
                """, unsafe_allow_html=True)
                try:
                    svm_step_3 = Image.open("illustrations/svm_step_3.png")
                    st.image(svm_step_3, caption="B∆∞·ªõc 4: Kernel n√¢ng d·ªØ li·ªáu l√™n kh√¥ng gian cao h∆°n", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/svm_step_3.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("5. D·ª± ƒëo√°n")
                st.markdown("""
                - V·ªõi m·∫´u m·ªõi $x$:  
                  $$ f(x) = \\text{sign} \\left( \\sum_{i} \\alpha_i y_i K(x_i, x) + b \\right) $$  
                  - $\\alpha_i$: Tr·ªçng s·ªë x√°c ƒë·ªãnh t·ª´ qu√° tr√¨nh hu·∫•n luy·ªán, ch·ªâ kh√°c 0 v·ªõi support vectors.  
                  - $K(x_i, x)$: ƒêo ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa m·∫´u m·ªõi v√† support vectors.  
                - V·ªõi ph√¢n lo·∫°i ƒëa l·ªõp ($0$-$9$), SVM √°p d·ª•ng chi·∫øn l∆∞·ª£c nh∆∞ "One-vs-Rest" ho·∫∑c "One-vs-One".  
                """, unsafe_allow_html=True)
                try:
                    svm_step_5 = Image.open("illustrations/svm_step_5.png")
                    st.image(svm_step_5, caption="B∆∞·ªõc 5: D·ª± ƒëo√°n ƒëi·ªÉm m·ªõi d·ª±a tr√™n si√™u ph·∫≥ng v√† support vectors", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `illustrations/svm_step_5.png`.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                st.subheader("‚öôÔ∏è C√°c tham s·ªë ch√≠nh v√† ·ª©ng d·ª•ng")
                st.markdown("""
                - **C**: Tham s·ªë ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô sai s·ªë v√† k√≠ch th∆∞·ªõc l·ªÅ.  
                - **Kernel**: Quy ƒë·ªãnh c√°ch d·ªØ li·ªáu ƒë∆∞·ª£c √°nh x·∫° ƒë·ªÉ ph√¢n t√°ch.  

                **√Åp d·ª•ng v·ªõi MNIST**:  
                - SVM t√¨m ranh gi·ªõi ph√¢n t√°ch d·ª±a tr√™n to√†n b·ªô ƒë·∫∑c tr∆∞ng pixel, t·∫≠n d·ª•ng kernel ƒë·ªÉ x·ª≠ l√Ω c√°c m·∫´u phi tuy·∫øn.  
                """, unsafe_allow_html=True)

                st.subheader("üü™ ∆Øu ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm")
                st.markdown("""
                - **‚úÖ ∆Øu ƒëi·ªÉm**:  
                  - Hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p, ch√≠nh x√°c cao khi c√≥ kernel ph√π h·ª£p.  
                  - T·ªët cho vi·ªác ph√¢n bi·ªát c√°c ch·ªØ s·ªë nh∆∞ "$4$" v√† "$9$".  
                - **‚ùå Nh∆∞·ª£c ƒëi·ªÉm**:  
                  - T·ªën th·ªùi gian t√≠nh to√°n v·ªõi d·ªØ li·ªáu l·ªõn.  
                  - Y√™u c·∫ßu chu·∫©n h√≥a d·ªØ li·ªáu tr∆∞·ªõc ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£ t·ªëi ∆∞u.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "So s√°nh Decision Tree v√† SVM":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 5. So s√°nh Decision Tree v√† SVM")
                st.markdown("""
                | **Y·∫øu t·ªë**             | **Decision Tree**                                  | **SVM**                                      |
                |-------------------------|---------------------------------------------------|---------------------------------------------|
                | **Nguy√™n l√Ω**          | Chia d·ªØ li·ªáu b·∫±ng c√°c ƒëi·ªÅu ki·ªán logic             | T√¨m si√™u ph·∫≥ng t·ªëi ∆∞u ph√¢n t√°ch l·ªõp         |
                | **Quy·∫øt ƒë·ªãnh**         | D·ª±a tr√™n Entropy ho·∫∑c Gini t·∫°i m·ªói b∆∞·ªõc          | D·ª±a tr√™n kho·∫£ng c√°ch l·ªÅ v√† support vectors  |
                | **Kh√¥ng gian**         | L√†m vi·ªác tr·ª±c ti·∫øp tr√™n d·ªØ li·ªáu g·ªëc               | C√≥ th·ªÉ √°nh x·∫° l√™n kh√¥ng gian cao h∆°n (kernel)|
                | **ƒê·ªô ph·ª©c t·∫°p**        | TƒÉng theo ƒë·ªô s√¢u c√¢y                              | TƒÉng theo s·ªë l∆∞·ª£ng support vectors          |

                **K·∫øt lu·∫≠n**:  
                - **Decision Tree**: Nhanh, d·ªÖ hi·ªÉu, ph√π h·ª£p v·ªõi d·ªØ li·ªáu nh·ªè ho·∫∑c ƒë∆°n gi·∫£n, nh∆∞ng d·ªÖ b·ªã overfitting.  
                - **SVM**: Ch√≠nh x√°c h∆°n v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p, phi tuy·∫øn nh∆∞ MNIST, nh∆∞ng ch·∫≠m h∆°n v√† c·∫ßn chu·∫©n h√≥a d·ªØ li·ªáu.
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 6. C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)")
                st.markdown("""
                - ƒê·ªô ch√≠nh x√°c (**Accuracy**) ƒëo t·ª∑ l·ªá d·ª± ƒëo√°n ƒë√∫ng:  
                  $$ \\text{Accuracy} = \\frac{\\text{S·ªë m·∫´u d·ª± ƒëo√°n ƒë√∫ng}}{\\text{T·ªïng s·ªë m·∫´u}} $$  
                - **V√≠ d·ª•**: D·ª± ƒëo√°n ƒë√∫ng $92/100$ ·∫£nh ‚Üí $\\text{Accuracy} = 0.92$ (t·ª©c $92\%$).  

                **√ù nghƒ©a**:  
                - **Decision Tree**: ƒêo kh·∫£ nƒÉng chia nh√≥m ƒë√∫ng d·ª±a tr√™n c√°c ƒë·∫∑c tr∆∞ng pixel.  
                - **SVM**: ƒêo hi·ªáu qu·∫£ c·ªßa si√™u ph·∫≥ng trong vi·ªác ph√¢n t√°ch c√°c l·ªõp.
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

    # Tab 2: T·∫£i d·ªØ li·ªáu
    with tab_load:
        st.markdown('<div class="section-title">T·∫£i D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        st.markdown("""
        **T·∫≠p d·ªØ li·ªáu MNIST**: ƒê∆∞·ª£c t·∫£i t·ª´ OpenML. B·∫°n c√≥ th·ªÉ ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ph√π h·ª£p ƒë·ªÉ hu·∫•n luy·ªán.
        """, unsafe_allow_html=True)

        if 'full_data' not in st.session_state:
            if st.button("T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML", type="primary"):
                with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu MNIST..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 101, 20):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang t·∫£i d·ªØ li·ªáu... {i}%")
                        time.sleep(0.1)
                    X, y = fetch_mnist_data()
                    if X is not None:
                        X = np.array(X, dtype=np.float64)
                        y = np.array(y, dtype=np.int32)
                        st.session_state['full_data'] = (X, y)
                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Load"):
                            mlflow.log_param("total_samples", X.shape[0])
                        st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                        st.write(f"K√≠ch th∆∞·ªõc d·ªØ li·ªáu: {X.shape[0]} m·∫´u, {X.shape[1]} ƒë·∫∑c tr∆∞ng")
                        status_text.text("ƒê√£ t·∫£i xong! 100%")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()
                        st.rerun()
        else:
            X_full, y_full = st.session_state['full_data']
            st.subheader("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u")
            st.markdown("""
            - **100 m·∫´u**: Hu·∫•n luy·ªán r·∫•t nhanh, ƒë·ªô ch√≠nh x√°c th·∫•p, ph√π h·ª£p ƒë·ªÉ th·ª≠ nghi·ªám.  
            - **1,000 m·∫´u**: Hu·∫•n luy·ªán nhanh, ƒë·ªô ch√≠nh x√°c trung b√¨nh, ph√π h·ª£p ƒë·ªÉ ki·ªÉm tra c∆° b·∫£n.  
            - **10,000 m·∫´u**: Hu·∫•n luy·ªán kh√° nhanh, ƒë·ªô ch√≠nh x√°c kh√°, c√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† hi·ªáu su·∫•t.  
            - **50,000 m·∫´u**: Hu·∫•n luy·ªán ch·∫≠m, ƒë·ªô ch√≠nh x√°c cao, ph√π h·ª£p cho hu·∫•n luy·ªán chuy√™n s√¢u.  
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)
            with col1:
                sample_options = {
                    "100 m·∫´u (Hu·∫•n luy·ªán r·∫•t nhanh)": 100,
                    "1,000 m·∫´u (Hu·∫•n luy·ªán nhanh)": 1000,
                    "10,000 m·∫´u (Hu·∫•n luy·ªán trung b√¨nh)": 10000,
                    "50,000 m·∫´u (Hu·∫•n luy·ªán ch·∫≠m)": 50000
                }
                selected_option = st.selectbox("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", list(sample_options.keys()), help="Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u c√≥ s·∫µn")
                num_samples = min(sample_options[selected_option], len(X_full))

                if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng (t√πy ch·ªçn c√≥ s·∫µn)", type="primary"):
                    with st.spinner(f"ƒêang l·∫•y {num_samples} m·∫´u..."):
                        indices = np.random.choice(len(X_full), size=num_samples, replace=False)
                        X_sampled = X_full[indices]
                        y_sampled = y_full[indices]
                        st.session_state['data'] = (X_sampled.copy(), y_sampled.copy())
                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample"):
                            mlflow.log_param("num_samples", num_samples)
                        st.success(f"ƒê√£ ch·ªçn {num_samples} m·∫´u!")
                        del X_full, y_full, X_sampled, y_sampled
                        gc.collect()

            with col2:
                custom_num_samples = st.number_input("Nh·∫≠p s·ªë l∆∞·ª£ng t√πy √Ω (t·ªëi ƒëa 70,000):", min_value=1, max_value=70000, value=1000, step=100, help="Nh·∫≠p s·ªë l∆∞·ª£ng m·∫´u t√πy ch·ªânh")
                if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng (t√πy √Ω)", type="primary"):
                    if custom_num_samples <= len(X_full):
                        with st.spinner(f"ƒêang l·∫•y {custom_num_samples} m·∫´u..."):
                            indices = np.random.choice(len(X_full), size=custom_num_samples, replace=False)
                            X_sampled = X_full[indices]
                            y_sampled = y_full[indices]
                            st.session_state['data'] = (X_sampled.copy(), y_sampled.copy())
                            with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample_Custom"):
                                mlflow.log_param("num_samples", custom_num_samples)
                            st.success(f"ƒê√£ ch·ªçn {custom_num_samples} m·∫´u!")
                            del X_full, y_full, X_sampled, y_sampled
                            gc.collect()
                    else:
                        st.error("S·ªë l∆∞·ª£ng m·∫´u v∆∞·ª£t qu√° d·ªØ li·ªáu hi·ªán c√≥. Vui l√≤ng nh·∫≠p s·ªë nh·ªè h∆°n ho·∫∑c b·∫±ng 70,000!")

    # Tab 3: X·ª≠ l√Ω d·ªØ li·ªáu
    with tab_preprocess:
        st.markdown('<div class="section-title">X·ª≠ l√Ω D·ªØ li·ªáu</div>', unsafe_allow_html=True)

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc.")
        else:
            X, y = st.session_state['data']
            if "data_original" not in st.session_state:
                st.session_state["data_original"] = (X.copy(), y.copy())

            st.subheader("D·ªØ li·ªáu G·ªëc")
            fig, axes = plt.subplots(2, 5, figsize=(10, 4))
            for i, ax in enumerate(axes.flat):
                ax.imshow(X[i].reshape(28, 28), cmap='gray')
                ax.set_title(f"Label: {y[i]}")
                ax.axis("off")
            st.pyplot(fig)
            plt.close(fig)

            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button("Chu·∫©n h√≥a d·ªØ li·ªáu (Normalization)", type="primary", help="Chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ thang [0, 1]"):
                    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 1]..."):
                        X_norm = X / 255.0
                        st.session_state["data_processed"] = (X_norm.copy(), y.copy())
                        st.success("ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu!")
                        del X, y, X_norm
                        gc.collect()
                        st.rerun()
            with col2:
                st.markdown("""
                    <div class="tooltip">? (Norm)
                        <span class="tooltiptext">
                            ƒê∆∞a d·ªØ li·ªáu v·ªÅ $[0, 1]$ b·∫±ng c√°ch chia cho $255$.<br>
                            C√¥ng d·ª•ng: ƒê·∫£m b·∫£o thang ƒëo ƒë·ªìng nh·∫•t, ƒë·∫∑c bi·ªát c·∫ßn cho SVM.
                        </span>
                    </div>
                """, unsafe_allow_html=True)

            if "data_processed" in st.session_state:
                X_processed, y_processed = st.session_state["data_processed"]
                st.success("ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu!")
                st.subheader("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
                fig, axes = plt.subplots(2, 5, figsize=(10, 4))
                for i, ax in enumerate(axes.flat):
                    ax.imshow(X_processed[i].reshape(28, 28), cmap='gray')
                    ax.set_title(f"Label: {y_processed[i]}")
                    ax.axis("off")
                st.pyplot(fig)
                plt.close(fig)

    # Tab 4: Chia d·ªØ li·ªáu
    with tab_split:
        st.markdown('<div class="section-title">Chia T·∫≠p D·ªØ li·ªáu</div>', unsafe_allow_html=True)

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng ch·ªçn v√† x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            data_source = st.session_state.get('data_processed', st.session_state['data'])
            X, y = data_source
            total_samples = len(X)
            st.write(f"T·ªïng s·ªë m·∫´u: {total_samples}")

            col1, col2 = st.columns(2)
            with col1:
                test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20, help="T·ª∑ l·ªá d·ªØ li·ªáu d√πng ƒë·ªÉ ki·ªÉm tra m√¥ h√¨nh")
            with col2:
                valid_pct = st.slider("T·ª∑ l·ªá Validation (%)", 0, 50, 20, help="T·ª∑ l·ªá d·ªØ li·ªáu d√πng ƒë·ªÉ x√°c th·ª±c m√¥ h√¨nh")

            test_size = test_pct / 100
            X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
            valid_size = (valid_pct / 100) / (1 - test_size) if test_size < 1 else 0
            X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=valid_size, random_state=42)

            st.write(f"**Ph√¢n b·ªï d·ªØ li·ªáu**: Train: {len(X_train)}, Validation: {len(X_valid)}, Test: {len(X_test)}")
            if st.button("X√°c nh·∫≠n ph√¢n chia", type="primary"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    st.session_state['split_data'] = {
                        "X_train": X_train.copy(), "y_train": y_train.copy(),
                        "X_valid": X_valid.copy(), "y_valid": y_valid.copy(),
                        "X_test": X_test.copy(), "y_test": y_test.copy()
                    }
                    st.success("ƒê√£ chia d·ªØ li·ªáu th√†nh c√¥ng!")
                    del X, y, X_temp, y_temp, X_test, y_test, X_train, X_valid, y_train, y_valid
                    gc.collect()

    # Tab 5: Hu·∫•n luy·ªán/ƒê√°nh gi√°
    with tab_train_eval:
        st.markdown('<div class="section-title">Hu·∫•n luy·ªán v√† ƒê√°nh gi√° M√¥ h√¨nh</div>', unsafe_allow_html=True)

        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            split_data = st.session_state['split_data'].copy()
            X_train = split_data["X_train"]
            y_train = split_data["y_train"]
            X_valid = split_data["X_valid"]
            y_valid = split_data["y_valid"]
            X_test = split_data["X_test"]
            y_test = split_data["y_test"]

            X_train = np.array(X_train, dtype=np.float64)
            y_train = np.array(y_train, dtype=np.int32)
            X_valid = np.array(X_valid, dtype=np.float64)
            y_valid = np.array(y_valid, dtype=np.int32)
            X_test = np.array(X_test, dtype=np.float64)
            y_test = np.array(y_test, dtype=np.int32)

            num_samples = len(X_train)
            st.write(f"**S·ªë m·∫´u hu·∫•n luy·ªán**: {num_samples}")

            model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh:", ["Decision Tree", "SVM"], help="Ch·ªçn Decision Tree ho·∫∑c SVM ƒë·ªÉ hu·∫•n luy·ªán.")

            def get_optimal_params(num_samples, model_choice):
                if model_choice == "Decision Tree":
                    if num_samples <= 1000:
                        return {"criterion": "gini", "max_depth": 5}
                    elif num_samples <= 5000:
                        return {"criterion": "gini", "max_depth": 10}
                    elif num_samples <= 50000:
                        return {"criterion": "gini", "max_depth": 20}
                    else:
                        return {"criterion": "gini", "max_depth": 30}
                else:  # SVM
                    if num_samples <= 1000:
                        return {"C": 0.1, "kernel": "rbf"}
                    elif num_samples <= 5000:
                        return {"C": 1.0, "kernel": "rbf"}
                    elif num_samples <= 50000:
                        return {"C": 5.0, "kernel": "rbf"}
                    else:
                        return {"C": 10.0, "kernel": "rbf"}

            if f"optimal_params_{model_choice}" not in st.session_state:
                st.session_state[f"optimal_params_{model_choice}"] = get_optimal_params(num_samples, model_choice)
            params = st.session_state.get(f"training_params_{model_choice}", st.session_state[f"optimal_params_{model_choice}"].copy())

            st.subheader("‚öôÔ∏è C·∫•u h√¨nh Tham s·ªë M√¥ h√¨nh")
            if model_choice == "Decision Tree":
                st.markdown("""
                | S·ªë m·∫´u       | Criterion | Max Depth |
                |--------------|-----------|-----------|
                | ‚â§ 1,000      | gini      | 5         |
                | 1,000-5,000  | gini      | 10        |
                | 5,000-50,000 | gini      | 20        |
                | > 50,000     | gini      | 30        |
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                | S·ªë m·∫´u       | C    | Kernel |
                |--------------|------|--------|
                | ‚â§ 1,000      | 0.1  | rbf    |
                | 1,000-5,000  | 1.0  | rbf    |
                | 5,000-50,000 | 5.0  | rbf    |
                | > 50,000     | 10.0 | rbf    |
                """, unsafe_allow_html=True)
            st.info(f"Tham s·ªë t·ªëi ∆∞u cho {num_samples} m·∫´u: {st.session_state[f'optimal_params_{model_choice}']}")

            col_param1, col_param2 = st.columns(2)
            with col_param1:
                with st.expander("üß† C·∫•u tr√∫c M√¥ h√¨nh", expanded=True):
                    st.markdown(f"**T√πy ch·ªânh tham s·ªë cho {model_choice}**", unsafe_allow_html=True)
                    if model_choice == "Decision Tree":
                        params["criterion"] = st.selectbox("Criterion", ["gini", "entropy"], 
                                                          index=["gini", "entropy"].index(params["criterion"]),
                                                          help="Ch·ªçn ti√™u ch√≠ chia nh√°nh: Gini ho·∫∑c Entropy.")
                        params["max_depth"] = st.number_input("Max Depth", min_value=1, max_value=100, value=params["max_depth"],
                                                             help="ƒê·ªô s√¢u t·ªëi ƒëa c·ªßa c√¢y (1-100).")
                    else:
                        params["C"] = st.number_input("C", min_value=0.01, max_value=100.0, value=params["C"],
                                                     help="Tham s·ªë ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô sai s·ªë v√† l·ªÅ.")
                        params["kernel"] = st.selectbox("Kernel", ["linear", "rbf", "poly", "sigmoid"],
                                                       index=["linear", "rbf", "poly", "sigmoid"].index(params["kernel"]),
                                                       help="Lo·∫°i kernel cho SVM: Linear, RBF, Polynomial, Sigmoid.")

            with col_param2:
                with st.expander("üîß T·ªëi ∆∞u h√≥a", expanded=True):
                    st.markdown("**C·∫•u h√¨nh hu·∫•n luy·ªán**", unsafe_allow_html=True)
                    if st.button("üîÑ Kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u", key=f"reset_params_{model_choice}"):
                        st.session_state[f"training_params_{model_choice}"] = st.session_state[f"optimal_params_{model_choice}"].copy()
                        st.success("ƒê√£ kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u!")
                        st.rerun()

            st.session_state[f"training_params_{model_choice}"] = params

            col_reset, col_train = st.columns([1, 3])
            with col_train:
                if st.button("üöÄ B·∫Øt ƒë·∫ßu Hu·∫•n luy·ªán", type="primary", key="start_training"):
                    try:
                        with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                            start_time = time.time()
                            progress_bar = st.progress(0)
                            status_text = st.empty()

                            status_text.text("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu... 20%")
                            progress_bar.progress(20)
                            time.sleep(0.1)

                            if model_choice == "Decision Tree":
                                pipeline = Pipeline([
                                    ('imputer', SimpleImputer(strategy='mean')),
                                    ('classifier', DecisionTreeClassifier(**params))
                                ])
                            else:
                                pipeline = Pipeline([
                                    ('imputer', SimpleImputer(strategy='mean')),
                                    ('classifier', SVC(probability=True, **params))
                                ])

                            status_text.text("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh... 50%")
                            progress_bar.progress(50)
                            pipeline.fit(X_train, y_train)

                            status_text.text("ƒêang ƒë√°nh gi√° m√¥ h√¨nh... 90%")
                            progress_bar.progress(90)
                            y_valid_pred = pipeline.predict(X_valid)
                            y_test_pred = pipeline.predict(X_test)
                            acc_valid = accuracy_score(y_valid, y_valid_pred)
                            acc_test = accuracy_score(y_test, y_test_pred)
                            cm_valid = confusion_matrix(y_valid, y_valid_pred)
                            cm_test = confusion_matrix(y_test, y_test_pred)

                            run_name = f"{model_choice}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                            with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=run_name) as run:
                                mlflow.log_params(params)
                                mlflow.log_metric("accuracy_val", acc_valid)
                                mlflow.log_metric("accuracy_test", acc_test)
                                mlflow.log_metric("training_time", time.time() - start_time)
                                mlflow.sklearn.log_model(pipeline, "model")

                                st.session_state['model'] = pipeline
                                st.session_state['training_results'] = {
                                    'accuracy_val': acc_valid, 'accuracy_test': acc_test,
                                    'cm_valid': cm_valid, 'cm_test': cm_test,
                                    'run_name': run_name, 'run_id': run.info.run_id,
                                    'params': params, 'training_time': time.time() - start_time,
                                    'model_choice': model_choice
                                }

                            status_text.text("ƒê√£ ho√†n t·∫•t hu·∫•n luy·ªán! 100%")
                            progress_bar.progress(100)
                            st.success(f"ƒê√£ hu·∫•n luy·ªán xong! Th·ªùi gian: {time.time() - start_time:.2f} gi√¢y")
                            del X_train, y_train, X_valid, y_valid, X_test, y_test, split_data
                            gc.collect()
                            st.rerun()

                    except Exception as e:
                        st.error(f"L·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán: {e}")

            if 'training_results' in st.session_state and st.session_state['training_results']['model_choice'] == model_choice:
                results = st.session_state['training_results']
                st.subheader("üìä K·∫øt qu·∫£ Hu·∫•n luy·ªán")
                col_result1, col_result2, col_result3 = st.columns(3)
                with col_result1:
                    st.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{results['training_time']:.2f} gi√¢y")
                with col_result2:
                    st.metric("ƒê·ªô ch√≠nh x√°c Validation", f"{results['accuracy_val']*100:.2f}%")
                with col_result3:
                    st.metric("ƒê·ªô ch√≠nh x√°c Test", f"{results['accuracy_test']*100:.2f}%")

                st.subheader("üìà Ma tr·∫≠n Nh·∫ßm l·∫´n")
                st.markdown("""
                - Ma tr·∫≠n nh·∫ßm l·∫´n cho th·∫•y s·ªë l∆∞·ª£ng d·ª± ƒëo√°n ƒë√∫ng v√† sai c·ªßa m√¥ h√¨nh cho t·ª´ng l·ªõp ($0$-$9$):  
                  - **H√†ng**: Nh√£n th·ª±c t·∫ø.  
                  - **C·ªôt**: Nh√£n d·ª± ƒëo√°n.  
                  - **S·ªë tr√™n ƒë∆∞·ªùng ch√©o**: S·ªë m·∫´u d·ª± ƒëo√°n ƒë√∫ng.  
                  - **S·ªë ngo√†i ƒë∆∞·ªùng ch√©o**: S·ªë m·∫´u d·ª± ƒëo√°n sai (nh·∫ßm l·∫´n gi·ªØa c√°c l·ªõp).  
                """, unsafe_allow_html=True)
                col_cm1, col_cm2 = st.columns(2)
                with col_cm1:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_valid'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Validation")
                    st.pyplot(fig)
                    plt.close(fig)
                with col_cm2:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_test'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Test")
                    st.pyplot(fig)
                    plt.close(fig)

                with st.expander("Xem chi ti·∫øt", expanded=False):
                    st.markdown("**Th√¥ng tin l·∫ßn ch·∫°y:**")
                    st.write(f"- T√™n: {results['run_name']}")
                    st.write(f"- ID: {results['run_id']}")
                    st.write(f"- Th·ªùi gian hu·∫•n luy·ªán: {results['training_time']:.2f} gi√¢y")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Validation: {results['accuracy_val']*100:.2f}%")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Test: {results['accuracy_test']*100:.2f}%")
                    st.markdown("**Tham s·ªë ƒë√£ ch·ªçn:**")
                    st.json(results['params'])

    # Tab 6: Demo d·ª± ƒëo√°n
    with tab_demo:
        st.markdown('<div class="section-title">Demo D·ª± ƒëo√°n Ch·ªØ s·ªë</div>', unsafe_allow_html=True)
        st.header("D·ª± ƒëo√°n s·ªë vi·∫øt tay")
        st.write("Ch·ªçn c√°ch nh·∫≠p li·ªáu: t·∫£i l√™n h√¨nh ·∫£nh, s·ª≠ d·ª•ng d·ªØ li·ªáu Test ho·∫∑c v·∫Ω tr·ª±c ti·∫øp.")

        if 'split_data' not in st.session_state or 'model' not in st.session_state:
            st.warning("‚ö†Ô∏è Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc trong tab 'Hu·∫•n luy·ªán/ƒê√°nh gi√°'!")
        else:
            model_choice = st.session_state['training_results']['model_choice']
            st.write(f"**M√¥ h√¨nh hi·ªán t·∫°i**: {model_choice}")
            model = st.session_state['model']

            input_method = st.selectbox("Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p li·ªáu", ["T·∫£i ·∫£nh l√™n", "D·ªØ li·ªáu Test", "V·∫Ω tr·ª±c ti·∫øp"])
            is_normalized = 'data_processed' in st.session_state

            def preprocess_input(data, is_normalized):
                data, fixed = validate_and_fix_pixels(data)
                if fixed:
                    st.success("ƒê√£ chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 255]!")
                if not is_normalized:
                    data = data / 255.0
                return data

            if input_method == "T·∫£i ·∫£nh l√™n":
                st.markdown('<p class="mode-title">D·ª± ƒëo√°n t·ª´ ·∫¢nh T·∫£i l√™n</p>', unsafe_allow_html=True)
                uploaded_images = st.file_uploader("T·∫£i l√™n h√¨nh ·∫£nh", type=["png", "jpg"], accept_multiple_files=True)
                if uploaded_images:
                    for i, uploaded_image in enumerate(uploaded_images):
                        try:
                            img = Image.open(uploaded_image).convert('L').resize((28, 28))
                            img_array = np.array(img).flatten().reshape(1, -1)
                            col_img, col_btn = st.columns([1, 2])
                            with col_img:
                                st.image(img, caption=f"·∫¢nh {i+1}", width=150)
                            with col_btn:
                                if st.button(f"D·ª± ƒëo√°n ·∫£nh {i+1}", key=f"predict_upload_{i}"):
                                    with st.spinner(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}..."):
                                        img_processed = preprocess_input(img_array, is_normalized)
                                        prediction = model.predict(img_processed)[0]
                                        proba = model.predict_proba(img_processed)[0]
                                        max_proba = np.max(proba) * 100
                                        st.markdown(f"""
                                            <div class="prediction-box">
                                                <strong>D·ª± ƒëo√°n:</strong> {prediction}<br>
                                                <strong>ƒê·ªô tin c·∫≠y:</strong> {max_proba:.2f}%
                                            </div>
                                        """, unsafe_allow_html=True)
                                        st.success(f"D·ª± ƒëo√°n ·∫£nh {i+1} ho√†n t·∫•t!")
                                        del img, img_array, img_processed
                                        gc.collect()
                        except Exception as e:
                            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh {i+1}: {e}")

            elif input_method == "D·ªØ li·ªáu Test":
                st.markdown('<p class="mode-title">D·ª± ƒëo√°n t·ª´ D·ªØ li·ªáu Test</p>', unsafe_allow_html=True)
                X_test = st.session_state['split_data']["X_test"]
                y_test = st.session_state['split_data']["y_test"]
                if len(X_test) == 0:
                    st.warning("T·∫≠p Test r·ªóng. Vui l√≤ng chia l·∫°i d·ªØ li·ªáu v·ªõi t·ª∑ l·ªá Test > 0%.")
                else:
                    col_select, col_display = st.columns([3, 2])
                    with col_select:
                        idx = st.slider("Ch·ªçn m·∫´u Test", 0, min(len(X_test) - 1, 100), 0)
                    with col_display:
                        st.write("**·∫¢nh m·∫´u Test:**")
                        fig, ax = plt.subplots(figsize=(2, 2))
                        ax.imshow(X_test[idx].reshape(28, 28), cmap='gray')
                        ax.axis('off')
                        st.pyplot(fig)
                        plt.close(fig)
                        st.write(f"**Nh√£n th·ª±c t·∫ø:** {y_test[idx]}")

                    if st.button("üîç D·ª± ƒëo√°n", key="predict_test"):
                        with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                            sample = X_test[idx].reshape(1, -1)
                            sample_processed = preprocess_input(sample, is_normalized)
                            prediction = model.predict(sample_processed)[0]
                            proba = model.predict_proba(sample_processed)[0]
                            max_proba = np.max(proba) * 100
                            st.markdown(f"""
                                <div class="prediction-box">
                                    <strong>D·ª± ƒëo√°n:</strong> {prediction}<br>
                                    <strong>ƒê·ªô tin c·∫≠y:</strong> {max_proba:.2f}%<br>
                                    <strong>Nh√£n th·ª±c t·∫ø:</strong> {y_test[idx]}
                                </div>
                            """, unsafe_allow_html=True)
                            st.success("D·ª± ƒëo√°n ho√†n t·∫•t!")
                            del sample, sample_processed
                            gc.collect()

            elif input_method == "V·∫Ω tr·ª±c ti·∫øp":
                st.markdown('<p class="mode-title">V·∫Ω tr·ª±c ti·∫øp</p>', unsafe_allow_html=True)
                st.write("V·∫Ω ch·ªØ s·ªë t·ª´ 0-9 (n√©t tr·∫Øng tr√™n n·ªÅn ƒëen):")

                if 'canvas_key' not in st.session_state:
                    st.session_state['canvas_key'] = 0

                canvas_result = st_canvas(
                    fill_color="rgba(255, 165, 0, 0.3)",
                    stroke_width=20,
                    stroke_color="#FFFFFF",
                    background_color="#000000",
                    height=280,
                    width=280,
                    drawing_mode="freedraw",
                    key=f"canvas_{st.session_state['canvas_key']}"
                )

                if canvas_result.image_data is not None:
                    image = Image.fromarray(canvas_result.image_data[:, :, 3].astype('uint8'), 'L')
                    image_resized = image.resize((28, 28))
                    st.image(image_resized, caption="H√¨nh ·∫£nh b·∫°n v·∫Ω (resize 28x28)", width=100)

                    col_pred, col_clear = st.columns([2, 1])
                    with col_pred:
                        if st.button("D·ª± ƒëo√°n", key="predict_button"):
                            with st.spinner("ƒêang x·ª≠ l√Ω h√¨nh v·∫Ω..."):
                                image_array = np.array(image_resized, dtype=np.float32).flatten().reshape(1, -1)
                                image_processed = preprocess_input(image_array, is_normalized)
                                prediction = model.predict(image_processed)[0]
                                proba = model.predict_proba(image_processed)[0]
                                predicted_class = int(prediction)
                                confidence = proba[predicted_class] * 100
                                st.markdown(f"""
                                    <div class="prediction-box">
                                        <strong>D·ª± ƒëo√°n:</strong> {predicted_class}<br>
                                        <strong>ƒê·ªô tin c·∫≠y:</strong> {confidence:.2f}%
                                    </div>
                                """, unsafe_allow_html=True)
                                st.success("D·ª± ƒëo√°n ho√†n t·∫•t!")
                                del image, image_resized, image_array, image_processed
                                gc.collect()

                    with col_clear:
                        if st.button("X√≥a b·∫£n v·∫Ω", key="clear_button"):
                            st.session_state['canvas_key'] += 1
                            st.rerun()

    # Tab 7: Th√¥ng tin hu·∫•n luy·ªán
    with tab_log_info:
        st.markdown('<div class="section-title">Theo d√µi K·∫øt qu·∫£</div>', unsafe_allow_html=True)
        try:
            with st.spinner("ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán..."):
                client = MlflowClient()
                runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])
                if not runs:
                    st.info(f"Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o trong Experiment ID {EXPERIMENT_ID}.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    selected_run_name = st.selectbox("Ch·ªçn run:", list(run_options.values()))
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi:", value=selected_run_name)
                    if st.button("C·∫≠p nh·∫≠t t√™n"):
                        client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                        st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                        st.rerun()

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y"):
                        client.delete_run(selected_run_id)
                        st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                        st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt")
                    st.write(f"**T√™n:** {selected_run_name}")
                    st.write(f"**ID:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")
                    
                    st.markdown("**Tham s·ªë hu·∫•n luy·ªán:**")
                    st.json(selected_run.data.params, expanded=True)
                    
                    st.markdown("**S·ªë li·ªáu hu·∫•n luy·ªán:**")
                    st.json(selected_run.data.metrics, expanded=True)

                    mlflow_ui_link = f"{mlflow_tracking_uri}/#/experiments/{EXPERIMENT_ID}"
                    st.markdown("---")
                    st.markdown(f"üìä **Xem chi ti·∫øt tr√™n MLflow UI**: [Nh·∫•n v√†o ƒë√¢y]({mlflow_ui_link})", unsafe_allow_html=True)

        except Exception as e:
            st.error(f"L·ªói khi t·∫£i th√¥ng tin hu·∫•n luy·ªán: {e}")

if __name__ == "__main__":
    run_mnist_classification_app()