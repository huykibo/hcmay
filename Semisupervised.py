import os
import mlflow
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time
import requests
import io
import sys
import tensorflow as tf
from tensorflow.keras import layers, models, callbacks
import gc

# H√†m ch·ªçn tham s·ªë t·ªëi ∆∞u d·ª±a tr√™n s·ªë m·∫´u cho Pseudo-Labeling v·ªõi Neural Network
def get_optimal_params(num_samples):
    if num_samples <= 1000:
        return {
            "hidden_layer_sizes": (32,),
            "learning_rate": 0.001,
            "epochs": 30,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 32,
            "threshold": 0.9,
            "max_iterations": 3
        }
    elif num_samples <= 10000:
        return {
            "hidden_layer_sizes": (64, 32),
            "learning_rate": 0.0005,
            "epochs": 50,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 64,
            "threshold": 0.95,
            "max_iterations": 5
        }
    elif num_samples <= 50000:
        return {
            "hidden_layer_sizes": (128, 64),
            "learning_rate": 0.0003,
            "epochs": 70,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 128,
            "threshold": 0.97,
            "max_iterations": 7
        }
    else:
        return {
            "hidden_layer_sizes": (128, 64, 32),
            "learning_rate": 0.0001,
            "epochs": 100,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 256,
            "threshold": 0.98,
            "max_iterations": 10
        }

def run_mnist_pseudo_labeling_app():
    # Thi·∫øt l·∫≠p MLflow
    mlflow_tracking_uri = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(mlflow_tracking_uri)
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets.")
        st.stop()

    try:
        response = requests.get(mlflow_tracking_uri, timeout=5)
        if response.status_code != 200:
            st.error(f"K·∫øt n·ªëi MLflow th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}.")
            st.stop()
    except requests.exceptions.RequestException as e:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi MLflow: {e}.")
        st.stop()

    EXPERIMENT_ID = "6"
    try:
        client = MlflowClient()
        experiment = client.get_experiment(EXPERIMENT_ID)
        if experiment is None:
            st.error(f"Experiment ID {EXPERIMENT_ID} kh√¥ng t·ªìn t·∫°i.")
            st.stop()
    except Exception as e:
        st.error(f"L·ªói truy xu·∫•t Experiment ID {EXPERIMENT_ID}: {e}.")
        st.stop()

    st.title("Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Neural Network v√† Pseudo-Labeling")

    # CSS t√πy ch·ªânh
    st.markdown("""
        <style>
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: pointer;
                color: #1f77b4;
                font-weight: bold;
                margin-left: 5px;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 400px;
                background-color: #f9f9f9;
                color: #333;
                text-align: left;
                border-radius: 6px;
                padding: 10px;
                position: absolute;
                z-index: 1;
                right: 105%;
                top: 50%;
                transform: translateY(-50%);
                opacity: 0;
                transition: opacity 0.3s;
                border: 1px solid #ccc;
                font-size: 0.9em;
                line-height: 1.4;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
            .section-title {
                font-size: 1.5em;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            .info-box {
                background-color: #f8f9fa;
                padding: 10px;
                border-left: 4px solid #3498db;
                margin-bottom: 15px;
            }
            .action-container {
                background-color: #ffffff;
                padding: 15px;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                margin-bottom: 20px;
            }
            .prediction-box {
                margin-top: 10px;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                background-color: #f9f9f9;
            }
            .mode-title {
                font-size: 1.2em;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            .stCanvas {
                border: 1px solid #ddd;
                border-radius: 5px;
            }
        </style>
    """, unsafe_allow_html=True)

    # Gi·∫£ l·∫≠p d·ªØ li·ªáu MNIST n·∫øu ch∆∞a c√≥ trong session_state
    if 'full_data' not in st.session_state:
        (X_train_full, y_train_full), (X_test_full, y_test_full) = tf.keras.datasets.mnist.load_data()
        X_full = np.concatenate([X_train_full, X_test_full], axis=0).reshape(-1, 784)
        y_full = np.concatenate([y_train_full, y_test_full], axis=0)
        st.session_state['full_data'] = (X_full, y_full)

    tabs = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "X·ª≠ l√Ω d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", "Hu·∫•n luy·ªán/ƒê√°nh gi√°", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"])
    tab_info, tab_load, tab_preprocess, tab_split, tab_train_eval, tab_demo, tab_log_info = tabs

    # Tab 1: Th√¥ng tin
    with tab_info:
        st.header("Gi·ªõi thi·ªáu ·ª®ng d·ª•ng Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Neural Network v√† Pseudo-Labeling")
        st.markdown("""
        Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ t·∫≠p d·ªØ li·ªáu **MNIST** s·ª≠ d·ª•ng **M·∫°ng n∆°-ron nh√¢n t·∫°o (Neural Network)** k·∫øt h·ª£p v·ªõi k·ªπ thu·∫≠t **Pseudo-Labeling**. ·ª®ng d·ª•ng n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ cung c·∫•p tr·∫£i nghi·ªám tr·ª±c quan, h·ªó tr·ª£ h·ªçc t·∫≠p v√† nghi√™n c·ª©u v·ªÅ c√°c thu·∫≠t to√°n h·ªçc m√°y hi·ªán ƒë·∫°i.
        """, unsafe_allow_html=True)

        st.subheader("Ch·ªçn n·ªôi dung ƒë·ªÉ kh√°m ph√°")
        info_option = st.selectbox(
            "",
            [
                "T·ªïng quan v·ªÅ ·ª©ng d·ª•ng v√† m·ª•c ti√™u",
                "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a",
                "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o",
                "Pseudo-Labeling ‚Äì K·ªπ thu·∫≠t h·ªçc b√°n gi√°m s√°t"
            ],
            label_visibility="collapsed",
            help="Kh√°m ph√° chi ti·∫øt v·ªÅ ·ª©ng d·ª•ng, d·ªØ li·ªáu, m√¥ h√¨nh v√† k·ªπ thu·∫≠t Pseudo-Labeling."
        )

        if info_option == "T·ªïng quan v·ªÅ ·ª©ng d·ª•ng v√† m·ª•c ti√™u":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i n·ªôi dung... {i}%")
                    time.sleep(0.05)
                st.subheader("üìå T·ªïng quan v·ªÅ ·ª©ng d·ª•ng v√† m·ª•c ti√™u")
                st.markdown("""
                ·ª®ng d·ª•ng n√†y t·∫≠p trung v√†o vi·ªác ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay d·ª±a tr√™n t·∫≠p d·ªØ li·ªáu **MNIST**, m·ªôt b·ªô d·ªØ li·ªáu ti√™u chu·∫©n trong lƒ©nh v·ª±c h·ªçc m√°y. K·∫øt h·ª£p **Neural Network** v√† **Pseudo-Labeling**, ·ª©ng d·ª•ng kh√¥ng ch·ªâ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t m√¥ h√¨nh m√† c√≤n t·∫≠n d·ª•ng d·ªØ li·ªáu kh√¥ng c√≥ nh√£n ƒë·ªÉ n√¢ng cao kh·∫£ nƒÉng h·ªçc t·∫≠p.

                **M·ª•c ti√™u ch√≠nh:**
                - Ph√°t tri·ªÉn m·ªôt m√¥ h√¨nh Neural Network c√≥ kh·∫£ nƒÉng nh·∫≠n di·ªán ch√≠nh x√°c c√°c ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9.
                - √Åp d·ª•ng k·ªπ thu·∫≠t Pseudo-Labeling ƒë·ªÉ khai th√°c d·ªØ li·ªáu kh√¥ng c√≥ nh√£n, m√¥ ph·ªèng c√°c t√¨nh hu·ªëng th·ª±c t·∫ø khi d·ªØ li·ªáu c√≥ nh√£n h·∫°n ch·∫ø.
                - Cung c·∫•p giao di·ªán tr·ª±c quan ƒë·ªÉ ng∆∞·ªùi d√πng th·ª±c h√†nh, ƒë√°nh gi√° v√† t√πy ch·ªânh m√¥ h√¨nh.

                **Th√¥ng tin c∆° b·∫£n v·ªÅ d·ªØ li·ªáu:**
                - **Quy m√¥:** 70,000 ·∫£nh, m·ªói ·∫£nh k√≠ch th∆∞·ªõc 28x28 pixel (t·ªïng c·ªông 784 ƒë·∫∑c tr∆∞ng).
                - **ƒê·∫∑c tr∆∞ng:** Gi√° tr·ªã pixel t·ª´ 0 ƒë·∫øn 255, bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng vector 784 chi·ªÅu.
                - **Nhi·ªám v·ª•:** D·ª± ƒëo√°n nh√£n t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9.
                """, unsafe_allow_html=True)
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i n·ªôi dung... {i}%")
                    time.sleep(0.05)
                st.subheader("üìå T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a")
                st.markdown("""
                **MNIST** l√† m·ªôt t·∫≠p d·ªØ li·ªáu ti√™u chu·∫©n trong h·ªçc m√°y, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Yann LeCun v√† c√°c c·ªông s·ª±, th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë√°nh gi√° hi·ªáu su·∫•t c·ªßa c√°c m√¥ h√¨nh ph√¢n lo·∫°i.

                **ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t:**
                - **Ngu·ªìn g·ªëc:** Bao g·ªìm ·∫£nh ch·ªØ s·ªë vi·∫øt tay t·ª´ h·ªçc sinh trung h·ªçc v√† nh√¢n vi√™n ƒëi·ªÅu tra d√¢n s·ªë Hoa K·ª≥.
                - **K√≠ch th∆∞·ªõc:** M·ªói ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i 28x28 pixel, thang ƒë·ªô x√°m v·ªõi gi√° tr·ªã t·ª´ 0 ƒë·∫øn 255.
                - **Quy m√¥:** T·ªïng c·ªông 70,000 ·∫£nh, chia th√†nh t·∫≠p hu·∫•n luy·ªán (60,000 ·∫£nh) v√† t·∫≠p ki·ªÉm tra (10,000 ·∫£nh).

                **√ù nghƒ©a:**
                - L√† n·ªÅn t·∫£ng l√Ω t∆∞·ªüng ƒë·ªÉ th·ª≠ nghi·ªám c√°c thu·∫≠t to√°n h·ªçc m√°y, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.
                - Gi√∫p ƒë√°nh gi√° kh·∫£ nƒÉng ph√¢n bi·ªát c√°c l·ªõp t∆∞∆°ng t·ª± (v√≠ d·ª•: 4 v√† 9) trong c√°c m√¥ h√¨nh Neural Network.
                - H·ªó tr·ª£ nghi√™n c·ª©u v√† ƒë√†o t·∫°o cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu l·∫´n c√°c chuy√™n gia trong lƒ©nh v·ª±c h·ªçc s√¢u.
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                    time.sleep(0.05)
                st.subheader("üìä Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o")
                st.markdown("""
                **Neural Network (M·∫°ng n∆°-ron nh√¢n t·∫°o)** l√† m·ªôt m√¥ h√¨nh h·ªçc m√°y m√¥ ph·ªèng c√°ch ho·∫°t ƒë·ªông c·ªßa m·∫°ng n∆°-ron sinh h·ªçc trong n√£o ng∆∞·ªùi. N√≥ ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ h·ªçc c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p t·ª´ d·ªØ li·ªáu, ƒë·∫∑c bi·ªát hi·ªáu qu·∫£ v·ªõi b√†i to√°n nh·∫≠n di·ªán h√¨nh ·∫£nh nh∆∞ MNIST.
                """, unsafe_allow_html=True)
                st.subheader("üåê C·∫•u tr√∫c c∆° b·∫£n c·ªßa Neural Network")
                st.markdown("""
                - **L·ªõp ƒë·∫ßu v√†o (Input Layer)**: Nh·∫≠n d·ªØ li·ªáu th√¥ (v√≠ d·ª•: $784$ pixel t·ª´ ·∫£nh MNIST $28 \\times 28$).  
                - **L·ªõp ·∫©n (Hidden Layers)**: X·ª≠ l√Ω th√¥ng tin th√¥ng qua c√°c ph√©p t√≠nh tuy·∫øn t√≠nh v√† phi tuy·∫øn.  
                - **L·ªõp ƒë·∫ßu ra (Output Layer)**: ƒê∆∞a ra d·ª± ƒëo√°n (10 l·ªõp, t∆∞∆°ng ·ª©ng v·ªõi c√°c ch·ªØ s·ªë $0$-$9$).  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "Pseudo-Labeling ‚Äì K·ªπ thu·∫≠t h·ªçc b√°n gi√°m s√°t":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 101, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i n·ªôi dung... {i}%")
                    time.sleep(0.05)
                st.subheader("üìå Pseudo-Labeling ‚Äì K·ªπ thu·∫≠t h·ªçc b√°n gi√°m s√°t")
                st.markdown("""
                **Pseudo-Labeling** l√† m·ªôt ph∆∞∆°ng ph√°p h·ªçc b√°n gi√°m s√°t (semi-supervised learning) gi√∫p t·∫≠n d·ª•ng c·∫£ d·ªØ li·ªáu c√≥ nh√£n v√† kh√¥ng c√≥ nh√£n ƒë·ªÉ n√¢ng cao hi·ªáu su·∫•t m√¥ h√¨nh, ƒë·∫∑c bi·ªát h·ªØu √≠ch khi d·ªØ li·ªáu c√≥ nh√£n khan hi·∫øm. K·ªπ thu·∫≠t n√†y s·ª≠ d·ª•ng m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán ƒë·ªÉ d·ª± ƒëo√°n nh√£n gi·∫£ (pseudo-labels) cho d·ªØ li·ªáu kh√¥ng c√≥ nh√£n, sau ƒë√≥ k·∫øt h·ª£p ch√∫ng v√†o qu√° tr√¨nh hu·∫•n luy·ªán.
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i xong! 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

    # Tab 2: Ch·ªçn s·ªë l∆∞·ª£ng d·ªØ li·ªáu
    with tab_load:
        st.markdown('<div class="section-title">Ch·ªçn S·ªë l∆∞·ª£ng D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        X_full, y_full = st.session_state['full_data']
        st.subheader("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u")
        sample_options = {
            "1000 m·∫´u (Th·ª≠ nghi·ªám nhanh)": 1000,
            "10,000 m·∫´u (Ki·ªÉm tra c∆° b·∫£n)": 10000,
            "50,000 m·∫´u (C√¢n b·∫±ng hi·ªáu su·∫•t)": 50000,
            "70,000 m·∫´u (Hu·∫•n luy·ªán chuy√™n s√¢u)": 70000,
            "T√πy ch·ªânh": "custom"
        }
        selected_option = st.selectbox("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", list(sample_options.keys()), help="Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u c√≥ s·∫µn ho·∫∑c nh·∫≠p t√πy ch·ªânh")
        if selected_option == "T√πy ch·ªânh":
            num_samples = st.number_input("Nh·∫≠p s·ªë l∆∞·ª£ng m·∫´u:", min_value=1, max_value=len(X_full), value=1000)
        else:
            num_samples = sample_options[selected_option]

        if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng", type="primary"):
            with st.spinner(f"ƒêang l·∫•y {num_samples} m·∫´u..."):
                indices = np.random.choice(len(X_full), size=num_samples, replace=False)
                X_sampled = X_full[indices]
                y_sampled = y_full[indices]
                st.session_state['data'] = (X_sampled.copy(), y_sampled.copy())
                st.session_state['optimal_params'] = get_optimal_params(num_samples)
                with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample"):
                    mlflow.log_param("num_samples", num_samples)
                st.success(f"ƒê√£ ch·ªçn {num_samples} m·∫´u!")
                del X_full, y_full, X_sampled, y_sampled
                gc.collect()

    # Tab 3: X·ª≠ l√Ω d·ªØ li·ªáu
    with tab_preprocess:
        st.markdown('<div class="section-title">X·ª≠ l√Ω D·ªØ li·ªáu</div>', unsafe_allow_html=True)

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc.")
        else:
            X, y = st.session_state['data']
            if "data_original" not in st.session_state:
                st.session_state["data_original"] = (X.copy(), y.copy())

            st.subheader("D·ªØ li·ªáu G·ªëc")
            fig, axes = plt.subplots(2, 5, figsize=(10, 4))
            for i, ax in enumerate(axes.flat):
                ax.imshow(X[i].reshape(28, 28), cmap='gray')
                ax.set_title(f"Label: {y[i]}")
                ax.axis("off")
            st.pyplot(fig)
            plt.close(fig)

            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button("Chu·∫©n h√≥a d·ªØ li·ªáu (Normalization)", type="primary", help="Chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ thang [0, 1]"):
                    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 1]..."):
                        X_norm = X / 255.0
                        st.session_state["data_processed"] = (X_norm.copy(), y.copy())
                        st.success("ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu!")
                        del X, y, X_norm
                        gc.collect()
                        st.rerun()
            with col2:
                st.markdown("""
                    <div class="tooltip">? (Norm)
                        <span class="tooltiptext">
                            ƒê∆∞a d·ªØ li·ªáu v·ªÅ $[0, 1]$ b·∫±ng c√°ch chia cho $255$.<br>
                            C√¥ng d·ª•ng: ƒê·∫£m b·∫£o thang ƒëo ƒë·ªìng nh·∫•t cho Neural Network.
                        </span>
                    </div>
                """, unsafe_allow_html=True)

            if "data_processed" in st.session_state:
                X_processed, y_processed = st.session_state["data_processed"]
                st.success("ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu!")

    # Tab 4: Chia d·ªØ li·ªáu
    with tab_split:
        st.markdown('<div class="section-title">Chia T·∫≠p D·ªØ li·ªáu</div>', unsafe_allow_html=True)

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng ch·ªçn v√† x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            data_source = st.session_state.get('data_processed', st.session_state['data'])
            X, y = data_source
            total_samples = len(X)
            st.write(f"T·ªïng s·ªë m·∫´u: {total_samples}")

            col1, col2 = st.columns(2)
            with col1:
                test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20, help="T·ª∑ l·ªá d·ªØ li·ªáu d√πng ƒë·ªÉ ki·ªÉm tra m√¥ h√¨nh")
            with col2:
                valid_pct = st.slider("T·ª∑ l·ªá Validation (%)", 0, 50, 20, help="T·ª∑ l·ªá d·ªØ li·ªáu d√πng ƒë·ªÉ x√°c th·ª±c m√¥ h√¨nh")

            test_size = test_pct / 100
            X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
            valid_size = (valid_pct / 100) / (1 - test_size) if test_size < 1 else 0
            X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=valid_size, random_state=42)

            st.write(f"**Ph√¢n b·ªï d·ªØ li·ªáu**: Train: {len(X_train)}, Validation: {len(X_valid)}, Test: {len(X_test)}")
            if st.button("X√°c nh·∫≠n ph√¢n chia", type="primary"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    st.session_state['split_data'] = {
                        "X_train": X_train.copy(), "y_train": y_train.copy(),
                        "X_valid": X_valid.copy(), "y_valid": y_valid.copy(),
                        "X_test": X_test.copy(), "y_test": y_test.copy()
                    }
                    st.success("ƒê√£ chia d·ªØ li·ªáu th√†nh c√¥ng!")
                    del X, y, X_temp, y_temp, X_test, y_test, X_train, X_valid, y_train, y_valid
                    gc.collect()

    # Tab 5: Hu·∫•n luy·ªán/ƒê√°nh gi√°
    with tab_train_eval:
        st.markdown('<div class="section-title">Hu·∫•n luy·ªán v√† ƒê√°nh gi√° M√¥ h√¨nh v·ªõi Pseudo-Labeling</div>', unsafe_allow_html=True)

        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            split_data = st.session_state['split_data'].copy()
            X_train_full = split_data["X_train"]
            y_train_full = split_data["y_train"]
            X_test = split_data["X_test"]
            y_test = split_data["y_test"]

            X_train_full = np.array(X_train_full, dtype=np.float32)
            y_train_full = np.array(y_train_full, dtype=np.int32)
            X_test = np.array(X_test, dtype=np.float32)
            y_test = np.array(y_test, dtype=np.int32)

            if np.any(np.isnan(X_train_full)) or np.any(np.isnan(y_train_full)):
                st.error("D·ªØ li·ªáu hu·∫•n luy·ªán ch·ª©a gi√° tr·ªã NaN. ƒêang x·ª≠ l√Ω...")
                X_train_full = np.nan_to_num(X_train_full, nan=0.0)
                y_train_full = np.nan_to_num(y_train_full, nan=0.0)
                st.success("ƒê√£ thay th·∫ø NaN b·∫±ng 0 trong d·ªØ li·ªáu hu·∫•n luy·ªán!")

            num_samples = len(X_train_full)
            st.write(f"**T·ªïng s·ªë m·∫´u hu·∫•n luy·ªán ban ƒë·∫ßu**: {num_samples}")

            # B∆∞·ªõc 1: L·∫•y 1% s·ªë l∆∞·ª£ng ·∫£nh cho m·ªói class (0-9) ƒë·ªÉ l√†m t·∫≠p train ban ƒë·∫ßu
            st.subheader("T·∫°o t·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu (1% m·ªói l·ªõp)")
            classes = np.unique(y_train_full)
            X_train_initial = []
            y_train_initial = []
            X_unlabeled = []
            y_unlabeled_indices = []

            for cls in classes:
                cls_indices = np.where(y_train_full == cls)[0]
                num_cls_samples = len(cls_indices)
                num_initial = max(1, int(0.01 * num_cls_samples))  # L·∫•y 1% m·ªói l·ªõp
                initial_indices = np.random.choice(cls_indices, num_initial, replace=False)
                unlabeled_indices = np.setdiff1d(cls_indices, initial_indices)

                X_train_initial.append(X_train_full[initial_indices])
                y_train_initial.append(y_train_full[initial_indices])
                X_unlabeled.append(X_train_full[unlabeled_indices])
                y_unlabeled_indices.extend(unlabeled_indices)

            X_train_initial = np.concatenate(X_train_initial, axis=0)
            y_train_initial = np.concatenate(y_train_initial, axis=0)
            X_unlabeled = np.concatenate(X_unlabeled, axis=0)

            st.write(f"**T·∫≠p d·ªØ li·ªáu hu·∫•n luy·ªán ban ƒë·∫ßu l·∫•y (1%)**: {len(X_train_initial)} m·∫´u")
            st.write(f"**T·∫≠p d·ªØ li·ªáu hu·∫•n luy·ªán ch∆∞a g·∫Øn nh√£n (99%)**: {len(X_unlabeled)} m·∫´u")

            # L∆∞u tr·ªØ t·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu
            st.session_state['pseudo_data'] = {
                'X_train_initial': X_train_initial.copy(),
                'y_train_initial': y_train_initial.copy(),
                'X_unlabeled': X_unlabeled.copy(),
                'y_unlabeled_indices': y_unlabeled_indices,
                'X_test': X_test.copy(),
                'y_test': y_test.copy()
            }

            if "optimal_params" not in st.session_state:
                st.session_state["optimal_params"] = get_optimal_params(num_samples)
            
            params = st.session_state.get("training_params", st.session_state["optimal_params"].copy())

            st.subheader("‚öôÔ∏è C·∫•u h√¨nh tham kh·∫£o Tham s·ªë M√¥ h√¨nh")
            st.markdown(f"""
            D·ª±a tr√™n s·ªë m·∫´u hu·∫•n luy·ªán ban ƒë·∫ßu ({num_samples} m·∫´u), b·∫£ng d∆∞·ªõi ƒë√¢y g·ª£i √Ω c√°c tham s·ªë t·ªëi ∆∞u cho b√†i to√°n **Pseudo-Labeling v·ªõi Neural Network**:

            | S·ªë m·∫´u       | S·ªë l·ªõp ·∫©n | K√≠ch th∆∞·ªõc l·ªõp ·∫©n | T·ªëc ƒë·ªô h·ªçc | S·ªë l·∫ßn l·∫∑p | H√†m k√≠ch ho·∫°t | Tr√¨nh t·ªëi ∆∞u | K√≠ch th∆∞·ªõc batch | Ng∆∞·ª°ng tin c·∫≠y | S·ªë v√≤ng l·∫∑p t·ªëi ƒëa |
            |--------------|-----------|-------------------|------------|------------|---------------|--------------|------------------|----------------|-------------------|
            | ‚â§ 1,000      | 1         | 32                | 0.001      | 30         | ReLU          | Adam         | 32               | 0.9            | 3                 |
            | ‚â§ 10,000     | 2         | (64, 32)          | 0.0005     | 50         | ReLU          | Adam         | 64               | 0.95           | 5                 |
            | ‚â§ 50,000     | 2         | (128, 64)         | 0.0003     | 70         | ReLU          | Adam         | 128              | 0.97           | 7                 |
            | > 50,000     | 3         | (128, 64, 32)     | 0.0001     | 100        | ReLU          | Adam         | 256              | 0.98           | 10                |
            """, unsafe_allow_html=True)
            st.info(f"Tham s·ªë t·ªëi ∆∞u g·ª£i √Ω cho {num_samples} m·∫´u: {st.session_state['optimal_params']}")

            col_param1, col_param2 = st.columns(2)
            with col_param1:
                with st.expander("üß† C·∫•u tr√∫c M·∫°ng", expanded=True):
                    st.markdown("**T√πy ch·ªânh s·ªë l·ªõp ·∫©n v√† n∆°-ron**", unsafe_allow_html=True)
                    num_hidden_layers = st.number_input("S·ªë l·ªõp ·∫©n", min_value=1, max_value=3, value=len(params["hidden_layer_sizes"]), 
                                                       help="Ch·ªçn 1, 2 ho·∫∑c 3 l·ªõp ·∫©n ƒë·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªô ph·ª©c t·∫°p c·ªßa m√¥ h√¨nh.")
                    hidden_sizes = list(params["hidden_layer_sizes"])
                    
                    if num_hidden_layers == 1:
                        hidden_size_1 = st.number_input("S·ªë n∆°-ron l·ªõp ·∫©n 1", min_value=16, max_value=128, 
                                                        value=hidden_sizes[0] if len(hidden_sizes) > 0 else 32, 
                                                        help="S·ªë n∆°-ron cho l·ªõp ·∫©n duy nh·∫•t (16-128).")
                        hidden_sizes = [hidden_size_1]
                    elif num_hidden_layers == 2:
                        hidden_size_1 = st.number_input("S·ªë n∆°-ron l·ªõp ·∫©n 1", min_value=16, max_value=128, 
                                                        value=hidden_sizes[0] if len(hidden_sizes) > 0 else 64, 
                                                        help="S·ªë n∆°-ron cho l·ªõp ·∫©n ƒë·∫ßu ti√™n (16-128).")
                        hidden_size_2 = st.number_input("S·ªë n∆°-ron l·ªõp ·∫©n 2", min_value=16, max_value=128, 
                                                        value=hidden_sizes[1] if len(hidden_sizes) > 1 else 32, 
                                                        help="S·ªë n∆°-ron cho l·ªõp ·∫©n th·ª© hai (16-128).")
                        hidden_sizes = [hidden_size_1, hidden_size_2]
                    elif num_hidden_layers == 3:
                        hidden_size_1 = st.number_input("S·ªë n∆°-ron l·ªõp ·∫©n 1", min_value=16, max_value=128, 
                                                        value=hidden_sizes[0] if len(hidden_sizes) > 0 else 128, 
                                                        help="S·ªë n∆°-ron cho l·ªõp ·∫©n ƒë·∫ßu ti√™n (16-128).")
                        hidden_size_2 = st.number_input("S·ªë n∆°-ron l·ªõp ·∫©n 2", min_value=16, max_value=128, 
                                                        value=hidden_sizes[1] if len(hidden_sizes) > 1 else 64, 
                                                        help="S·ªë n∆°-ron cho l·ªõp ·∫©n th·ª© hai (16-128).")
                        hidden_size_3 = st.number_input("S·ªë n∆°-ron l·ªõp ·∫©n 3", min_value=16, max_value=128, 
                                                        value=hidden_sizes[2] if len(hidden_sizes) > 2 else 32, 
                                                        help="S·ªë n∆°-ron cho l·ªõp ·∫©n th·ª© ba (16-128).")
                        hidden_sizes = [hidden_size_1, hidden_size_2, hidden_size_3]
                    
                    params["hidden_layer_sizes"] = tuple(hidden_sizes)
                    params["activation"] = st.selectbox("H√†m k√≠ch ho·∫°t", ["relu", "sigmoid", "tanh"], 
                                                        index=["relu", "sigmoid", "tanh"].index(params["activation"]),
                                                        help="Ch·ªçn h√†m k√≠ch ho·∫°t: ReLU (nhanh), Sigmoid (x√°c su·∫•t), Tanh (c√¢n b·∫±ng).")
            
            with col_param2:
                with st.expander("üîß T·ªëi ∆∞u h√≥a", expanded=True):
                    st.markdown("**C·∫•u h√¨nh hu·∫•n luy·ªán**", unsafe_allow_html=True)
                    params["learning_rate"] = st.selectbox("T·ªëc ƒë·ªô h·ªçc", [0.01, 0.005, 0.001, 0.0005, 0.0003, 0.0001], 
                                                           index=[0.01, 0.005, 0.001, 0.0005, 0.0003, 0.0001].index(params["learning_rate"]),
                                                           help="T·ªëc ƒë·ªô h·ªçc c√†ng nh·ªè c√†ng ·ªïn ƒë·ªãnh nh∆∞ng ch·∫≠m.")
                    params["epochs"] = st.number_input("S·ªë l·∫ßn l·∫∑p (Epochs)", min_value=10, max_value=100, value=params["epochs"], 
                                                       help="S·ªë l·∫ßn l·∫∑p qua to√†n b·ªô d·ªØ li·ªáu (10-100).")
                    params["batch_size"] = st.number_input("K√≠ch th∆∞·ªõc batch", min_value=32, max_value=256, value=params["batch_size"], 
                                                           help="S·ªë m·∫´u m·ªói l·∫ßn c·∫≠p nh·∫≠t tr·ªçng s·ªë (32-256).")
                    params["solver"] = st.selectbox("Tr√¨nh t·ªëi ∆∞u", ["adam", "sgd"], 
                                                    index=["adam", "sgd"].index(params["solver"]),
                                                    help="Adam (nhanh, hi·ªáu qu·∫£), SGD (ƒë∆°n gi·∫£n, ch·∫≠m h∆°n).")
                    threshold_default = st.session_state.get("optimal_params", {}).get("threshold", 0.95)
                    threshold = st.slider("Ng∆∞·ª°ng tin c·∫≠y Pseudo-Label", 0.5, 1.0, 
                                          threshold_default, 
                                          help="Ng∆∞·ª°ng ƒë·ªÉ g√°n nh√£n gi·∫£ cho d·ªØ li·ªáu kh√¥ng c√≥ nh√£n.")
                    max_iterations = st.number_input("S·ªë v√≤ng l·∫∑p t·ªëi ƒëa", min_value=1, max_value=10, 
                                                     value=st.session_state["optimal_params"]["max_iterations"], 
                                                     help="S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa cho qu√° tr√¨nh Pseudo-Labeling.")

            col_reset, col_train = st.columns([1, 3])
            with col_reset:
                if st.button("üîÑ Kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u", key="reset_params"):
                    st.session_state["training_params"] = st.session_state["optimal_params"].copy()
                    st.success("ƒê√£ kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u!")
                    st.rerun()

            st.session_state["training_params"] = params

            with col_train:
                if st.button("üöÄ B·∫Øt ƒë·∫ßu Hu·∫•n luy·ªán v·ªõi Pseudo-Labeling", type="primary", key="start_training"):
                    try:
                        with st.spinner("ƒêang th·ª±c hi·ªán quy tr√¨nh Pseudo-Labeling..."):
                            start_time = time.time()

                            # Kh·ªüi t·∫°o t·∫≠p d·ªØ li·ªáu hu·∫•n luy·ªán
                            X_train = st.session_state['pseudo_data']['X_train_initial'].copy()
                            y_train = st.session_state['pseudo_data']['y_train_initial'].copy()
                            X_unlabeled = st.session_state['pseudo_data']['X_unlabeled'].copy()
                            y_unlabeled_indices = st.session_state['pseudo_data']['y_unlabeled_indices'].copy()

                            iteration = 0
                            pseudo_labeled_history = []
                            accuracy_test_history = []
                            pseudo_samples_per_iteration = []  # L∆∞u m·∫´u minh h·ªça Pseudo-labeled

                            # Hu·∫•n luy·ªán ban ƒë·∫ßu v·ªõi 1% d·ªØ li·ªáu
                            st.write("**Hu·∫•n luy·ªán ban ƒë·∫ßu tr√™n 1% d·ªØ li·ªáu c√≥ nh√£n**")
                            model = models.Sequential()
                            model.add(layers.Input(shape=(784,)))
                            for neurons in params["hidden_layer_sizes"]:
                                model.add(layers.Dense(neurons, activation=params["activation"]))
                            model.add(layers.Dense(10, activation='softmax'))

                            optimizer = tf.keras.optimizers.Adam(learning_rate=params["learning_rate"]) if params["solver"] == "adam" else tf.keras.optimizers.SGD(learning_rate=params["learning_rate"])
                            model.compile(optimizer=optimizer,
                                          loss='sparse_categorical_crossentropy',
                                          metrics=['accuracy'])

                            initial_progress_bar = st.progress(0)
                            class InitialProgressCallback(callbacks.Callback):
                                def on_epoch_end(self, epoch, logs=None):
                                    progress = (epoch + 1) / params["epochs"] * 100
                                    initial_progress_bar.progress(int(progress))
                                    st.write(f"Epoch {epoch+1}/{params['epochs']}: Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}")

                            model.fit(X_train, y_train, epochs=params["epochs"], batch_size=params["batch_size"],
                                      callbacks=[InitialProgressCallback()], verbose=0)

                            # ƒê√°nh gi√° m√¥ h√¨nh ban ƒë·∫ßu tr√™n t·∫≠p test
                            y_test_pred_initial = np.argmax(model.predict(X_test, verbose=0), axis=1)
                            initial_acc_test = accuracy_score(y_test, y_test_pred_initial)
                            initial_cm_test = confusion_matrix(y_test, y_test_pred_initial)
                            st.write(f"**ƒê·ªô ch√≠nh x√°c ban ƒë·∫ßu tr√™n t·∫≠p Test**: {initial_acc_test*100:.2f}%")

                            # Hi·ªÉn th·ªã ma tr·∫≠n nh·∫ßm l·∫´n ban ƒë·∫ßu
                            fig, ax = plt.subplots(figsize=(6, 5))
                            sns.heatmap(initial_cm_test, annot=True, fmt="d", cmap="Blues", ax=ax)
                            ax.set_title("Ma tr·∫≠n Nh·∫ßm l·∫´n (Hu·∫•n luy·ªán ban ƒë·∫ßu)")
                            st.pyplot(fig)
                            plt.close(fig)

                            # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p Pseudo-Labeling
                            iteration_container = st.empty()
                            progress_bar_container = st.empty()
                            status_container = st.empty()
                            pseudo_container = st.empty()
                            accuracy_container = st.empty()
                            pseudo_samples_container = st.empty()

                            while iteration < max_iterations and len(X_unlabeled) > 0:
                                iteration += 1
                                iteration_container.markdown(f"**V√≤ng l·∫∑p {iteration}/{max_iterations}**")

                                # Hu·∫•n luy·ªán m√¥ h√¨nh
                                model = models.Sequential()
                                model.add(layers.Input(shape=(784,)))
                                for neurons in params["hidden_layer_sizes"]:
                                    model.add(layers.Dense(neurons, activation=params["activation"]))
                                model.add(layers.Dense(10, activation='softmax'))

                                optimizer = tf.keras.optimizers.Adam(learning_rate=params["learning_rate"]) if params["solver"] == "adam" else tf.keras.optimizers.SGD(learning_rate=params["learning_rate"])
                                model.compile(optimizer=optimizer,
                                              loss='sparse_categorical_crossentropy',
                                              metrics=['accuracy'])

                                with progress_bar_container:
                                    progress_bar = st.progress(0)

                                class ProgressCallback(callbacks.Callback):
                                    def on_epoch_end(self, epoch, logs=None):
                                        progress = (epoch + 1) / params["epochs"] * 100
                                        progress_bar.progress(int(progress))
                                        status_container.markdown(
                                            f"**V√≤ng l·∫∑p {iteration}/{max_iterations} - Epoch {epoch+1}/{params['epochs']}**: "
                                            f"Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}"
                                        )

                                history = model.fit(X_train, y_train, epochs=params["epochs"], batch_size=params["batch_size"],
                                                    callbacks=[ProgressCallback()], verbose=0)

                                # D·ª± ƒëo√°n nh√£n cho t·∫≠p unlabeled
                                predictions = model.predict(X_unlabeled, verbose=0)
                                predicted_labels = np.argmax(predictions, axis=1)
                                confidences = np.max(predictions, axis=1)

                                # G√°n nh√£n gi·∫£ v·ªõi ng∆∞·ª°ng tin c·∫≠y
                                pseudo_mask = confidences >= threshold
                                X_pseudo = X_unlabeled[pseudo_mask]
                                y_pseudo = predicted_labels[pseudo_mask]
                                confidences_pseudo = confidences[pseudo_mask]

                                pseudo_container.markdown(f"**S·ªë m·∫´u ƒë∆∞·ª£c g√°n nh√£n gi·∫£ trong v√≤ng {iteration}**: {len(X_pseudo)}")

                                # Minh h·ªça 5 m·∫´u Pseudo-labeled ng·∫´u nhi√™n
                                if len(X_pseudo) > 0:
                                    num_display = min(5, len(X_pseudo))
                                    sample_indices = np.random.choice(len(X_pseudo), num_display, replace=False)
                                    pseudo_samples = []
                                    for idx in sample_indices:
                                        pseudo_samples.append({
                                            'image': X_pseudo[idx].reshape(28, 28),
                                            'label': y_pseudo[idx],
                                            'confidence': confidences_pseudo[idx] * 100
                                        })
                                    pseudo_samples_per_iteration.append(pseudo_samples)

                                    # Hi·ªÉn th·ªã m·∫´u minh h·ªça
                                    with pseudo_samples_container:
                                        st.markdown(f"**Minh h·ªça m·∫´u Pseudo-labeled (V√≤ng {iteration})**")
                                        cols = st.columns(num_display)
                                        for i, col in enumerate(cols):
                                            with col:
                                                fig, ax = plt.subplots(figsize=(2, 2))
                                                ax.imshow(pseudo_samples[i]['image'], cmap='gray')
                                                ax.axis('off')
                                                ax.set_title(f"Label: {pseudo_samples[i]['label']}\nConf: {pseudo_samples[i]['confidence']:.2f}%", fontsize=8)
                                                st.pyplot(fig)
                                                plt.close(fig)

                                # C·∫≠p nh·∫≠t t·∫≠p d·ªØ li·ªáu
                                X_train = np.concatenate([X_train, X_pseudo], axis=0)
                                y_train = np.concatenate([y_train, y_pseudo], axis=0)
                                remaining_mask = ~pseudo_mask
                                X_unlabeled = X_unlabeled[remaining_mask]

                                pseudo_labeled_history.append(len(X_pseudo))

                                # ƒê√°nh gi√° tr√™n t·∫≠p test
                                y_test_pred = np.argmax(model.predict(X_test, verbose=0), axis=1)
                                acc_test = accuracy_score(y_test, y_test_pred)
                                accuracy_test_history.append(acc_test)
                                accuracy_container.markdown(f"**ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p Test sau v√≤ng {iteration}**: {acc_test*100:.2f}%")

                                tf.keras.backend.clear_session()
                                del model, predictions, predicted_labels, confidences, pseudo_mask, X_pseudo, y_pseudo, confidences_pseudo
                                gc.collect()

                            # Hu·∫•n luy·ªán l·∫ßn cu·ªëi
                            iteration_container.markdown("**Hu·∫•n luy·ªán l·∫ßn cu·ªëi tr√™n to√†n b·ªô t·∫≠p d·ªØ li·ªáu ƒë√£ g·∫Øn nh√£n**")
                            model = models.Sequential()
                            model.add(layers.Input(shape=(784,)))
                            for neurons in params["hidden_layer_sizes"]:
                                model.add(layers.Dense(neurons, activation=params["activation"]))
                            model.add(layers.Dense(10, activation='softmax'))

                            optimizer = tf.keras.optimizers.Adam(learning_rate=params["learning_rate"]) if params["solver"] == "adam" else tf.keras.optimizers.SGD(learning_rate=params["learning_rate"])
                            model.compile(optimizer=optimizer,
                                          loss='sparse_categorical_crossentropy',
                                          metrics=['accuracy'])

                            with progress_bar_container:
                                progress_bar_final = st.progress(0)
                            status_container_final = st.empty()

                            class ProgressCallback(callbacks.Callback):
                                def on_epoch_end(self, epoch, logs=None):
                                    progress = (epoch + 1) / params["epochs"] * 100
                                    progress_bar_final.progress(int(progress))
                                    status_container_final.markdown(
                                        f"**Hu·∫•n luy·ªán cu·ªëi - Epoch {epoch+1}/{params['epochs']}**: "
                                        f"Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}"
                                    )

                            history = model.fit(X_train, y_train, epochs=params["epochs"], batch_size=params["batch_size"],
                                                callbacks=[ProgressCallback()], verbose=0)

                            # ƒê√°nh gi√° tr√™n t·∫≠p test
                            y_test_pred = np.argmax(model.predict(X_test, verbose=0), axis=1)
                            acc_test = accuracy_score(y_test, y_test_pred)
                            cm_test = confusion_matrix(y_test, y_test_pred)

                            run_name = f"PseudoLabeling_NN_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                            with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=run_name) as run:
                                mlflow.log_params({
                                    'hidden_layer_sizes': params["hidden_layer_sizes"],
                                    'learning_rate': params["learning_rate"],
                                    'epochs': params["epochs"],
                                    'batch_size': params["batch_size"],
                                    'activation': params["activation"],
                                    'solver': params["solver"],
                                    'threshold': threshold,
                                    'max_iterations': max_iterations
                                })
                                mlflow.log_metric("initial_accuracy_test", initial_acc_test)
                                mlflow.log_metric("accuracy_test", acc_test)
                                mlflow.log_metric("training_time", time.time() - start_time)
                                mlflow.log_metric("total_iterations", iteration)
                                mlflow.keras.log_model(model, "model")

                            st.session_state['model'] = model
                            st.session_state['training_results'] = {
                                'initial_accuracy_test': initial_acc_test,
                                'initial_cm_test': initial_cm_test,
                                'accuracy_test': acc_test,
                                'cm_test': cm_test,
                                'run_name': run_name,
                                'run_id': run.info.run_id,
                                'params': params,
                                'training_time': time.time() - start_time,
                                'loss_history': history.history['loss'][-10:],
                                'accuracy_history': history.history['accuracy'][-10:],
                                'pseudo_labeled_history': pseudo_labeled_history,
                                'accuracy_test_history': accuracy_test_history,
                                'pseudo_samples_per_iteration': pseudo_samples_per_iteration,
                                'total_iterations': iteration
                            }

                            st.success(f"ƒê√£ ho√†n th√†nh Pseudo-Labeling! Th·ªùi gian: {time.time() - start_time:.2f} gi√¢y, T·ªïng s·ªë v√≤ng l·∫∑p: {iteration}")
                            tf.keras.backend.clear_session()
                            del X_train, y_train, X_unlabeled, X_test, y_test, split_data, history
                            gc.collect()
                            st.rerun()

                    except Exception as e:
                        st.error(f"L·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán v·ªõi Pseudo-Labeling: {e}")

            if 'training_results' in st.session_state:
                results = st.session_state['training_results']
                st.subheader("üìä K·∫øt qu·∫£ Hu·∫•n luy·ªán v·ªõi Pseudo-Labeling")

                col_result1, col_result2, col_result3 = st.columns(3)
                with col_result1:
                    st.metric("ƒê·ªô ch√≠nh x√°c ban ƒë·∫ßu (1%)", f"{results['initial_accuracy_test']*100:.2f}%")
                with col_result2:
                    st.metric("ƒê·ªô ch√≠nh x√°c sau Pseudo-Labeling", f"{results['accuracy_test']*100:.2f}%")
                with col_result3:
                    st.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{results['training_time']:.2f} gi√¢y")

                col_cm1, col_cm2 = st.columns(2)
                with col_cm1:
                    st.subheader("üìà Ma tr·∫≠n Nh·∫ßm l·∫´n (Ban ƒë·∫ßu)")
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['initial_cm_test'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Test (Hu·∫•n luy·ªán ban ƒë·∫ßu)")
                    st.pyplot(fig)
                    plt.close(fig)
                with col_cm2:
                    st.subheader("üìà Ma tr·∫≠n Nh·∫ßm l·∫´n (Sau Pseudo-Labeling)")
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_test'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Test (Sau Pseudo-Labeling)")
                    st.pyplot(fig)
                    plt.close(fig)

                st.subheader("üé® Minh h·ªça c√°c m·∫´u Pseudo-labeled qua c√°c v√≤ng l·∫∑p")
                for iter_idx, samples in enumerate(results['pseudo_samples_per_iteration']):
                    st.markdown(f"**V√≤ng l·∫∑p {iter_idx + 1}**")
                    cols = st.columns(len(samples))
                    for i, col in enumerate(cols):
                        with col:
                            fig, ax = plt.subplots(figsize=(2, 2))
                            ax.imshow(samples[i]['image'], cmap='gray')
                            ax.axis('off')
                            ax.set_title(f"Label: {samples[i]['label']}\nConf: {samples[i]['confidence']:.2f}%", fontsize=8)
                            st.pyplot(fig)
                            plt.close(fig)

                st.subheader("üìâ Bi·ªÉu ƒë·ªì K·∫øt qu·∫£ Hu·∫•n luy·ªán")
                col_chart1, col_chart2 = st.columns(2)
                with col_chart1:
                    if results['loss_history']:
                        fig, ax = plt.subplots(figsize=(6, 3))
                        ax.plot(range(1, len(results['loss_history']) + 1), results['loss_history'], 
                                label='Loss', linestyle='-', color='blue', linewidth=2)
                        ax.set_xlabel("Epochs")
                        ax.set_ylabel("Loss")
                        ax.set_title("Training Loss (Final)")
                        ax.legend()
                        ax.grid(True)
                        st.pyplot(fig)
                        plt.close(fig)
                    st.markdown("**Gi·∫£i th√≠ch:** Bi·ªÉu ƒë·ªì n√†y th·ªÉ hi·ªán m·ª©c ƒë·ªô m·∫•t m√°t (loss) trong 10 epoch cu·ªëi c√πng.")

                    if results['pseudo_labeled_history']:
                        fig, ax = plt.subplots(figsize=(6, 3))
                        ax.plot(range(1, len(results['pseudo_labeled_history']) + 1), results['pseudo_labeled_history'], 
                                label='S·ªë m·∫´u', linestyle='-', color='purple', linewidth=2)
                        ax.set_xlabel("V√≤ng l·∫∑p")
                        ax.set_ylabel("S·ªë m·∫´u")
                        ax.set_title("S·ªë m·∫´u Pseudo-Label")
                        ax.legend()
                        ax.grid(True)
                        st.pyplot(fig)
                        plt.close(fig)
                    st.markdown("**Gi·∫£i th√≠ch:** S·ªë l∆∞·ª£ng m·∫´u ƒë∆∞·ª£c g√°n nh√£n gi·∫£ qua t·ª´ng v√≤ng l·∫∑p.")

                with col_chart2:
                    if results['accuracy_history']:
                        fig, ax = plt.subplots(figsize=(6, 3))
                        ax.plot(range(1, len(results['accuracy_history']) + 1), results['accuracy_history'], 
                                label='Accuracy', linestyle='-', color='green', linewidth=2)
                        ax.set_xlabel("Epochs")
                        ax.set_ylabel("Accuracy")
                        ax.set_title("Training Accuracy (Final)")
                        ax.legend()
                        ax.grid(True)
                        st.pyplot(fig)
                        plt.close(fig)
                    st.markdown("**Gi·∫£i th√≠ch:** ƒê·ªô ch√≠nh x√°c hu·∫•n luy·ªán trong 10 epoch cu·ªëi c√πng.")

                    if results['accuracy_test_history']:
                        fig, ax = plt.subplots(figsize=(6, 3))
                        ax.plot(range(1, len(results['accuracy_test_history']) + 1), results['accuracy_test_history'], 
                                label='Test Accuracy', linestyle='-', color='red', linewidth=2)
                        ax.set_xlabel("V√≤ng l·∫∑p")
                        ax.set_ylabel("Accuracy")
                        ax.set_title("Test Accuracy qua v√≤ng l·∫∑p")
                        ax.legend()
                        ax.grid(True)
                        st.pyplot(fig)
                        plt.close(fig)
                    st.markdown("**Gi·∫£i th√≠ch:** ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p test qua c√°c v√≤ng l·∫∑p.")

                with st.expander("Xem chi ti·∫øt", expanded=False):
                    st.markdown("**Th√¥ng tin l·∫ßn ch·∫°y:**")
                    st.write(f"- T√™n: {results['run_name']}")
                    st.write(f"- ID: {results['run_id']}")
                    st.write(f"- Th·ªùi gian hu·∫•n luy·ªán: {results['training_time']:.2f} gi√¢y")
                    st.write(f"- T·ªïng s·ªë v√≤ng l·∫∑p: {results['total_iterations']}")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c ban ƒë·∫ßu: {results['initial_accuracy_test']*100:.2f}%")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Test: {results['accuracy_test']*100:.2f}%")
                    st.markdown("**Tham s·ªë ƒë√£ ch·ªçn:**")
                    st.json({
                        "S·ªë l·ªõp ·∫©n": len(results['params']['hidden_layer_sizes']),
                        "S·ªë n∆°-ron m·ªói l·ªõp": results['params']['hidden_layer_sizes'],
                        "T·ªëc ƒë·ªô h·ªçc": results['params']['learning_rate'],
                        "S·ªë l·∫ßn l·∫∑p m·ªói v√≤ng (Epochs)": results['params']['epochs'],
                        "K√≠ch th∆∞·ªõc batch": results['params']['batch_size'],
                        "H√†m k√≠ch ho·∫°t": results['params']['activation'],
                        "Tr√¨nh t·ªëi ∆∞u": results['params']['solver'],
                        "Ng∆∞·ª°ng tin c·∫≠y": threshold,
                        "S·ªë v√≤ng l·∫∑p t·ªëi ƒëa": max_iterations
                    })

    # Tab 6: Demo d·ª± ƒëo√°n
    with tab_demo:
        st.markdown('<div class="section-title">Demo D·ª± ƒëo√°n Ch·ªØ s·ªë</div>', unsafe_allow_html=True)
        st.header("D·ª± ƒëo√°n s·ªë vi·∫øt tay")
        st.write("Ch·ªçn c√°ch nh·∫≠p li·ªáu: t·∫£i l√™n h√¨nh ·∫£nh, s·ª≠ d·ª•ng d·ªØ li·ªáu Test ho·∫∑c v·∫Ω tr·ª±c ti·∫øp.")

        if 'split_data' not in st.session_state:
            st.warning("‚ö†Ô∏è Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc trong tab 'Chia d·ªØ li·ªáu'!")
        else:
            if 'mlflow_client' not in st.session_state:
                st.session_state['mlflow_client'] = MlflowClient()

            if 'model_options' not in st.session_state or st.button("L√†m m·ªõi danh s√°ch m√¥ h√¨nh"):
                with st.spinner("ƒêang t·∫£i danh s√°ch m√¥ h√¨nh..."):
                    runs = st.session_state['mlflow_client'].search_runs(
                        experiment_ids=[EXPERIMENT_ID], 
                        order_by=["attributes.start_time DESC"]
                    )
                    st.session_state['model_options'] = {
                        run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") 
                        for run in runs if 'mlflow.runName' in run.data.tags
                    }

            model_options = st.session_state['model_options']

            if model_options:
                selected_model_name = st.selectbox(
                    "Ch·ªçn m√¥ h√¨nh:", 
                    list(model_options.values()), 
                    index=0,
                    key="model_select"
                )
                selected_run_id = [k for k, v in model_options.items() if v == selected_model_name][0]

                if 'selected_model' not in st.session_state or st.session_state['selected_run_id'] != selected_run_id:
                    with st.spinner("ƒêang t·∫£i m√¥ h√¨nh..."):
                        model_uri = f"runs:/{selected_run_id}/model"
                        try:
                            model = mlflow.keras.load_model(model_uri)
                            st.session_state['selected_model'] = model
                            st.session_state['selected_run_id'] = selected_run_id
                        except Exception as e:
                            st.error(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh t·ª´ MLflow: {e}")
                            model = None
                else:
                    model = st.session_state['selected_model']

                if model is not None:
                    st.write(f"**M√¥ h√¨nh hi·ªán t·∫°i**: {selected_model_name}")

                    input_method = st.selectbox(
                        "Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p li·ªáu", 
                        ["T·∫£i ·∫£nh l√™n", "D·ªØ li·ªáu Test", "V·∫Ω tr·ª±c ti·∫øp"],
                        key="input_method"
                    )
                    is_normalized = 'data_processed' in st.session_state

                    def preprocess_input(data, is_normalized):
                        if not is_normalized:
                            data = data / 255.0
                        return data

                    if input_method == "T·∫£i ·∫£nh l√™n":
                        st.markdown('<p class="mode-title">D·ª± ƒëo√°n t·ª´ ·∫¢nh T·∫£i l√™n</p>', unsafe_allow_html=True)
                        uploaded_file = st.file_uploader("T·∫£i l√™n h√¨nh ·∫£nh", type=["png", "jpg", "jpeg"])
                        if uploaded_file is not None:
                            image = Image.open(uploaded_file).convert('L')
                            image = image.resize((28, 28))
                            st.image(image, caption="H√¨nh ·∫£nh ƒë·∫ßu v√†o", width=100)

                            if st.button("D·ª± ƒëo√°n", key="predict_upload_button"):
                                with st.spinner("ƒêang x·ª≠ l√Ω ·∫£nh..."):
                                    image_array = np.array(image, dtype=np.float32)
                                    image_array = image_array.reshape(1, 784)
                                    image_processed = preprocess_input(image_array, is_normalized)
                                    prediction = model.predict(image_processed, verbose=0)[0]
                                    predicted_class = np.argmax(prediction)
                                    confidence = prediction[predicted_class] * 100
                                    st.markdown(f"""
                                        <div>
                                            <strong>D·ª± ƒëo√°n:</strong> {predicted_class}<br>
                                            <strong>ƒê·ªô tin c·∫≠y:</strong> {confidence:.2f}%
                                        </div>
                                    """, unsafe_allow_html=True)
                                    fig, ax = plt.subplots(figsize=(6, 4))
                                    ax.bar(range(10), prediction * 100, color='blue')
                                    ax.set_xlabel("Ch·ªØ s·ªë")
                                    ax.set_ylabel("X√°c su·∫•t (%)")
                                    ax.set_title("Ph√¢n b·ªë x√°c su·∫•t")
                                    st.pyplot(fig)
                                    plt.close(fig)
                                    st.success("D·ª± ƒëo√°n ho√†n t·∫•t!")

                    elif input_method == "D·ªØ li·ªáu Test":
                        st.markdown('<p class="mode-title">D·ª± ƒëo√°n t·ª´ D·ªØ li·ªáu Test</p>', unsafe_allow_html=True)
                        X_test = st.session_state['split_data']["X_test"]
                        y_test = st.session_state['split_data']["y_test"]
                        if len(X_test) == 0:
                            st.warning("T·∫≠p Test r·ªóng. Vui l√≤ng chia l·∫°i d·ªØ li·ªáu v·ªõi t·ª∑ l·ªá Test > 0%.")
                        else:
                            col_select, col_display = st.columns([3, 2])
                            with col_select:
                                idx = st.slider("Ch·ªçn m·∫´u Test", 0, min(len(X_test) - 1, 100), 0)
                            with col_display:
                                st.write("**·∫¢nh m·∫´u Test:**")
                                fig, ax = plt.subplots(figsize=(2, 2))
                                ax.imshow(X_test[idx].reshape(28, 28), cmap='gray')
                                ax.axis('off')
                                st.pyplot(fig)
                                plt.close(fig)
                                st.write(f"**Nh√£n th·ª±c t·∫ø:** {y_test[idx]}")

                            if st.button("üîç D·ª± ƒëo√°n", key="predict_test"):
                                with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                                    sample = X_test[idx].reshape(1, -1)
                                    sample_processed = preprocess_input(sample, is_normalized)
                                    prediction = model.predict(sample_processed, verbose=0)[0]
                                    predicted_class = np.argmax(prediction)
                                    confidence = prediction[predicted_class] * 100
                                    st.markdown(f"""
                                        <div class="prediction-box">
                                            <strong>D·ª± ƒëo√°n:</strong> {predicted_class}<br>
                                            <strong>ƒê·ªô tin c·∫≠y:</strong> {confidence:.2f}%<br>
                                            <strong>Nh√£n th·ª±c t·∫ø:</strong> {y_test[idx]}
                                        </div>
                                    """, unsafe_allow_html=True)
                                    fig, ax = plt.subplots(figsize=(6, 4))
                                    ax.bar(range(10), prediction * 100, color='blue')
                                    ax.set_xlabel("Ch·ªØ s·ªë")
                                    ax.set_ylabel("X√°c su·∫•t (%)")
                                    ax.set_title("Ph√¢n b·ªë x√°c su·∫•t")
                                    st.pyplot(fig)
                                    plt.close(fig)
                                    st.success("D·ª± ƒëo√°n ho√†n t·∫•t!")

                    elif input_method == "V·∫Ω tr·ª±c ti·∫øp":
                        st.markdown('<p class="mode-title">V·∫Ω tr·ª±c ti·∫øp</p>', unsafe_allow_html=True)
                        st.write("V·∫Ω ch·ªØ s·ªë t·ª´ 0-9 (n√©t tr·∫Øng tr√™n n·ªÅn ƒëen):")

                        if 'canvas_result' not in st.session_state:
                            st.session_state['canvas_result'] = None

                        canvas_result = st_canvas(
                            fill_color="rgba(255, 165, 0, 0.3)",
                            stroke_width=20,
                            stroke_color="#FFFFFF",
                            background_color="#000000",
                            height=280,
                            width=280,
                            drawing_mode="freedraw",
                            key="canvas_fixed_key",
                            update_streamlit=False
                        )

                        if canvas_result.image_data is not None:
                            st.session_state['canvas_result'] = canvas_result

                        col_pred, col_clear = st.columns([2, 1])
                        with col_pred:
                            if st.button("D·ª± ƒëo√°n", key="predict_button"):
                                if st.session_state['canvas_result'] is not None:
                                    with st.spinner("ƒêang x·ª≠ l√Ω h√¨nh v·∫Ω..."):
                                        image = Image.fromarray(
                                            st.session_state['canvas_result'].image_data.astype('uint8'), 'RGBA'
                                        ).convert('L')
                                        image_resized = image.resize((28, 28))
                                        image_array = np.array(image_resized, dtype=np.float32).reshape(1, 784)
                                        image_processed = preprocess_input(image_array, is_normalized)
                                        prediction = model.predict(image_processed, verbose=0)[0]
                                        predicted_class = np.argmax(prediction)
                                        confidence = prediction[predicted_class] * 100
                                        st.markdown(f"""
                                            <div>
                                                <strong>D·ª± ƒëo√°n:</strong> {predicted_class}<br>
                                                <strong>ƒê·ªô tin c·∫≠y:</strong> {confidence:.2f}%
                                            </div>
                                        """, unsafe_allow_html=True)
                                        fig, ax = plt.subplots(figsize=(6, 4))
                                        ax.bar(range(10), prediction * 100, color='blue')
                                        ax.set_xlabel("Ch·ªØ s·ªë")
                                        ax.set_ylabel("X√°c su·∫•t (%)")
                                        ax.set_title("Ph√¢n b·ªë x√°c su·∫•t")
                                        st.pyplot(fig)
                                        plt.close(fig)
                                        st.success("D·ª± ƒëo√°n ho√†n t·∫•t!")
                                else:
                                    st.warning("Vui l√≤ng v·∫Ω tr∆∞·ªõc khi d·ª± ƒëo√°n!")

            else:
                st.warning("Ch∆∞a c√≥ m√¥ h√¨nh n√†o ƒë∆∞·ª£c l∆∞u trong MLflow.")

    # Tab 7: Th√¥ng tin hu·∫•n luy·ªán
    with tab_log_info:
        st.markdown('<div class="section-title">Theo d√µi K·∫øt qu·∫£</div>', unsafe_allow_html=True)
        try:
            with st.spinner("ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán..."):
                client = MlflowClient()
                runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])
                if not runs:
                    st.info(f"Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o trong Experiment ID {EXPERIMENT_ID}.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    selected_run_name = st.selectbox("Ch·ªçn run:", list(run_options.values()))
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi:", value=selected_run_name)
                    if st.button("C·∫≠p nh·∫≠t t√™n"):
                        client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                        st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                        st.rerun()

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y"):
                        client.delete_run(selected_run_id)
                        st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                        st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt")
                    st.write(f"**T√™n:** {selected_run_name}")
                    st.write(f"**ID:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")
                    
                    st.markdown("**Tham s·ªë hu·∫•n luy·ªán:**")
                    st.json(selected_run.data.params, expanded=True)
                    
                    st.markdown("**S·ªë li·ªáu hu·∫•n luy·ªán:**")
                    st.json(selected_run.data.metrics, expanded=True)

                    mlflow_ui_link = f"{mlflow_tracking_uri}/#/experiments/{EXPERIMENT_ID}"
                    st.markdown("---")
                    st.markdown(f"üìä **Xem chi ti·∫øt tr√™n MLflow UI**: [Nh·∫•n v√†o ƒë√¢y]({mlflow_ui_link})", unsafe_allow_html=True)

        except Exception as e:
            st.error(f"L·ªói khi t·∫£i th√¥ng tin hu·∫•n luy·ªán: {e}")

if __name__ == "__main__":
    run_mnist_pseudo_labeling_app()