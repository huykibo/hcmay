import os
import mlflow
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time
import requests
import io
import sys
import tensorflow as tf
from tensorflow.keras import layers, models, callbacks
import gc

# H√†m ch·ªçn tham s·ªë t·ªëi ∆∞u d·ª±a tr√™n s·ªë m·∫´u
def get_optimal_params(num_samples):
    """X√°c ƒë·ªãnh tham s·ªë t·ªëi ∆∞u cho m√¥ h√¨nh d·ª±a tr√™n s·ªë l∆∞·ª£ng m·∫´u."""
    if num_samples <= 1000:
        return {
            "hidden_layer_sizes": (32,),
            "learning_rate": 0.001,
            "epochs": 30,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 32,
            "threshold": 0.95,
            "max_iterations": 5
        }
    elif num_samples <= 10000:
        return {
            "hidden_layer_sizes": (64, 32),
            "learning_rate": 0.0005,
            "epochs": 50,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 64,
            "threshold": 0.95,
            "max_iterations": 10
        }
    elif num_samples <= 50000:
        return {
            "hidden_layer_sizes": (128, 64),
            "learning_rate": 0.0003,
            "epochs": 70,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 128,
            "threshold": 0.95,
            "max_iterations": 15
        }
    else:  # > 50,000
        return {
            "hidden_layer_sizes": (128, 64, 32),
            "learning_rate": 0.0001,
            "epochs": 100,
            "activation": "relu",
            "solver": "adam",
            "batch_size": 256,
            "threshold": 0.95,
            "max_iterations": 20
        }

# H√†m x√¢y d·ª±ng m√¥ h√¨nh Neural Network
def build_model(params):
    """X√¢y d·ª±ng m√¥ h√¨nh Neural Network d·ª±a tr√™n tham s·ªë."""
    model = models.Sequential()
    model.add(layers.InputLayer(input_shape=(784,)))
    for units in params["hidden_layer_sizes"]:
        model.add(layers.Dense(units, activation=params["activation"]))
    model.add(layers.Dense(10, activation='softmax'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=params["learning_rate"]) if params["solver"] == "adam" else tf.keras.optimizers.SGD(learning_rate=params["learning_rate"])
    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model

# ·ª®ng d·ª•ng ch√≠nh
def run_mnist_pseudo_labeling_app():
    """Ch·∫°y ·ª©ng d·ª•ng Streamlit ƒë·ªÉ ph√¢n lo·∫°i ch·ªØ s·ªë MNIST v·ªõi Neural Network v√† Pseudo-Labeling."""

    ### Thi·∫øt l·∫≠p MLflow
    mlflow_tracking_uri = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(mlflow_tracking_uri)
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets.")
        st.stop()

    try:
        response = requests.get(mlflow_tracking_uri, timeout=5)
        if response.status_code != 200:
            st.error(f"K·∫øt n·ªëi MLflow th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}.")
            st.stop()
    except requests.exceptions.RequestException as e:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi MLflow: {e}.")
        st.stop()

    EXPERIMENT_ID = "6"
    try:
        client = MlflowClient()
        experiment = client.get_experiment(EXPERIMENT_ID)
        if experiment is None:
            st.error(f"Experiment ID {EXPERIMENT_ID} kh√¥ng t·ªìn t·∫°i.")
            st.stop()
    except Exception as e:
        st.error(f"L·ªói truy xu·∫•t Experiment ID {EXPERIMENT_ID}: {e}.")
        st.stop()

    ### T·∫£i d·ªØ li·ªáu MNIST
    if 'full_data' not in st.session_state:
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu MNIST..."):
            (X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()
            X_full = np.concatenate([X_train, X_test], axis=0)
            y_full = np.concatenate([y_train, y_test], axis=0)
            X_full = X_full.reshape(-1, 784).astype(np.float32)
            y_full = y_full.astype(np.int32)
            st.session_state['full_data'] = (X_full, y_full)

    st.title("Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Neural Network v√† Pseudo-Labeling")

    ### CSS t√πy ch·ªânh
    st.markdown("""
        <style>
            .section-title {
                font-size: 1.5em;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            .stCanvas {
                border: 1px solid #ddd;
                border-radius: 5px;
            }
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: pointer;
                color: #3498db;
                font-weight: bold;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 220px;
                background-color: #555;
                color: #fff;
                text-align: center;
                border-radius: 6px;
                padding: 5px;
                position: absolute;
                z-index: 1;
                bottom: 125%;
                left: 50%;
                margin-left: -110px;
                opacity: 0;
                transition: opacity 0.3s;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
        </style>
    """, unsafe_allow_html=True)

    ### T·∫°o c√°c tab
    tab_names = ["Th√¥ng tin", "Ch·ªçn s·ªë l∆∞·ª£ng d·ªØ li·ªáu", "X·ª≠ l√Ω d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", 
                 "Hu·∫•n luy·ªán/ƒê√°nh gi√°", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"]
    tab_info, tab_load, tab_preprocess, tab_split, tab_train_eval, tab_demo, tab_log_info = st.tabs(tab_names)

    # Tab 1: Th√¥ng tin
    with tab_info:
        st.header("Gi·ªõi thi·ªáu ·ª®ng d·ª•ng Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Neural Network v√† Pseudo-Labeling")
        st.markdown("""
        Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ t·∫≠p d·ªØ li·ªáu **MNIST** s·ª≠ d·ª•ng **M·∫°ng n∆°-ron nh√¢n t·∫°o (Neural Network)** k·∫øt h·ª£p v·ªõi k·ªπ thu·∫≠t **Pseudo-Labeling**. ·ª®ng d·ª•ng n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ cung c·∫•p tr·∫£i nghi·ªám tr·ª±c quan, h·ªó tr·ª£ h·ªçc t·∫≠p v√† nghi√™n c·ª©u v·ªÅ c√°c thu·∫≠t to√°n h·ªçc m√°y hi·ªán ƒë·∫°i.
        """, unsafe_allow_html=True)

        st.subheader("Ch·ªçn n·ªôi dung ƒë·ªÉ kh√°m ph√°")
        info_option = st.selectbox(
            "",
            [
                "T·ªïng quan v·ªÅ ·ª©ng d·ª•ng v√† m·ª•c ti√™u",
                "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a",
                "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o",
                "Pseudo-Labeling ‚Äì K·ªπ thu·∫≠t h·ªçc b√°n gi√°m s√°t"
            ],
            label_visibility="collapsed",
            help="Kh√°m ph√° chi ti·∫øt v·ªÅ ·ª©ng d·ª•ng, d·ªØ li·ªáu, m√¥ h√¨nh v√† k·ªπ thu·∫≠t Pseudo-Labeling."
        )

        # T·∫°o placeholder ƒë·ªÉ ch·ª©a n·ªôi dung ƒë·ªông
        content_placeholder = st.empty()

        # X√≥a n·ªôi dung c≈© tr∆∞·ªõc khi hi·ªÉn th·ªã n·ªôi dung m·ªõi
        content_placeholder.empty()

        # Hi·ªÉn th·ªã n·ªôi dung m·ªõi d·ª±a tr√™n l·ª±a ch·ªçn
        with content_placeholder.container():
            if info_option == "T·ªïng quan v·ªÅ ·ª©ng d·ª•ng v√† m·ª•c ti√™u":
                with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 101, 10):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang t·∫£i n·ªôi dung... {i}%")
                        time.sleep(0.05)
                    st.subheader("üìå T·ªïng quan v·ªÅ ·ª©ng d·ª•ng v√† m·ª•c ti√™u")
                    st.markdown("""
                    ·ª®ng d·ª•ng n√†y t·∫≠p trung v√†o vi·ªác ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay d·ª±a tr√™n t·∫≠p d·ªØ li·ªáu **MNIST**, m·ªôt b·ªô d·ªØ li·ªáu ti√™u chu·∫©n trong lƒ©nh v·ª±c h·ªçc m√°y. K·∫øt h·ª£p **Neural Network** v√† **Pseudo-Labeling**, ·ª©ng d·ª•ng kh√¥ng ch·ªâ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t m√¥ h√¨nh m√† c√≤n t·∫≠n d·ª•ng d·ªØ li·ªáu kh√¥ng c√≥ nh√£n ƒë·ªÉ n√¢ng cao kh·∫£ nƒÉng h·ªçc t·∫≠p.

                    **M·ª•c ti√™u ch√≠nh:**
                    - Ph√°t tri·ªÉn m·ªôt m√¥ h√¨nh Neural Network c√≥ kh·∫£ nƒÉng nh·∫≠n di·ªán ch√≠nh x√°c c√°c ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9.
                    - √Åp d·ª•ng k·ªπ thu·∫≠t Pseudo-Labeling ƒë·ªÉ khai th√°c d·ªØ li·ªáu kh√¥ng c√≥ nh√£n, m√¥ ph·ªèng c√°c t√¨nh hu·ªëng th·ª±c t·∫ø khi d·ªØ li·ªáu c√≥ nh√£n h·∫°n ch·∫ø.
                    - Cung c·∫•p giao di·ªán tr·ª±c quan ƒë·ªÉ ng∆∞·ªùi d√πng th·ª±c h√†nh, ƒë√°nh gi√° v√† t√πy ch·ªânh m√¥ h√¨nh.

                    **Th√¥ng tin c∆° b·∫£n v·ªÅ d·ªØ li·ªáu:**
                    - **Quy m√¥:** 70,000 ·∫£nh, m·ªói ·∫£nh k√≠ch th∆∞·ªõc 28x28 pixel (t·ªïng c·ªông 784 ƒë·∫∑c tr∆∞ng).
                    - **ƒê·∫∑c tr∆∞ng:** Gi√° tr·ªã pixel t·ª´ 0 ƒë·∫øn 255, bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng vector 784 chi·ªÅu.
                    - **Nhi·ªám v·ª•:** D·ª± ƒëo√°n nh√£n t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9.
                    """, unsafe_allow_html=True)
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

            elif info_option == "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a":
                with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 101, 10):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang t·∫£i n·ªôi dung... {i}%")
                        time.sleep(0.05)
                    st.subheader("üìå T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a")
                    st.markdown("""
                    **MNIST** l√† m·ªôt t·∫≠p d·ªØ li·ªáu ti√™u chu·∫©n trong h·ªçc m√°y, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Yann LeCun v√† c√°c c·ªông s·ª±, th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë√°nh gi√° hi·ªáu su·∫•t c·ªßa c√°c m√¥ h√¨nh ph√¢n lo·∫°i.

                    **ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t:**
                    - **Ngu·ªìn g·ªëc:** Bao g·ªìm ·∫£nh ch·ªØ s·ªë vi·∫øt tay t·ª´ h·ªçc sinh trung h·ªçc v√† nh√¢n vi√™n ƒëi·ªÅu tra d√¢n s·ªë Hoa K·ª≥.
                    - **K√≠ch th∆∞·ªõc:** M·ªói ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i 28x28 pixel, thang ƒë·ªô x√°m v·ªõi gi√° tr·ªã t·ª´ 0 ƒë·∫øn 255.
                    - **Quy m√¥:** T·ªïng c·ªông 70,000 ·∫£nh, chia th√†nh t·∫≠p hu·∫•n luy·ªán (60,000 ·∫£nh) v√† t·∫≠p ki·ªÉm tra (10,000 ·∫£nh).

                    **√ù nghƒ©a:**
                    - L√† n·ªÅn t·∫£ng l√Ω t∆∞·ªüng ƒë·ªÉ th·ª≠ nghi·ªám c√°c thu·∫≠t to√°n h·ªçc m√°y, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.
                    - Gi√∫p ƒë√°nh gi√° kh·∫£ nƒÉng ph√¢n bi·ªát c√°c l·ªõp t∆∞∆°ng t·ª± (v√≠ d·ª•: 4 v√† 9) trong c√°c m√¥ h√¨nh Neural Network.
                    - H·ªó tr·ª£ nghi√™n c·ª©u v√† ƒë√†o t·∫°o cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu l·∫´n c√°c chuy√™n gia trong lƒ©nh v·ª±c h·ªçc s√¢u.
                    """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mnist.png"), caption="T·ªïng quan v·ªÅ t·∫≠p d·ªØ li·ªáu MNIST", width=800)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'mnist.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    status_text.text("ƒê√£ t·∫£i xong! 100%")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

            elif info_option == "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o":
                with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 101, 10):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang t·∫£i th√¥ng tin... {i}%")
                        time.sleep(0.05)
                    st.subheader("üìä 3. Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o")
                    st.markdown("""
                    **Neural Network (M·∫°ng n∆°-ron nh√¢n t·∫°o)** l√† m·ªôt m√¥ h√¨nh h·ªçc m√°y m√¥ ph·ªèng c√°ch ho·∫°t ƒë·ªông c·ªßa m·∫°ng n∆°-ron sinh h·ªçc trong n√£o ng∆∞·ªùi. N√≥ ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ h·ªçc c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p t·ª´ d·ªØ li·ªáu, ƒë·∫∑c bi·ªát hi·ªáu qu·∫£ v·ªõi b√†i to√°n nh·∫≠n di·ªán h√¨nh ·∫£nh nh∆∞ MNIST.
                    """, unsafe_allow_html=True)

                    st.subheader("üåê C·∫•u tr√∫c c∆° b·∫£n c·ªßa Neural Network")
                    st.markdown("""
                    - **L·ªõp ƒë·∫ßu v√†o (Input Layer)**: Nh·∫≠n d·ªØ li·ªáu th√¥ (v√≠ d·ª•: $784$ pixel t·ª´ ·∫£nh MNIST $28 \\times 28$).  
                    - **L·ªõp ·∫©n (Hidden Layers)**: X·ª≠ l√Ω th√¥ng tin th√¥ng qua c√°c ph√©p t√≠nh tuy·∫øn t√≠nh v√† phi tuy·∫øn.  
                    - **L·ªõp ƒë·∫ßu ra (Output Layer)**: ƒê∆∞a ra d·ª± ƒëo√°n (10 l·ªõp, t∆∞∆°ng ·ª©ng v·ªõi c√°c ch·ªØ s·ªë $0$-$9$).  
                    """, unsafe_allow_html=True)

                    st.subheader("üîß Quy tr√¨nh ho·∫°t ƒë·ªông")
                    st.markdown("""
                    Neural Network ho·∫°t ƒë·ªông qua c√°c b∆∞·ªõc sau, ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a d·ª±a tr√™n c√°c tham s·ªë b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh trong tab **Hu·∫•n luy·ªán/ƒê√°nh gi√°**:
                    """, unsafe_allow_html=True)

                    st.subheader("1. Kh·ªüi t·∫°o m√¥ h√¨nh")
                    st.markdown("""
                    - X√°c ƒë·ªãnh c·∫•u tr√∫c m·∫°ng (s·ªë l·ªõp ·∫©n, s·ªë n∆°-ron m·ªói l·ªõp) v√† kh·ªüi t·∫°o **tr·ªçng s·ªë** ($W$) v√† **bias** ($b$) ng·∫´u nhi√™n (th∆∞·ªùng t·ª´ ph√¢n ph·ªëi Gaussian).  
                    - **Tham s·ªë li√™n quan**: S·ªë l·ªõp ·∫©n, s·ªë n∆°-ron m·ªói l·ªõp.  
                    - **Ch√∫ th√≠ch**:  
                      - $W$: Ma tr·∫≠n tr·ªçng s·ªë (weights) k·∫øt n·ªëi c√°c n∆°-ron gi·ªØa c√°c l·ªõp.  
                      - $b$: Vector bias (ƒë·ªô l·ªách) gi√∫p ƒëi·ªÅu ch·ªânh ƒë·∫ßu ra c·ªßa n∆°-ron.  
                    - M·ª•c ƒë√≠ch: Thi·∫øt l·∫≠p c·∫•u tr√∫c ban ƒë·∫ßu ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh h·ªçc.  
                    """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("plnw", "step1_init.png"), caption="Minh h·ªça: Kh·ªüi t·∫°o m√¥ h√¨nh", width=700)
                    except FileNotFoundError:
                        st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 1.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                    st.subheader("2. Lan truy·ªÅn thu·∫≠n (Feedforward)")
                    st.markdown("""
                    - T√≠nh to√°n ƒë·∫ßu ra d·ª± ƒëo√°n ($\\hat{Y}$) t·ª´ ƒë·∫ßu v√†o $X$ qua c√°c l·ªõp:  
                      $$ Z^{(l)} = A^{(l-1)} \\cdot W^{(l)} + b^{(l)} $$  
                      $$ A^{(l)} = \\text{h√†m k√≠ch ho·∫°t}(Z^{(l)}) $$  
                    - **Ch√∫ th√≠ch**:  
                      - $Z^{(l)}$: T·ªïng tr·ªçng s·ªë ƒë·∫ßu v√†o t·∫°i l·ªõp $l$ (tr∆∞·ªõc khi √°p d·ª•ng h√†m k√≠ch ho·∫°t).  
                      - $A^{(l-1)}$: ƒê·∫ßu ra c·ªßa l·ªõp tr∆∞·ªõc ($l-1$), l√† ƒë·∫ßu v√†o c·ªßa l·ªõp $l$.  
                      - $W^{(l)}$: Ma tr·∫≠n tr·ªçng s·ªë c·ªßa l·ªõp $l$.  
                      - $b^{(l)}$: Vector bias c·ªßa l·ªõp $l$.  
                      - $A^{(l)}$: ƒê·∫ßu ra c·ªßa l·ªõp $l$ sau khi √°p d·ª•ng h√†m k√≠ch ho·∫°t.  
                    - M·ª•c ƒë√≠ch: T·∫°o d·ª± ƒëo√°n ban ƒë·∫ßu t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o qua c√°c l·ªõp n∆°-ron.  
                    """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("plnw", "step2_feedforward.png"), caption="Minh h·ªça: Lan truy·ªÅn thu·∫≠n", width=700)
                    except FileNotFoundError:
                        st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 2.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                    st.subheader("3. T√≠nh h√†m m·∫•t m√°t (Loss Function)")
                    st.markdown("""
                    - ƒêo ƒë·ªô sai l·ªách gi·ªØa d·ª± ƒëo√°n ($\\hat{Y}$) v√† nh√£n th·ª±c ($Y$) b·∫±ng **Cross-Entropy**:  
                      $$ L = -\\frac{1}{N} \\sum_{i=1}^{N} \\sum_{j=0}^{9} y_{ij} \\cdot \\log(\\hat{y}_{ij}) $$  
                    - **Ch√∫ th√≠ch**:  
                      - $L$: Gi√° tr·ªã m·∫•t m√°t (loss) t·ªïng th·ªÉ c·ªßa m√¥ h√¨nh.  
                      - $N$: S·ªë l∆∞·ª£ng m·∫´u trong t·∫≠p d·ªØ li·ªáu.  
                      - $y_{ij}$: Gi√° tr·ªã th·ª±c t·∫ø (1 n·∫øu m·∫´u $i$ thu·ªôc l·ªõp $j$, 0 n·∫øu kh√¥ng).  
                      - $\\hat{y}_{ij}$: X√°c su·∫•t d·ª± ƒëo√°n b·ªüi m√¥ h√¨nh cho m·∫´u $i$ thu·ªôc l·ªõp $j$.  
                    - M·ª•c ƒë√≠ch: ƒê·ªãnh l∆∞·ª£ng sai l·ªách ƒë·ªÉ ƒëi·ªÅu ch·ªânh m√¥ h√¨nh trong b∆∞·ªõc ti·∫øp theo.  
                    """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("plnw", "step3_loss.png"), caption="Minh h·ªça: T√≠nh h√†m m·∫•t m√°t", width=700)
                    except FileNotFoundError:
                        st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 3.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                    st.subheader("4. Lan truy·ªÅn ng∆∞·ª£c (Backpropagation)")
                    st.markdown("""
                    - T√≠nh ƒë·∫°o h√†m c·ªßa $L$ ƒë·ªÉ c·∫≠p nh·∫≠t $W^{(l)}$ v√† $b^{(l)}$ nh·∫±m gi·∫£m sai s·ªë d·ª± ƒëo√°n.  
                    - **Ch√∫ th√≠ch**:  
                      - $\\frac{\\partial L}{\\partial W^{(l)}}$: ƒê·∫°o h√†m ri√™ng c·ªßa m·∫•t m√°t $L$ theo tr·ªçng s·ªë $W^{(l)}$.  
                      - $\\frac{\\partial L}{\\partial b^{(l)}}$: ƒê·∫°o h√†m ri√™ng c·ªßa m·∫•t m√°t $L$ theo bias $b^{(l)}$.  
                    - M·ª•c ƒë√≠ch: X√°c ƒë·ªãnh h∆∞·ªõng ƒëi·ªÅu ch·ªânh tham s·ªë d·ª±a tr√™n sai s·ªë.  
                    """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("plnw", "step4_backprop.png"), caption="Minh h·ªça: Lan truy·ªÅn ng∆∞·ª£c", width=700)
                    except FileNotFoundError:
                        st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 4.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                    st.subheader("5. C·∫≠p nh·∫≠t tham s·ªë (Gradient Descent)")
                    st.markdown("""
                    - ƒêi·ªÅu ch·ªânh $W^{(l)}$ v√† $b^{(l)}$ ƒë·ªÉ gi·∫£m m·∫•t m√°t:  
                      $$ W^{(l)} = W^{(l)} - \\eta \\cdot \\frac{\\partial L}{\\partial W^{(l)}} $$  
                      $$ b^{(l)} = b^{(l)} - \\eta \\cdot \\frac{\\partial L}{\\partial b^{(l)}} $$  
                    - **Ch√∫ th√≠ch**:  
                      - $\\eta$: T·ªëc ƒë·ªô h·ªçc (learning rate), ki·ªÉm so√°t m·ª©c ƒë·ªô thay ƒë·ªïi c·ªßa $W$ v√† $b$.  
                      - $\\frac{\\partial L}{\\partial W^{(l)}}$: Gradient c·ªßa $L$ theo $W^{(l)}$.  
                      - $\\frac{\\partial L}{\\partial b^{(l)}}$: Gradient c·ªßa $L$ theo $b^{(l)}$.  
                    - M·ª•c ƒë√≠ch: T·ªëi ∆∞u h√≥a tham s·ªë ƒë·ªÉ gi·∫£m sai s·ªë d·ª± ƒëo√°n.  
                    """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("plnw", "step5_gradient.png"), caption="Minh h·ªça: C·∫≠p nh·∫≠t tham s·ªë", width=700)
                    except FileNotFoundError:
                        st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 5.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                    st.subheader("6. L·∫∑p l·∫°i")
                    st.markdown("""
                    - L·∫∑p l·∫°i t·ª´ b∆∞·ªõc 2 qua nhi·ªÅu **epoch** cho ƒë·∫øn khi m·∫•t m√°t $L$ h·ªôi t·ª•.  
                    - **Ch√∫ th√≠ch**:  
                      - **Epoch**: M·ªôt l·∫ßn l·∫∑p qua to√†n b·ªô t·∫≠p d·ªØ li·ªáu hu·∫•n luy·ªán.  
                    - M·ª•c ƒë√≠ch: Tinh ch·ªânh m√¥ h√¨nh qua nhi·ªÅu v√≤ng l·∫∑p ƒë·ªÉ ƒë·∫°t hi·ªáu su·∫•t t·ªëi ∆∞u.  
                    """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("plnw", "step6_repeat.png"), caption="Minh h·ªça: L·∫∑p l·∫°i", width=700)
                    except FileNotFoundError:
                        st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 6.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                    st.subheader("üîß C√°c tham s·ªë hu·∫•n luy·ªán.")
                    st.markdown("""
                    D∆∞·ªõi ƒë√¢y l√† c√°c tham s·ªë ch√≠nh trong qu√° tr√¨nh hu·∫•n luy·ªán Neural Network, ƒë∆∞·ª£c gi·∫£i th√≠ch chi ti·∫øt v·ªõi √Ω nghƒ©a, c√°ch ho·∫°t ƒë·ªông, c√¥ng th·ª©c (n·∫øu c√≥), v√≠ d·ª• minh h·ªça v√† l∆∞u √Ω khi ƒëi·ªÅu ch·ªânh:

                    ---

                    #### **1. S·ªë l·ªõp ·∫©n (Number of Hidden Layers)**  
                    - **√ù nghƒ©a**: Quy·∫øt ƒë·ªãnh ƒë·ªô s√¢u c·ªßa m·∫°ng, t·ª©c l√† s·ªë l∆∞·ª£ng l·ªõp n∆°-ron n·∫±m gi·ªØa l·ªõp ƒë·∫ßu v√†o v√† l·ªõp ƒë·∫ßu ra.  
                    - **Ho·∫°t ƒë·ªông**:  
                      - M·ªói l·ªõp ·∫©n gi√∫p m·∫°ng h·ªçc ƒë∆∞·ª£c c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p h∆°n t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o.  
                      - V·ªõi b√†i to√°n ƒë∆°n gi·∫£n nh∆∞ MNIST, 1-2 l·ªõp ·∫©n th∆∞·ªùng ƒë·ªß; b√†i to√°n ph·ª©c t·∫°p h∆°n (nh∆∞ nh·∫≠n di·ªán ·∫£nh t·ª± nhi√™n) c√≥ th·ªÉ c·∫ßn nhi·ªÅu l·ªõp h∆°n.  
                    - **C√¥ng th·ª©c**: Kh√¥ng c√≥ c√¥ng th·ª©c c·ª• th·ªÉ, th∆∞·ªùng ƒë∆∞·ª£c ch·ªçn d·ª±a tr√™n kinh nghi·ªám ho·∫∑c th·ª≠ nghi·ªám.  
                    - **V√≠ d·ª•**:  
                      - **1 l·ªõp ·∫©n**: ƒê·ªß ƒë·ªÉ h·ªçc c√°c ƒë·∫∑c tr∆∞ng c∆° b·∫£n trong b√†i to√°n tuy·∫øn t√≠nh ho·∫∑c g·∫ßn tuy·∫øn t√≠nh.  
                      - **2-3 l·ªõp ·∫©n**: Ph√π h·ª£p cho b√†i to√°n phi tuy·∫øn t√≠nh nh∆∞ ph√¢n lo·∫°i ch·ªØ s·ªë MNIST.  
                      - **5 l·ªõp ·∫©n tr·ªü l√™n**: Th∆∞·ªùng d√πng cho m·∫°ng s√¢u (deep learning) v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p h∆°n.  
                    - **L∆∞u √Ω**:  
                      - Qu√° √≠t l·ªõp ·∫©n c√≥ th·ªÉ khi·∫øn m√¥ h√¨nh kh√¥ng h·ªçc ƒë∆∞·ª£c c√°c ƒë·∫∑c tr∆∞ng ƒë·ªß ph·ª©c t·∫°p (underfitting).  
                      - Qu√° nhi·ªÅu l·ªõp ·∫©n l√†m tƒÉng nguy c∆° overfitting (m√¥ h√¨nh h·ªçc qu√° m·ª©c d·ªØ li·ªáu hu·∫•n luy·ªán) v√† kh√≥ h·ªôi t·ª• n·∫øu kh√¥ng ƒë·ªß d·ªØ li·ªáu ho·∫∑c t√†i nguy√™n t√≠nh to√°n.  
                      - Trong ·ª©ng d·ª•ng n√†y, b·∫°n c√≥ th·ªÉ ch·ªçn t·ª´ 1 ƒë·∫øn 5 l·ªõp ·∫©n trong tab "Hu·∫•n luy·ªán/ƒê√°nh gi√°".  

                    ---

                    #### **2. S·ªë n∆°-ron m·ªói l·ªõp ·∫©n (Number of Neurons per Hidden Layer)**  
                    - **√ù nghƒ©a**: Quy·∫øt ƒë·ªãnh ƒë·ªô r·ªông c·ªßa m·∫°ng, t·ª©c l√† s·ªë l∆∞·ª£ng n∆°-ron trong m·ªói l·ªõp ·∫©n, ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng bi·ªÉu di·ªÖn th√¥ng tin.  
                    - **Ho·∫°t ƒë·ªông**:  
                      - Nhi·ªÅu n∆°-ron h∆°n cho ph√©p m·∫°ng h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒë·∫∑c tr∆∞ng h∆°n t·ª´ d·ªØ li·ªáu, nh∆∞ng c≈©ng tƒÉng chi ph√≠ t√≠nh to√°n v√† nguy c∆° overfitting.  
                      - S·ªë n∆°-ron th∆∞·ªùng gi·∫£m d·∫ßn qua c√°c l·ªõp (v√≠ d·ª•: 128 ‚Üí 64 ‚Üí 32) ƒë·ªÉ h·ªçc t·ª´ c√°c ƒë·∫∑c tr∆∞ng chung ƒë·∫øn c·ª• th·ªÉ.  
                    - **C√¥ng th·ª©c**: Kh√¥ng c√≥ c√¥ng th·ª©c c·ªë ƒë·ªãnh, th∆∞·ªùng ch·ªçn l√† l≈©y th·ª´a c·ªßa 2 (16, 32, 64, 128, v.v.) ƒë·ªÉ t·ªëi ∆∞u h√≥a t√≠nh to√°n tr√™n ph·∫ßn c·ª©ng nh∆∞ GPU.  
                    - **V√≠ d·ª•**:  
                      - **32 n∆°-ron**: Ph√π h·ª£p cho m·∫°ng nh·ªè ho·∫∑c d·ªØ li·ªáu ƒë∆°n gi·∫£n.  
                      - **128 n∆°-ron**: Th∆∞·ªùng d√πng cho l·ªõp ·∫©n ƒë·∫ßu ti√™n trong m·∫°ng s√¢u ƒë·ªÉ h·ªçc nhi·ªÅu ƒë·∫∑c tr∆∞ng t·ª´ d·ªØ li·ªáu th√¥ (nh∆∞ ·∫£nh MNIST).  
                      - **64 ‚Üí 32**: M·ªôt c·∫•u h√¨nh ph·ªï bi·∫øn cho m·∫°ng 2 l·ªõp ·∫©n khi x·ª≠ l√Ω MNIST.  
                    - **L∆∞u √Ω**:  
                      - Qu√° nhi·ªÅu n∆°-ron c√≥ th·ªÉ l√†m m√¥ h√¨nh ph·ª©c t·∫°p kh√¥ng c·∫ßn thi·∫øt, d·∫´n ƒë·∫øn overfitting ho·∫∑c y√™u c·∫ßu nhi·ªÅu t√†i nguy√™n h∆°n.  
                      - Qu√° √≠t n∆°-ron khi·∫øn m√¥ h√¨nh kh√¥ng h·ªçc ƒë·ªß ƒë·∫∑c tr∆∞ng, g√¢y underfitting.  
                      - Trong ·ª©ng d·ª•ng n√†y, b·∫°n c√≥ th·ªÉ t√πy ch·ªânh s·ªë n∆°-ron cho t·ª´ng l·ªõp ·∫©n trong tab "Hu·∫•n luy·ªán/ƒê√°nh gi√°".  

                    ---

                    #### **3. T·ªëc ƒë·ªô h·ªçc (Learning Rate - Œ∑)**  
                    - **√ù nghƒ©a**: ƒêi·ªÅu ch·ªânh m·ª©c ƒë·ªô thay ƒë·ªïi c·ªßa tr·ªçng s·ªë v√† bias trong m·ªói l·∫ßn c·∫≠p nh·∫≠t, ·∫£nh h∆∞·ªüng ƒë·∫øn t·ªëc ƒë·ªô v√† ch·∫•t l∆∞·ª£ng h·ªôi t·ª• c·ªßa m√¥ h√¨nh.  
                    - **Ho·∫°t ƒë·ªông**:  
                      - Gi√° tr·ªã nh·ªè (v√≠ d·ª•: 0.0001) gi√∫p m√¥ h√¨nh h·ªçc ch·∫≠m nh∆∞ng ·ªïn ƒë·ªãnh, √≠t v∆∞·ª£t qua ƒëi·ªÉm t·ªëi ∆∞u c·ªßa h√†m m·∫•t m√°t.  
                      - Gi√° tr·ªã l·ªõn (v√≠ d·ª•: 0.01) l√†m m√¥ h√¨nh h·ªçc nhanh h∆°n nh∆∞ng c√≥ th·ªÉ dao ƒë·ªông ho·∫∑c kh√¥ng h·ªôi t·ª•.  
                    - **C√¥ng th·ª©c**:  
                      $$ W_{t+1} = W_t - \\eta \\cdot \\frac{\\partial L}{\\partial W_t} $$  
                      $$ b_{t+1} = b_t - \\eta \\cdot \\frac{\\partial L}{\\partial b_t} $$  
                      - $W_{t+1}$, $b_{t+1}$: Tr·ªçng s·ªë v√† bias sau khi c·∫≠p nh·∫≠t.  
                      - $W_t$, $b_t$: Tr·ªçng s·ªë v√† bias hi·ªán t·∫°i.  
                      - $\\eta$: T·ªëc ƒë·ªô h·ªçc.  
                      - $\\frac{\\partial L}{\\partial W_t}$, $\\frac{\\partial L}{\\partial b_t}$: Gradient c·ªßa h√†m m·∫•t m√°t theo tr·ªçng s·ªë v√† bias.  
                    - **V√≠ d·ª•**:  
                      - **$\\eta = 0.001$**: Ph√π h·ª£p cho b√†i to√°n ph·ª©c t·∫°p nh∆∞ MNIST, c·∫ßn h·ªôi t·ª• ch·∫≠m v√† ·ªïn ƒë·ªãnh.  
                      - **$\\eta = 0.01$**: C√≥ th·ªÉ d√πng cho b√†i to√°n ƒë∆°n gi·∫£n ho·∫∑c khi mu·ªën th·ª≠ nghi·ªám nhanh.  
                      - **$\\eta = 0.0001$**: Th√≠ch h·ª£p khi m·∫°ng s√¢u ho·∫∑c d·ªØ li·ªáu l·ªõn, tr√°nh dao ƒë·ªông qu√° m·ª©c.  
                    - **L∆∞u √Ω**:  
                      - T·ªëc ƒë·ªô h·ªçc qu√° cao khi·∫øn m√¥ h√¨nh kh√¥ng h·ªôi t·ª•, dao ƒë·ªông quanh ƒëi·ªÉm t·ªëi ∆∞u.  
                      - T·ªëc ƒë·ªô h·ªçc qu√° th·∫•p l√†m qu√° tr√¨nh hu·∫•n luy·ªán ch·∫≠m, t·ªën th·ªùi gian.  
                      - Trong ·ª©ng d·ª•ng n√†y, gi√° tr·ªã m·∫∑c ƒë·ªãnh th∆∞·ªùng l√† 0.001, nh∆∞ng b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh trong tab "Hu·∫•n luy·ªán/ƒê√°nh gi√°".  

                    ---

                    #### **4. S·ªë l·∫ßn l·∫∑p (Epochs)**  
                    - **√ù nghƒ©a**: S·ªë l·∫ßn to√†n b·ªô d·ªØ li·ªáu hu·∫•n luy·ªán ƒë∆∞·ª£c ƒë∆∞a qua m·∫°ng, quy·∫øt ƒë·ªãnh m·ª©c ƒë·ªô tinh ch·ªânh c·ªßa m√¥ h√¨nh.  
                    - **Ho·∫°t ƒë·ªông**:  
                      - M·ªói epoch l√† m·ªôt l·∫ßn m·∫°ng h·ªçc t·ª´ to√†n b·ªô d·ªØ li·ªáu, gi√∫p c·∫≠p nh·∫≠t tr·ªçng s·ªë v√† bias ƒë·ªÉ gi·∫£m h√†m m·∫•t m√°t.  
                      - TƒÉng s·ªë epoch c·∫£i thi·ªán hi·ªáu su·∫•t, nh∆∞ng qu√° nhi·ªÅu c√≥ th·ªÉ d·∫´n ƒë·∫øn overfitting n·∫øu kh√¥ng ki·ªÉm so√°t.  
                    - **C√¥ng th·ª©c**: Kh√¥ng c√≥ c√¥ng th·ª©c c·ª• th·ªÉ, l√† tham s·ªë do ng∆∞·ªùi d√πng ch·ªçn.  
                    - **V√≠ d·ª•**:  
                      - **10 epochs**: Ph√π h·ª£p cho th·ª≠ nghi·ªám nhanh ho·∫∑c d·ªØ li·ªáu l·ªõn khi t√†i nguy√™n h·∫°n ch·∫ø.  
                      - **50 epochs**: Th∆∞·ªùng d√πng cho hu·∫•n luy·ªán c∆° b·∫£n v·ªõi d·ªØ li·ªáu v·ª´a ph·∫£i (nh∆∞ 10,000 m·∫´u MNIST).  
                      - **100 epochs**: D√πng cho hu·∫•n luy·ªán chuy√™n s√¢u ƒë·ªÉ ƒë·∫°t ƒë·ªô ch√≠nh x√°c cao (nh∆∞ 70,000 m·∫´u MNIST).  
                    - **L∆∞u √Ω**:  
                      - Qu√° √≠t epoch khi·∫øn m√¥ h√¨nh ch∆∞a h·ªçc ƒë·ªß, d·∫´n ƒë·∫øn underfitting.  
                      - Qu√° nhi·ªÅu epoch l√†m tƒÉng nguy c∆° overfitting, ƒë·∫∑c bi·ªát n·∫øu kh√¥ng d√πng k·ªπ thu·∫≠t nh∆∞ Early Stopping.  
                      - Trong ·ª©ng d·ª•ng n√†y, b·∫°n c√≥ th·ªÉ ch·ªçn t·ª´ 10 ƒë·∫øn 200 epochs, v√† n√™n d√πng Early Stopping ƒë·ªÉ d·ª´ng khi m√¥ h√¨nh kh√¥ng c·∫£i thi·ªán th√™m.  

                    ---

                    #### **5. K√≠ch th∆∞·ªõc batch (Batch Size)**  
                    - **√ù nghƒ©a**: S·ªë m·∫´u d·ªØ li·ªáu ƒë∆∞·ª£c x·ª≠ l√Ω trong m·ªôt l·∫ßn lan truy·ªÅn thu·∫≠n v√† ng∆∞·ª£c tr∆∞·ªõc khi c·∫≠p nh·∫≠t tr·ªçng s·ªë.  
                    - **Ho·∫°t ƒë·ªông**:  
                      - **Batch nh·ªè** (v√≠ d·ª•: 16): C·∫≠p nh·∫≠t tr·ªçng s·ªë th∆∞·ªùng xuy√™n, gi√∫p h·ªçc chi ti·∫øt h∆°n nh∆∞ng ch·∫≠m v√† c√≥ th·ªÉ dao ƒë·ªông.  
                      - **Batch l·ªõn** (v√≠ d·ª•: 256): C·∫≠p nh·∫≠t √≠t th∆∞·ªùng xuy√™n h∆°n, tƒÉng t·ªëc hu·∫•n luy·ªán nh∆∞ng c·∫ßn nhi·ªÅu b·ªô nh·ªõ v√† c√≥ th·ªÉ b·ªè qua chi ti·∫øt.  
                    - **C√¥ng th·ª©c**: Kh√¥ng c√≥ c√¥ng th·ª©c c·ªë ƒë·ªãnh, th∆∞·ªùng ch·ªçn l√† l≈©y th·ª´a c·ªßa 2 (16, 32, 64, 128, 256, v.v.) ƒë·ªÉ t·ªëi ∆∞u h√≥a t√≠nh to√°n tr√™n ph·∫ßn c·ª©ng.  
                    - **V√≠ d·ª•**:  
                      - **Batch size = 32**: Ph√π h·ª£p cho d·ªØ li·ªáu nh·ªè ho·∫∑c th·ª≠ nghi·ªám nhanh (nh∆∞ 1,000 m·∫´u MNIST).  
                      - **Batch size = 128**: Th∆∞·ªùng d√πng cho d·ªØ li·ªáu v·ª´a (nh∆∞ 50,000 m·∫´u MNIST) ƒë·ªÉ c√¢n b·∫±ng t·ªëc ƒë·ªô v√† ƒë·ªô ch√≠nh x√°c.  
                      - **Batch size = 256**: D√πng cho d·ªØ li·ªáu l·ªõn (nh∆∞ 70,000 m·∫´u MNIST) ƒë·ªÉ tƒÉng t·ªëc hu·∫•n luy·ªán.  
                    - **L∆∞u √Ω**:  
                      - Batch qu√° nh·ªè l√†m hu·∫•n luy·ªán kh√¥ng ·ªïn ƒë·ªãnh, d·ªÖ dao ƒë·ªông quanh ƒëi·ªÉm t·ªëi ∆∞u.  
                      - Batch qu√° l·ªõn c√≥ th·ªÉ khi·∫øn m√¥ h√¨nh kh√¥ng h·ªçc ƒë∆∞·ª£c c√°c ƒë·∫∑c tr∆∞ng chi ti·∫øt, ƒë·∫∑c bi·ªát v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p.  
                      - Trong ·ª©ng d·ª•ng n√†y, gi√° tr·ªã m·∫∑c ƒë·ªãnh ph·ª• thu·ªôc v√†o s·ªë l∆∞·ª£ng m·∫´u (32, 64, 128, ho·∫∑c 256), nh∆∞ng b·∫°n c√≥ th·ªÉ t√πy ch·ªânh.  

                    ---

                    #### **6. H√†m k√≠ch ho·∫°t (Activation Function)**  
                    - **√ù nghƒ©a**: Quy·∫øt ƒë·ªãnh c√°ch n∆°-ron "k√≠ch ho·∫°t" ƒë·∫ßu ra d·ª±a tr√™n ƒë·∫ßu v√†o, gi√∫p m·∫°ng h·ªçc ƒë∆∞·ª£c c√°c m·ªëi quan h·ªá phi tuy·∫øn t√≠nh.  
                    - **Ho·∫°t ƒë·ªông**:  
                      - Chuy·ªÉn ƒë·ªïi gi√° tr·ªã tuy·∫øn t√≠nh (t·ªïng tr·ªçng s·ªë) th√†nh phi tuy·∫øn ƒë·ªÉ m√¥ h√¨nh h·ªçc ƒë∆∞·ª£c c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p.  
                      - ƒê∆∞·ª£c √°p d·ª•ng sau m·ªói l·ªõp (tr·ª´ l·ªõp ƒë·∫ßu ra trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p).  
                    - **C√°c h√†m k√≠ch ho·∫°t ph·ªï bi·∫øn**:  
                      - **ReLU (Rectified Linear Unit)**:  
                        - **√ù nghƒ©a**: ƒê∆°n gi·∫£n, nhanh, gi√∫p tr√°nh v·∫•n ƒë·ªÅ bi·∫øn m·∫•t gradient trong m·∫°ng s√¢u.  
                        - **Ho·∫°t ƒë·ªông**: Ch·ªâ cho ph√©p gi√° tr·ªã d∆∞∆°ng ƒëi qua, ƒë·∫∑t t·∫•t c·∫£ gi√° tr·ªã √¢m v·ªÅ 0.  
                        - **C√¥ng th·ª©c**:  
                          $$ f(x) = \\max(0, x) $$  
                        - **V√≠ d·ª•**:  
                          - N·∫øu $x = 3$, th√¨ $f(3) = 3$.  
                          - N·∫øu $x = -1$, th√¨ $f(-1) = 0$.  
                        - **L∆∞u √Ω**:  
                          - Th∆∞·ªùng d√πng cho l·ªõp ·∫©n v√¨ hi·ªáu qu·∫£ v√† ƒë∆°n gi·∫£n.  
                          - C√≥ th·ªÉ g√¢y "dead neurons" (n∆°-ron kh√¥ng ho·∫°t ƒë·ªông) n·∫øu ƒë·∫ßu v√†o lu√¥n √¢m.  
                      - **Tanh (Hyperbolic Tangent)**:  
                        - **√ù nghƒ©a**: Chu·∫©n h√≥a ƒë·∫ßu ra v·ªÅ kho·∫£ng [-1, 1], ph√π h·ª£p khi c·∫ßn c√¢n b·∫±ng gi√° tr·ªã √¢m v√† d∆∞∆°ng.  
                        - **Ho·∫°t ƒë·ªông**: T·∫°o ƒë·∫ßu ra phi tuy·∫øn, nh∆∞ng d·ªÖ g·∫∑p v·∫•n ƒë·ªÅ bi·∫øn m·∫•t gradient trong m·∫°ng s√¢u.  
                        - **C√¥ng th·ª©c**:  
                          $$ f(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}} $$  
                        - **V√≠ d·ª•**:  
                          - N·∫øu $x = 0$, th√¨ $f(0) = 0$.  
                          - N·∫øu $x = 1$, th√¨ $f(1) \\approx 0.76$.  
                          - N·∫øu $x = -1$, th√¨ $f(-1) \\approx -0.76$.  
                        - **L∆∞u √Ω**:  
                          - √çt d√πng h∆°n ReLU do v·∫•n ƒë·ªÅ bi·∫øn m·∫•t gradient, nh∆∞ng v·∫´n h·ªØu √≠ch trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p.  
                      - **Softmax**:  
                        - **√ù nghƒ©a**: D√πng ·ªü l·ªõp ƒë·∫ßu ra ƒë·ªÉ chuy·ªÉn ƒë·ªïi ƒë·∫ßu ra th√†nh x√°c su·∫•t cho b√†i to√°n ph√¢n lo·∫°i ƒëa l·ªõp (nh∆∞ MNIST).  
                        - **Ho·∫°t ƒë·ªông**: Chu·∫©n h√≥a t·ªïng c√°c ƒë·∫ßu ra th√†nh 1, gi√∫p ch·ªçn l·ªõp c√≥ x√°c su·∫•t cao nh·∫•t.  
                        - **C√¥ng th·ª©c**:  
                          $$ f(x_i) = \\frac{e^{x_i}}{\\sum_{j=0}^{k} e^{x_j}} $$  
                          - $x_i$: ƒê·∫ßu v√†o c·ªßa n∆°-ron th·ª© $i$.  
                          - $k$: S·ªë l·ªõp (·ªü ƒë√¢y l√† 10, t·ª´ 0-9).  
                        - **V√≠ d·ª•**:  
                          - N·∫øu $x = [1, 2, 3]$, th√¨ $f(x) \\approx [0.09, 0.24, 0.67]$.  
                          - T·ªïng x√°c su·∫•t lu√¥n b·∫±ng 1.  
                        - **L∆∞u √Ω**:  
                          - B·∫Øt bu·ªôc d√πng ·ªü l·ªõp ƒë·∫ßu ra cho b√†i to√°n ph√¢n lo·∫°i ƒëa l·ªõp nh∆∞ MNIST.  
                    - **L∆∞u √Ω chung**:  
                      - ReLU l√† l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh cho l·ªõp ·∫©n trong ·ª©ng d·ª•ng n√†y v√¨ t√≠nh hi·ªáu qu·∫£ v√† ph·ªï bi·∫øn.  
                      - Softmax lu√¥n ƒë∆∞·ª£c d√πng ·ªü l·ªõp ƒë·∫ßu ra ƒë·ªÉ d·ª± ƒëo√°n ch·ªØ s·ªë t·ª´ 0-9.  
                      - B·∫°n c√≥ th·ªÉ ch·ªçn gi·ªØa ReLU, Tanh, ho·∫∑c Softmax trong tab "Hu·∫•n luy·ªán/ƒê√°nh gi√°" cho l·ªõp ·∫©n.  

                    ---

                    #### **7. Tr√¨nh t·ªëi ∆∞u (Optimizer)**  
                    - **√ù nghƒ©a**: Thu·∫≠t to√°n ƒëi·ªÅu ch·ªânh tr·ªçng s·ªë v√† bias ƒë·ªÉ gi·∫£m h√†m m·∫•t m√°t, quy·∫øt ƒë·ªãnh c√°ch m√¥ h√¨nh h·ªçc.  
                    - **Ho·∫°t ƒë·ªông**:  
                      - D√πng gradient (ƒë·∫°o h√†m c·ªßa h√†m m·∫•t m√°t) ƒë·ªÉ c·∫≠p nh·∫≠t tham s·ªë, v·ªõi c√°ch ti·∫øp c·∫≠n kh√°c nhau t√πy thu·∫≠t to√°n.  
                    - **C√°c tr√¨nh t·ªëi ∆∞u ph·ªï bi·∫øn**:  
                      - **SGD (Stochastic Gradient Descent)**:  
                        - **√ù nghƒ©a**: C·∫≠p nh·∫≠t tr·ªçng s·ªë d·ª±a tr√™n gradient c·ªßa m·ªôt m·∫´u ho·∫∑c mini-batch, l√† phi√™n b·∫£n ng·∫´u nhi√™n c·ªßa Gradient Descent.  
                        - **Ho·∫°t ƒë·ªông**: T√≠nh gradient cho t·ª´ng batch v√† ƒëi·ªÅu ch·ªânh tham s·ªë theo h∆∞·ªõng gi·∫£m m·∫•t m√°t.  
                        - **C√¥ng th·ª©c**:  
                          $$ W_{t+1} = W_t - \\eta \\cdot \\frac{\\partial L}{\\partial W_t} $$  
                          $$ b_{t+1} = b_t - \\eta \\cdot \\frac{\\partial L}{\\partial b_t} $$  
                          - $W_t$, $b_t$: Tr·ªçng s·ªë v√† bias hi·ªán t·∫°i.  
                          - $\\eta$: T·ªëc ƒë·ªô h·ªçc.  
                          - $\\frac{\\partial L}{\\partial W_t}$, $\\frac{\\partial L}{\\partial b_t}$: Gradient.  
                        - **V√≠ d·ª•**:  
                          - V·ªõi $\\eta = 0.01$, n·∫øu gradient $\\frac{\\partial L}{\\partial W_t} = 0.5$, th√¨ $W_{t+1} = W_t - 0.01 \\cdot 0.5 = W_t - 0.005$.  
                        - **∆Øu ƒëi·ªÉm**: ƒê∆°n gi·∫£n, hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu l·ªõn khi d√πng mini-batch.  
                        - **Nh∆∞·ª£c ƒëi·ªÉm**: Dao ƒë·ªông quanh ƒëi·ªÉm t·ªëi ∆∞u, h·ªôi t·ª• ch·∫≠m n·∫øu kh√¥ng ƒëi·ªÅu ch·ªânh t·ªët.  
                      - **Adam (Adaptive Moment Estimation)**:  
                        - **√ù nghƒ©a**: K·∫øt h·ª£p ph∆∞∆°ng ph√°p ƒë·ªông l∆∞·ª£ng v√† RMSProp, th√≠ch nghi t·ªëc ƒë·ªô h·ªçc cho t·ª´ng tham s·ªë.  
                        - **Ho·∫°t ƒë·ªông**: D√πng hai moment (b·∫≠c 1 v√† b·∫≠c 2) c·ªßa gradient ƒë·ªÉ ƒëi·ªÅu ch·ªânh c·∫≠p nh·∫≠t, gi√∫p h·ªôi t·ª• nhanh v√† ·ªïn ƒë·ªãnh h∆°n SGD.  
                        - **C√¥ng th·ª©c**:  
                          1. $m_t = \\beta_1 \\cdot m_{t-1} + (1 - \\beta_1) \\cdot g_t$ (moment b·∫≠c 1 - trung b√¨nh ƒë·ªông c·ªßa gradient).  
                          2. $v_t = \\beta_2 \\cdot v_{t-1} + (1 - \\beta_2) \\cdot g_t^2$ (moment b·∫≠c 2 - trung b√¨nh ƒë·ªông c·ªßa b√¨nh ph∆∞∆°ng gradient).  
                          3. $\\hat{m}_t = \\frac{m_t}{1 - \\beta_1^t}$, $\\hat{v}_t = \\frac{v_t}{1 - \\beta_2^t}$ (hi·ªáu ch·ªânh bias).  
                          4. $W_{t+1} = W_t - \\eta \\cdot \\frac{\\hat{m}_t}{\\sqrt{\\hat{v}_t} + \\epsilon}$ (c·∫≠p nh·∫≠t tr·ªçng s·ªë).  
                          - $g_t$: Gradient t·∫°i b∆∞·ªõc $t$.  
                          - $\\beta_1 \\approx 0.9$, $\\beta_2 \\approx 0.999$: H·ªá s·ªë gi·∫£m d·∫ßn.  
                          - $\\epsilon \\approx 10^{-8}$: H·∫±ng s·ªë nh·ªè ƒë·ªÉ tr√°nh chia cho 0.  
                        - **V√≠ d·ª•**:  
                          - V·ªõi gradient $g_t = 0.5$, Adam t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô h·ªçc d·ª±a tr√™n $m_t$ v√† $v_t$, gi√∫p c·∫≠p nh·∫≠t ·ªïn ƒë·ªãnh h∆°n SGD.  
                        - **∆Øu ƒëi·ªÉm**: Nhanh, ·ªïn ƒë·ªãnh, hi·ªáu qu·∫£ v·ªõi h·∫ßu h·∫øt b√†i to√°n, ƒë·∫∑c bi·ªát l√† m·∫°ng s√¢u.  
                        - **Nh∆∞·ª£c ƒëi·ªÉm**: Ph·ª©c t·∫°p h∆°n SGD, ƒë√¥i khi k√©m hi·ªáu qu·∫£ tr√™n h√†m m·∫•t m√°t kh√¥ng l·ªìi.  
                    - **L∆∞u √Ω**:  
                      - **Adam** l√† l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh trong ·ª©ng d·ª•ng n√†y v√¨ kh·∫£ nƒÉng h·ªôi t·ª• nhanh v√† ·ªïn ƒë·ªãnh.  
                      - **SGD** ph√π h·ª£p khi b·∫°n mu·ªën ki·ªÉm so√°t chi ti·∫øt qu√° tr√¨nh hu·∫•n luy·ªán ho·∫∑c khi l√†m vi·ªác v·ªõi d·ªØ li·ªáu r·∫•t l·ªõn.  
                      - B·∫°n c√≥ th·ªÉ ch·ªçn gi·ªØa SGD v√† Adam trong tab "Hu·∫•n luy·ªán/ƒê√°nh gi√°".  

                    ---

                    C√°c tham s·ªë tr√™n ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh trong tab **"Hu·∫•n luy·ªán/ƒê√°nh gi√°"** c·ªßa ·ª©ng d·ª•ng n√†y. Vi·ªác hi·ªÉu r√µ √Ω nghƒ©a v√† c√°ch ho·∫°t ƒë·ªông c·ªßa ch√∫ng s·∫Ω gi√∫p b·∫°n t·ªëi ∆∞u h√≥a m√¥ h√¨nh Neural Network ƒë·ªÉ ƒë·∫°t hi·ªáu su·∫•t t·ªët nh·∫•t tr√™n t·∫≠p d·ªØ li·ªáu MNIST!
                    """, unsafe_allow_html=True)

                    st.subheader("üåü ∆Øu ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm c·ªßa Neural Network")
                    st.markdown("""
                    #### **∆Øu ƒëi·ªÉm:**  
                    - **Kh·∫£ nƒÉng h·ªçc phi tuy·∫øn t√≠nh**: Neural Network c√≥ th·ªÉ h·ªçc c√°c m·ªëi quan h·ªá ph·ª©c t·∫°p, phi tuy·∫øn t√≠nh trong d·ªØ li·ªáu m√† c√°c m√¥ h√¨nh tuy·∫øn t√≠nh kh√¥ng l√†m ƒë∆∞·ª£c.  
                    - **Kh·∫£ nƒÉng m·ªü r·ªông**: C√≥ th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn v√† nhi·ªÅu chi·ªÅu (nh∆∞ ·∫£nh, √¢m thanh) khi ƒë∆∞·ª£c hu·∫•n luy·ªán ƒë√∫ng c√°ch.  
                    - **T√≠nh linh ho·∫°t**: C√≥ th·ªÉ √°p d·ª•ng cho nhi·ªÅu b√†i to√°n kh√°c nhau (ph√¢n lo·∫°i, h·ªìi quy, nh·∫≠n di·ªán h√¨nh ·∫£nh, v.v.).  
                    - **T·ª± ƒë·ªông h·ªçc ƒë·∫∑c tr∆∞ng**: Kh√¥ng c·∫ßn tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng th·ªß c√¥ng, m·∫°ng t·ª± ƒë·ªông h·ªçc t·ª´ d·ªØ li·ªáu th√¥.  

                    #### **Nh∆∞·ª£c ƒëi·ªÉm:**  
                    - **ƒê√≤i h·ªèi t√†i nguy√™n l·ªõn**: C·∫ßn nhi·ªÅu d·ªØ li·ªáu v√† s·ª©c m·∫°nh t√≠nh to√°n (CPU/GPU) ƒë·ªÉ hu·∫•n luy·ªán hi·ªáu qu·∫£.  
                    - **Kh√≥ gi·∫£i th√≠ch**: M·∫°ng ho·∫°t ƒë·ªông nh∆∞ "h·ªôp ƒëen", kh√≥ hi·ªÉu t·∫°i sao l·∫°i ƒë∆∞a ra d·ª± ƒëo√°n c·ª• th·ªÉ.  
                    - **D·ªÖ b·ªã overfitting**: N·∫øu kh√¥ng ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh t·ªët (v√≠ d·ª•: thi·∫øu d·ªØ li·ªáu ho·∫∑c kh√¥ng d√πng regularization), m√¥ h√¨nh c√≥ th·ªÉ h·ªçc qu√° m·ª©c d·ªØ li·ªáu hu·∫•n luy·ªán.  
                    - **Th·ªùi gian hu·∫•n luy·ªán l√¢u**: ƒê·∫∑c bi·ªát v·ªõi m·∫°ng s√¢u ho·∫∑c d·ªØ li·ªáu l·ªõn.  
                    """, unsafe_allow_html=True)

            elif info_option == "Pseudo-Labeling ‚Äì K·ªπ thu·∫≠t h·ªçc b√°n gi√°m s√°t":
                with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 101, 10):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang t·∫£i n·ªôi dung... {i}%")
                        time.sleep(0.05)
                    st.subheader("üìå Pseudo-Labeling ‚Äì K·ªπ thu·∫≠t h·ªçc b√°n gi√°m s√°t")
                    st.markdown("""
                    **Pseudo-Labeling** l√† m·ªôt ph∆∞∆°ng ph√°p h·ªçc b√°n gi√°m s√°t (semi-supervised learning) gi√∫p t·∫≠n d·ª•ng c·∫£ d·ªØ li·ªáu c√≥ nh√£n v√† kh√¥ng c√≥ nh√£n ƒë·ªÉ n√¢ng cao hi·ªáu su·∫•t m√¥ h√¨nh, ƒë·∫∑c bi·ªát h·ªØu √≠ch khi d·ªØ li·ªáu c√≥ nh√£n khan hi·∫øm. K·ªπ thu·∫≠t n√†y s·ª≠ d·ª•ng m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán ƒë·ªÉ d·ª± ƒëo√°n nh√£n gi·∫£ (pseudo-labels) cho d·ªØ li·ªáu kh√¥ng c√≥ nh√£n, sau ƒë√≥ k·∫øt h·ª£p ch√∫ng v√†o qu√° tr√¨nh hu·∫•n luy·ªán.

                    **C√°c b∆∞·ªõc th·ª±c hi·ªán Pseudo-Labeling v·ªõi Neural Network:**
                    1. **Chu·∫©n b·ªã d·ªØ li·ªáu v√† chia t·∫≠p train/test**  
                       - Chu·∫©n h√≥a d·ªØ li·ªáu (v√≠ d·ª•: ƒë∆∞a v·ªÅ thang [0, 1]) v√† chia th√†nh t·∫≠p hu·∫•n luy·ªán (train) v√† t·∫≠p ki·ªÉm tra (test).  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step1.png"), caption="Chu·∫©n b·ªã d·ªØ li·ªáu v√† chia t·∫≠p", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step1.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    st.markdown("""
                    2. **L·∫•y 1% s·ªë l∆∞·ª£ng ·∫£nh cho m·ªói l·ªõp (0-9) l√†m t·∫≠p ban ƒë·∫ßu**  
                       - Ch·ªçn 1% m·∫´u t·ª´ m·ªói l·ªõp trong t·∫≠p train ƒë·ªÉ t·∫°o t·∫≠p d·ªØ li·ªáu c√≥ nh√£n ban ƒë·∫ßu, ph·∫ßn c√≤n l·∫°i (99%) l√† d·ªØ li·ªáu kh√¥ng c√≥ nh√£n.  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step2.png"), caption="L·∫•y 1% d·ªØ li·ªáu c√≥ nh√£n ban ƒë·∫ßu", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step2.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    st.markdown("""
                    3. **Hu·∫•n luy·ªán m√¥ h√¨nh Neural Network tr√™n t·∫≠p 1% ban ƒë·∫ßu**  
                       - S·ª≠ d·ª•ng t·∫≠p d·ªØ li·ªáu c√≥ nh√£n (1%) ƒë·ªÉ hu·∫•n luy·ªán m·ªôt m√¥ h√¨nh Neural Network c∆° b·∫£n.  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step3.png"), caption="Hu·∫•n luy·ªán m√¥ h√¨nh tr√™n 1% d·ªØ li·ªáu", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step3.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    st.markdown("""
                    4. **D·ª± ƒëo√°n nh√£n cho d·ªØ li·ªáu kh√¥ng c√≥ nh√£n (99%)**  
                       - S·ª≠ d·ª•ng m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán ƒë·ªÉ d·ª± ƒëo√°n nh√£n v√† ƒë·ªô tin c·∫≠y cho t·∫≠p d·ªØ li·ªáu kh√¥ng c√≥ nh√£n.  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step4.png"), caption="D·ª± ƒëo√°n nh√£n cho d·ªØ li·ªáu kh√¥ng c√≥ nh√£n", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step4.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    st.markdown("""
                    5. **G√°n nh√£n gi·∫£ v·ªõi ng∆∞·ª°ng tin c·∫≠y (threshold = 0.95)**  
                       - L·ªçc c√°c d·ª± ƒëo√°n c√≥ ƒë·ªô tin c·∫≠y ‚â• 0.95 ƒë·ªÉ g√°n nh√£n gi·∫£, c√°c m·∫´u c√≤n l·∫°i gi·ªØ nguy√™n l√† kh√¥ng c√≥ nh√£n.  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step5.png"), caption="G√°n nh√£n gi·∫£ v·ªõi ng∆∞·ª°ng tin c·∫≠y", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step5.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    st.markdown("""
                    6. **Hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh v·ªõi t·∫≠p d·ªØ li·ªáu m·ªõi**  
                       - K·∫øt h·ª£p t·∫≠p 1% ban ƒë·∫ßu v·ªõi d·ªØ li·ªáu v·ª´a g√°n nh√£n gi·∫£ ƒë·ªÉ hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh.  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step6.png"), caption="Hu·∫•n luy·ªán l·∫°i v·ªõi d·ªØ li·ªáu m·ªõi", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step6.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    st.markdown("""
                    7. **L·∫∑p l·∫°i c√°c b∆∞·ªõc 4-6 cho ƒë·∫øn khi ƒë·∫°t ƒëi·ªÅu ki·ªán d·ª´ng**  
                       - Ti·∫øp t·ª•c d·ª± ƒëo√°n, g√°n nh√£n gi·∫£ v√† hu·∫•n luy·ªán l·∫°i cho ƒë·∫øn khi kh√¥ng c√≤n d·ªØ li·ªáu kh√¥ng c√≥ nh√£n ho·∫∑c ƒë·∫°t s·ªë v√≤ng l·∫∑p t·ªëi ƒëa (v√≠ d·ª•: 5 v√≤ng).  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step7.png"), caption="L·∫∑p l·∫°i quy tr√¨nh cho ƒë·∫øn ƒëi·ªÅu ki·ªán d·ª´ng", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step7.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                    st.markdown("""
                    8. **Hu·∫•n luy·ªán l·∫ßn cu·ªëi v√† ƒë√°nh gi√°**  
                       - Hu·∫•n luy·ªán m√¥ h√¨nh cu·ªëi c√πng tr√™n to√†n b·ªô d·ªØ li·ªáu ƒë√£ g·∫Øn nh√£n v√† ƒë√°nh gi√° tr√™n t·∫≠p test.  
                       - Minh h·ªça:  
                       """, unsafe_allow_html=True)
                    try:
                        st.image(os.path.join("mhpersoudo", "pseudo_step8.png"), caption="Hu·∫•n luy·ªán l·∫ßn cu·ªëi v√† ƒë√°nh gi√°", width=600)
                    except FileNotFoundError:
                        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça 'pseudo_step8.png'. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")

                    st.markdown("""
                    **L·ª£i √≠ch:**
                    - T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t m√¥ h√¨nh b·∫±ng c√°ch khai th√°c d·ªØ li·ªáu kh√¥ng c√≥ nh√£n.
                    - Gi·∫£m chi ph√≠ g·∫Øn nh√£n th·ªß c√¥ng trong c√°c d·ª± √°n th·ª±c t·∫ø.

                    **Th√°ch th·ª©c:**
                    - Nh√£n gi·∫£ c√≥ th·ªÉ ch·ª©a nhi·ªÖu n·∫øu m√¥ h√¨nh ban ƒë·∫ßu ch∆∞a ƒë·ªß ch√≠nh x√°c.
                    - Y√™u c·∫ßu ƒëi·ªÅu ch·ªânh ng∆∞·ª°ng tin c·∫≠y ƒë·ªÉ c√¢n b·∫±ng gi·ªØa ch·∫•t l∆∞·ª£ng v√† s·ªë l∆∞·ª£ng nh√£n gi·∫£.
                    """, unsafe_allow_html=True)

                    st.subheader("‚öôÔ∏è C√°c tham s·ªë c·ªßa Pseudo-Labeling trong Hu·∫•n luy·ªán")
                    st.markdown("""
                    Trong qu√° tr√¨nh hu·∫•n luy·ªán b√†i to√°n ph√¢n lo·∫°i MNIST v·ªõi Pseudo-Labeling, c√°c tham s·ªë sau ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒëi·ªÅu khi·ªÉn k·ªπ thu·∫≠t h·ªçc b√°n gi√°m s√°t n√†y:

                    | **Tham s·ªë**            | **M√¥ t·∫£**                                                                |
                    |------------------------|--------------------------------------------------------------------------|
                    | **Ng∆∞·ª°ng tin c·∫≠y**     | M·ª©c ƒë·ªô tin c·∫≠y t·ªëi thi·ªÉu ƒë·ªÉ g√°n nh√£n gi·∫£ cho d·ªØ li·ªáu kh√¥ng c√≥ nh√£n.      |
                    | **S·ªë v√≤ng l·∫∑p t·ªëi ƒëa** | S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa c·ªßa quy tr√¨nh Pseudo-Labeling ƒë·ªÉ g·∫Øn nh√£n v√† hu·∫•n luy·ªán.|

                    **Chi ti·∫øt:**
                    - **Ng∆∞·ª°ng tin c·∫≠y (threshold)**:  
                      - C√¥ng th·ª©c: N·∫øu ƒë·ªô tin c·∫≠y d·ª± ƒëo√°n $P(y|x) \geq \text{threshold}$, m·∫´u s·∫Ω ƒë∆∞·ª£c g√°n nh√£n gi·∫£.  
                      - V√≠ d·ª•: V·ªõi threshold = 0.95, ch·ªâ c√°c d·ª± ƒëo√°n c√≥ ƒë·ªô tin c·∫≠y ‚â• 95% ƒë∆∞·ª£c ch·∫•p nh·∫≠n.  
                      - T√°c ƒë·ªông: Gi√° tr·ªã cao ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng nh√£n gi·∫£ nh∆∞ng gi·∫£m s·ªë l∆∞·ª£ng m·∫´u ƒë∆∞·ª£c g·∫Øn nh√£n; gi√° tr·ªã th·∫•p tƒÉng s·ªë l∆∞·ª£ng m·∫´u nh∆∞ng c√≥ th·ªÉ g√¢y nhi·ªÖu.

                    - **S·ªë v√≤ng l·∫∑p t·ªëi ƒëa (max_iterations)**:  
                      - Quy ƒë·ªãnh s·ªë l·∫ßn m√¥ h√¨nh d·ª± ƒëo√°n nh√£n gi·∫£ v√† hu·∫•n luy·ªán l·∫°i tr√™n d·ªØ li·ªáu m·ªõi.  
                      - ƒêi·ªÅu ki·ªán d·ª´ng: Quy tr√¨nh k·∫øt th√∫c khi h·∫øt d·ªØ li·ªáu kh√¥ng c√≥ nh√£n ho·∫∑c ƒë·∫°t s·ªë v√≤ng l·∫∑p t·ªëi ƒëa.  
                      - T√°c ƒë·ªông: Gi√° tr·ªã l·ªõn tƒÉng c∆° h·ªôi khai th√°c d·ªØ li·ªáu kh√¥ng nh√£n nh∆∞ng k√©o d√†i th·ªùi gian hu·∫•n luy·ªán.
                    """, unsafe_allow_html=True)
    ### Tab 2: Ch·ªçn s·ªë l∆∞·ª£ng d·ªØ li·ªáu
    with tab_load:
        st.markdown('<div class="section-title">Ch·ªçn S·ªë l∆∞·ª£ng D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        X_full, y_full = st.session_state['full_data']
        st.subheader("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u")
        sample_options = {
            "1000 m·∫´u": 1000,
            "10,000 m·∫´u": 10000,
            "50,000 m·∫´u": 50000,
            "70,000 m·∫´u": 70000,
            "T√πy ch·ªânh": "custom"
        }
        selected_option = st.selectbox("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", list(sample_options.keys()))
        if selected_option == "T√πy ch·ªânh":
            num_samples = st.number_input("Nh·∫≠p s·ªë l∆∞·ª£ng m·∫´u:", min_value=1, max_value=len(X_full), value=1000)
        else:
            num_samples = sample_options[selected_option]

        if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng", type="primary"):
            with st.spinner(f"ƒêang l·∫•y {num_samples} m·∫´u..."):
                indices = np.random.choice(len(X_full), size=num_samples, replace=False)
                X_sampled = X_full[indices]
                y_sampled = y_full[indices]
                st.session_state['data'] = (X_sampled.copy(), y_sampled.copy())
                st.session_state['optimal_params'] = get_optimal_params(num_samples)
                with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample"):
                    mlflow.log_param("num_samples", num_samples)
                st.success(f"ƒê√£ ch·ªçn {num_samples} m·∫´u!")
                del X_sampled, y_sampled
                gc.collect()

    ### Tab 3: X·ª≠ l√Ω d·ªØ li·ªáu
    with tab_preprocess:
        st.markdown('<div class="section-title">X·ª≠ l√Ω D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        if 'data' not in st.session_state:
            st.info("Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc.")
        else:
            X, y = st.session_state['data']
            if "data_original" not in st.session_state:
                st.session_state["data_original"] = (X.copy(), y.copy())

            st.subheader("D·ªØ li·ªáu G·ªëc")
            fig, axes = plt.subplots(2, 5, figsize=(10, 4))
            for i, ax in enumerate(axes.flat):
                ax.imshow(X[i].reshape(28, 28), cmap='gray')
                ax.set_title(f"Label: {y[i]}")
                ax.axis("off")
            st.pyplot(fig)
            plt.close(fig)

            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button("Chu·∫©n h√≥a d·ªØ li·ªáu (Normalization)", type="primary"):
                    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 1]..."):
                        X_norm = X / 255.0
                        st.session_state["data_processed"] = (X_norm.copy(), y.copy())
                        st.success("ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu!")
                        st.rerun()
            with col2:
                st.markdown("""
                    <div class="tooltip">? (Norm)
                        <span class="tooltiptext">
                            ƒê∆∞a d·ªØ li·ªáu v·ªÅ $[0, 1]$ b·∫±ng c√°ch chia cho $255$.<br>
                            C√¥ng d·ª•ng: ƒê·∫£m b·∫£o thang ƒëo ƒë·ªìng nh·∫•t cho Neural Network.
                        </span>
                    </div>
                """, unsafe_allow_html=True)

            if "data_processed" in st.session_state:
                X_processed, y_processed = st.session_state["data_processed"]
                st.subheader("D·ªØ li·ªáu sau khi x·ª≠ l√Ω")
                fig, axes = plt.subplots(2, 5, figsize=(10, 4))
                for i, ax in enumerate(axes.flat):
                    ax.imshow(X_processed[i].reshape(28, 28), cmap='gray')
                    ax.set_title(f"Label: {y_processed[i]}")
                    ax.axis("off")
                st.pyplot(fig)
                plt.close(fig)

    ### Tab 4: Chia d·ªØ li·ªáu
    with tab_split:
        st.markdown('<div class="section-title">Chia T·∫≠p D·ªØ li·ªáu</div>', unsafe_allow_html=True)
        if 'data' not in st.session_state:
            st.info("Vui l√≤ng ch·ªçn v√† x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            data_source = st.session_state.get('data_processed', st.session_state['data'])
            X, y = data_source
            total_samples = len(X)
            st.write(f"T·ªïng s·ªë m·∫´u: {total_samples}")

            test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20)
            test_size = test_pct / 100
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

            st.write(f"**Ph√¢n b·ªï d·ªØ li·ªáu**: Train: {len(X_train)}, Test: {len(X_test)}")
            if st.button("X√°c nh·∫≠n ph√¢n chia", type="primary"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    st.session_state['split_data'] = {
                        "X_train": X_train.copy(), "y_train": y_train.copy(),
                        "X_test": X_test.copy(), "y_test": y_test.copy()
                    }
                    st.success("ƒê√£ chia d·ªØ li·ªáu th√†nh c√¥ng!")
                    del X_train, X_test, y_train, y_test
                    gc.collect()

    ### Tab 5: Hu·∫•n luy·ªán/ƒê√°nh gi√°
    with tab_train_eval:
        st.markdown('<div class="section-title">Hu·∫•n luy·ªán v√† ƒê√°nh gi√°</div>', unsafe_allow_html=True)
        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            split_data = st.session_state['split_data'].copy()
            X_train = split_data["X_train"]
            y_train = split_data["y_train"]
            X_test = split_data["X_test"]
            y_test = split_data["y_test"]

            num_samples = len(X_train)
            st.write(f"**S·ªë m·∫´u hu·∫•n luy·ªán**: {num_samples}")

            if "optimal_params" not in st.session_state:
                st.session_state["optimal_params"] = get_optimal_params(num_samples)
            params = st.session_state.get("training_params", st.session_state["optimal_params"].copy())

            with st.expander("üîß Tham s·ªë t·ªëi ∆∞u ƒë·ªÅ xu·∫•t", expanded=False):
                optimal_table = pd.DataFrame({
                    "S·ªë m·∫´u": ["‚â§ 1,000", "‚â§ 10,000", "‚â§ 50,000", "> 50,000"],
                    "S·ªë l·ªõp ·∫©n": [1, 2, 2, 3],
                    "K√≠ch th∆∞·ªõc l·ªõp ·∫©n": ["(32,)", "(64, 32)", "(128, 64)", "(128, 64, 32)"],
                    "T·ªëc ƒë·ªô h·ªçc": [0.001, 0.0005, 0.0003, 0.0001],
                    "S·ªë l·∫ßn l·∫∑p": [30, 50, 70, 100],
                    "H√†m k√≠ch ho·∫°t": ["ReLU", "ReLU", "ReLU", "ReLU"],
                    "Tr√¨nh t·ªëi ∆∞u": ["Adam", "Adam", "Adam", "Adam"],
                    "K√≠ch th∆∞·ªõc batch": [32, 64, 128, 256],
                    "Ng∆∞·ª°ng tin c·∫≠y": [0.95, 0.95, 0.95, 0.95],
                    "S·ªë v√≤ng l·∫∑p t·ªëi ƒëa": [5, 10, 15, 20]
                })
                st.table(optimal_table)
                if st.button("S·ª≠ d·ª•ng tham s·ªë ƒë·ªÅ xu·∫•t"):
                    st.session_state["training_params"] = st.session_state["optimal_params"].copy()
                    st.rerun()

            st.subheader("üìä T·ª∑ l·ªá m·∫´u ban ƒë·∫ßu")
            st.write("T·ª∑ l·ªá d·ªØ li·ªáu c√≥ nh√£n ban ƒë·∫ßu ƒë∆∞·ª£c c·ªë ƒë·ªãnh ·ªü 1% t·ªïng s·ªë m·∫´u.")
            num_labeled_total = int(num_samples * 0.01)  # 1% t·ªïng s·ªë m·∫´u
            num_unlabeled = num_samples - num_labeled_total
            st.write(f"**S·ªë m·∫´u c√≥ nh√£n ban ƒë·∫ßu**: {num_labeled_total}")
            st.write(f"**S·ªë m·∫´u kh√¥ng c√≥ nh√£n**: {num_unlabeled}")

            st.subheader("‚öôÔ∏è C·∫•u h√¨nh M√¥ h√¨nh")
            col_param1, col_param2 = st.columns(2)
            with col_param1:
                num_hidden_layers = st.number_input("S·ªë l·ªõp ·∫©n", min_value=1, value=len(params["hidden_layer_sizes"]))
                hidden_sizes = []
                for i in range(num_hidden_layers):
                    default_value = params["hidden_layer_sizes"][i] if i < len(params["hidden_layer_sizes"]) else 32
                    hidden_size = st.number_input(f"S·ªë n∆°-ron l·ªõp ·∫©n {i+1}", min_value=1, value=default_value)
                    hidden_sizes.append(hidden_size)
                params["hidden_layer_sizes"] = tuple(hidden_sizes)
                params["activation"] = st.selectbox("H√†m k√≠ch ho·∫°t", ["relu", "tanh"], index=["relu", "tanh"].index(params["activation"]))

            with col_param2:
                params["learning_rate"] = st.number_input("T·ªëc ƒë·ªô h·ªçc", min_value=0.0, step=0.0001, value=params["learning_rate"], format="%.4f")
                params["epochs"] = st.number_input("S·ªë epoch", min_value=1, value=params["epochs"])
                params["batch_size"] = st.number_input("K√≠ch th∆∞·ªõc batch", min_value=1, value=params["batch_size"])
                params["solver"] = st.selectbox("Tr√¨nh t·ªëi ∆∞u", ["adam", "sgd"], index=["adam", "sgd"].index(params["solver"]))

            st.subheader("üîÑ C·∫•u h√¨nh Pseudo-Labeling")
            threshold = st.number_input("Ng∆∞·ª°ng tin c·∫≠y", min_value=0.0, max_value=1.0, value=params["threshold"])
            max_iterations = st.number_input("S·ªë v√≤ng l·∫∑p t·ªëi ƒëa", min_value=1, value=params["max_iterations"])

            st.subheader("ƒê·∫∑t t√™n cho m√¥ h√¨nh")
            if 'model_name' not in st.session_state:
                st.session_state['model_name'] = f"Model_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            model_name = st.text_input("Nh·∫≠p t√™n m√¥ h√¨nh:", value=st.session_state['model_name'])
            st.session_state['model_name'] = model_name

            if st.button("B·∫Øt ƒë·∫ßu Hu·∫•n luy·ªán", type="primary"):
                if not model_name.strip():
                    st.error("T√™n m√¥ h√¨nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                else:
                    with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=model_name.strip()) as run:
                        mlflow.log_params({**params, "labeled_pct": 1.0, "threshold": threshold, "max_iterations": max_iterations})
                        run_id = run.info.run_id

                        with st.spinner("ƒêang hu·∫•n luy·ªán v·ªõi Pseudo-Labeling..."):
                            start_time = time.time()
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            epoch_text = st.empty()
                            loss_text = st.empty()
                            acc_text = st.empty()

                            num_per_class = num_labeled_total // 10
                            labeled_indices = []
                            for digit in range(10):
                                digit_indices = np.where(y_train == digit)[0]
                                if len(digit_indices) > 0:
                                    train_size = min(num_per_class, len(digit_indices))
                                    if train_size > 0:
                                        labeled_digit = np.random.choice(digit_indices, size=train_size, replace=False)
                                        labeled_indices.extend(labeled_digit)

                            labeled_indices = np.array(labeled_indices)
                            unlabeled_indices = np.setdiff1d(np.arange(len(X_train)), labeled_indices)

                            if len(labeled_indices) < num_labeled_total:
                                remaining_indices = np.setdiff1d(np.arange(len(X_train)), labeled_indices)
                                additional_indices = np.random.choice(remaining_indices, 
                                                                    size=num_labeled_total - len(labeled_indices), 
                                                                    replace=False)
                                labeled_indices = np.concatenate([labeled_indices, additional_indices])
                            elif len(labeled_indices) > num_labeled_total:
                                labeled_indices = np.random.choice(labeled_indices, size=num_labeled_total, replace=False)

                            unlabeled_indices = np.setdiff1d(np.arange(len(X_train)), labeled_indices)

                            X_labeled = X_train[labeled_indices]
                            y_labeled = y_train[labeled_indices]
                            X_unlabeled = X_train[unlabeled_indices]

                            loss_history = []
                            accuracy_history = []
                            test_acc_history = []
                            pseudo_samples = []
                            epoch_loss_history = []
                            epoch_acc_history = []
                            iteration = 0

                            class CustomCallback(tf.keras.callbacks.Callback):
                                def __init__(self, iteration, max_iterations):
                                    super().__init__()
                                    self.iteration = iteration
                                    self.max_iterations = max_iterations

                                def on_epoch_end(self, epoch, logs=None):
                                    epoch_text.write(f"Epoch {epoch + 1}/{params['epochs']}")
                                    loss_text.write(f"Loss: {logs['loss']:.4f}")
                                    acc_text.write(f"Accuracy: {logs['accuracy']:.4f}")
                                    if self.iteration == 1:
                                        epoch_loss_history.append(logs['loss'])
                                        epoch_acc_history.append(logs['accuracy'])

                            while iteration < max_iterations and len(unlabeled_indices) > 0:
                                iteration += 1
                                status_text.write(f"V√≤ng {iteration}/{max_iterations}")

                                model = build_model(params)
                                history = model.fit(
                                    X_labeled, y_labeled,
                                    epochs=params["epochs"],
                                    batch_size=params["batch_size"],
                                    verbose=0,
                                    callbacks=[CustomCallback(iteration, max_iterations)]
                                )
                                loss_history.append(history.history['loss'][-1])
                                accuracy_history.append(history.history['accuracy'][-1])

                                test_pred = np.argmax(model.predict(X_test, verbose=0), axis=1)
                                test_acc = accuracy_score(y_test, test_pred)
                                test_acc_history.append(test_acc)

                                predictions = model.predict(X_unlabeled, verbose=0)
                                max_probs = np.max(predictions, axis=1)
                                pseudo_labels = np.argmax(predictions, axis=1)

                                high_confidence_mask = max_probs >= threshold
                                if not np.any(high_confidence_mask):
                                    break

                                pseudo_indices = unlabeled_indices[high_confidence_mask]

                                if len(pseudo_indices) > 0:
                                    selected_indices = np.random.choice(pseudo_indices, size=min(5, len(pseudo_indices)), replace=False)
                                    samples = []
                                    for idx in selected_indices:
                                        i = np.where(unlabeled_indices == idx)[0][0]
                                        samples.append({
                                            'image': X_unlabeled[i].copy(),
                                            'pseudo_label': pseudo_labels[i],
                                            'confidence': max_probs[i],
                                            'true_label': y_train[idx]
                                        })
                                    pseudo_samples.append({
                                        'iteration': iteration,
                                        'samples': samples,
                                        'num_added': len(pseudo_indices),
                                        'total_labeled': len(X_labeled) + len(pseudo_indices)
                                    })

                                X_labeled = np.vstack((X_labeled, X_unlabeled[high_confidence_mask]))
                                y_labeled = np.hstack((y_labeled, pseudo_labels[high_confidence_mask]))
                                unlabeled_indices = unlabeled_indices[~high_confidence_mask]
                                X_unlabeled = X_unlabeled[~high_confidence_mask]

                                progress_bar.progress(min(iteration / max_iterations, 1.0))

                            model = build_model(params)
                            history = model.fit(
                                X_labeled, y_labeled,
                                epochs=params["epochs"],
                                batch_size=params["batch_size"],
                                verbose=0,
                                callbacks=[CustomCallback(iteration, max_iterations)]
                            )
                            loss_history.append(history.history['loss'][-1])
                            accuracy_history.append(history.history['accuracy'][-1])

                            y_test_pred = np.argmax(model.predict(X_test, verbose=0), axis=1)
                            acc_test = accuracy_score(y_test, y_test_pred)
                            cm_test = confusion_matrix(y_test, y_test_pred)

                            mlflow.log_metric("accuracy_test", acc_test)
                            mlflow.log_metric("training_time", time.time() - start_time)
                            mlflow.keras.log_model(model, "model")

                            results = {
                                'accuracy_test': acc_test,
                                'cm_test': cm_test,
                                'loss_history': loss_history,
                                'accuracy_history': accuracy_history,
                                'test_acc_history': test_acc_history,
                                'pseudo_samples': pseudo_samples,
                                'iterations': iteration,
                                'training_time': time.time() - start_time,
                                'run_id': run.info.run_id,
                                'run_name': model_name.strip(),
                                'params': params,
                                'epoch_loss_history': epoch_loss_history,
                                'epoch_acc_history': epoch_acc_history
                            }
                            st.session_state['training_results'] = results
                            st.success(f"ƒê√£ hu·∫•n luy·ªán xong sau {iteration} v√≤ng! Th·ªùi gian: {results['training_time']:.2f} gi√¢y")

        if 'training_results' in st.session_state:
            results = st.session_state['training_results']
            st.subheader("üìä K·∫øt qu·∫£ Hu·∫•n luy·ªán")

            col1, col2 = st.columns(2)
            col1.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{results['training_time']:.2f} gi√¢y")
            col2.metric("ƒê·ªô ch√≠nh x√°c Test", f"{results['accuracy_test']*100:.2f}%")

            if 'test_acc_history' in results and len(results['test_acc_history']) > 0:
                st.write(f"**ƒê·ªô ch√≠nh x√°c sau l·∫ßn ƒë·∫ßu (v·ªõi 1% d·ªØ li·ªáu)**: {results['test_acc_history'][0]*100:.2f}%")

            if 'pseudo_samples' in results:
                st.subheader("Minh h·ªça c√°c m·∫´u ƒë∆∞·ª£c g√°n nh√£n Pseudo")
                with st.expander("Xem to√†n b·ªô v√≤ng l·∫∑p", expanded=False):
                    for iter_data in results['pseudo_samples']:
                        st.markdown(f"### V√≤ng {iter_data['iteration']}")
                        st.write(f"S·ªë m·∫´u th√™m: {iter_data['num_added']}")
                        st.write(f"T·ªïng s·ªë m·∫´u c√≥ nh√£n: {iter_data['total_labeled']}")
                        fig, axes = plt.subplots(1, len(iter_data['samples']), figsize=(3*len(iter_data['samples']), 3))
                        if len(iter_data['samples']) == 1:
                            axes = [axes]
                        for ax, sample in zip(axes, iter_data['samples']):
                            ax.imshow(sample['image'].reshape(28, 28), cmap='gray')
                            ax.set_title(f"Pseudo: {sample['pseudo_label']}\nTrue: {sample['true_label']}\nConf: {sample['confidence']:.2f}")
                            ax.axis('off')
                        st.pyplot(fig)
                        plt.close(fig)
                        st.markdown("---")  # D√≤ng ph√¢n c√°ch gi·ªØa c√°c v√≤ng

            with st.expander("üìã T√≥m t·∫Øt K·∫øt qu·∫£", expanded=False):
                df_full = pd.DataFrame({
                    "V√≤ng": range(1, len(results['loss_history']) + 1),
                    "Loss": results['loss_history'],
                    "Accuracy": results['accuracy_history']
                })
                st.table(df_full)

            if 'epoch_loss_history' in results:
                with st.expander("Chi ti·∫øt Epoch l·∫ßn ƒë·∫ßu", expanded=False):
                    df_epochs = pd.DataFrame({
                        "Epoch": range(1, len(results['epoch_loss_history']) + 1),
                        "Loss": results['epoch_loss_history'],
                        "Accuracy": results['epoch_acc_history']
                    })
                    st.table(df_epochs)

            st.subheader("Bi·ªÉu ƒë·ªì Loss v√† Accuracy")
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
            ax1.plot(range(1, len(results['loss_history']) + 1), results['loss_history'])
            ax1.set_title("Loss qua c√°c v√≤ng")
            ax2.plot(range(1, len(results['accuracy_history']) + 1), results['accuracy_history'])
            ax2.set_title("Accuracy qua c√°c v√≤ng")
            st.pyplot(fig)
            plt.close(fig)

            if 'test_acc_history' in results:
                st.subheader("ƒê·ªô ch√≠nh x√°c Test qua c√°c v√≤ng")
                fig, ax = plt.subplots()
                ax.plot(range(1, len(results['test_acc_history']) + 1), results['test_acc_history'])
                ax.set_title("ƒê·ªô ch√≠nh x√°c Test")
                st.pyplot(fig)
                plt.close(fig)

            st.subheader("Ma tr·∫≠n Nh·∫ßm l·∫´n")
            fig, ax = plt.subplots()
            sns.heatmap(results['cm_test'], annot=True, fmt="d", cmap="Blues", ax=ax)
            st.pyplot(fig)
            plt.close(fig)

            with st.expander("Chi ti·∫øt l·∫ßn ch·∫°y", expanded=False):
                st.write(f"T√™n: {results['run_name']}")
                st.write(f"ID: {results['run_id']}")
                st.write(f"Th·ªùi gian: {results['training_time']:.2f} gi√¢y")
                st.write(f"ƒê·ªô ch√≠nh x√°c Test: {results['accuracy_test']*100:.2f}%")
                st.json(results['params'])

    ### Tab 6: Demo d·ª± ƒëo√°n
    with tab_demo:
        st.markdown('<div class="section-title">Demo D·ª± ƒëo√°n</div>', unsafe_allow_html=True)
        if 'split_data' not in st.session_state:
            st.warning("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc!")
        else:
            runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])
            model_options = {run.info.run_id: run.data.tags.get('mlflow.runName', run.info.run_id) for run in runs}
            if not model_options:
                st.info("Ch∆∞a c√≥ m√¥ h√¨nh n√†o ƒë∆∞·ª£c hu·∫•n luy·ªán.")
            else:
                selected_run_id = st.selectbox("Ch·ªçn m√¥ h√¨nh:", list(model_options.keys()), format_func=lambda x: model_options[x])
                if st.button("S·ª≠ d·ª•ng m√¥ h√¨nh n√†y"):
                    with st.spinner("ƒêang t·∫£i m√¥ h√¨nh..."):
                        model = mlflow.keras.load_model(f"runs:/{selected_run_id}/model")
                        st.session_state['selected_model'] = model
                        st.success("ƒê√£ t·∫£i m√¥ h√¨nh!")

                if 'selected_model' in st.session_state:
                    model = st.session_state['selected_model']
                    input_method = st.selectbox("Ph∆∞∆°ng th·ª©c nh·∫≠p li·ªáu", ["T·∫£i ·∫£nh l√™n", "D·ªØ li·ªáu Test", "V·∫Ω tr·ª±c ti·∫øp"])

                    if input_method == "T·∫£i ·∫£nh l√™n":
                        uploaded_file = st.file_uploader("T·∫£i l√™n h√¨nh ·∫£nh", type=["png", "jpg"])
                        if uploaded_file:
                            image = Image.open(uploaded_file).convert('L').resize((28, 28))
                            st.image(image, caption="H√¨nh ·∫£nh t·∫£i l√™n", width=100)
                            image_array = np.array(image).reshape(1, 784) / 255.0
                            if st.button("D·ª± ƒëo√°n"):
                                pred = model.predict(image_array, verbose=0)
                                st.write(f"D·ª± ƒëo√°n: {np.argmax(pred)} (ƒê·ªô tin c·∫≠y: {np.max(pred)*100:.2f}%)")

                    elif input_method == "D·ªØ li·ªáu Test":
                        X_test = st.session_state['split_data']['X_test']
                        y_test = st.session_state['split_data']['y_test']
                        idx = st.slider("Ch·ªçn m·∫´u", 0, len(X_test)-1, 0)
                        st.image(X_test[idx].reshape(28, 28), caption=f"Nh√£n th·ª±c t·∫ø: {y_test[idx]}", width=100)
                        if st.button("D·ª± ƒëo√°n"):
                            pred = model.predict(X_test[idx:idx+1], verbose=0)
                            st.write(f"D·ª± ƒëo√°n: {np.argmax(pred)} (ƒê·ªô tin c·∫≠y: {np.max(pred)*100:.2f}%)")

                    elif input_method == "V·∫Ω tr·ª±c ti·∫øp":
                        if 'canvas_key' not in st.session_state:
                            st.session_state['canvas_key'] = 0
                        if 'predictions' not in st.session_state:
                            st.session_state['predictions'] = []

                        if st.button("X√≥a Canvas"):
                            st.session_state['canvas_key'] += 1
                            st.session_state['predictions'] = []

                        canvas_result = st_canvas(
                            stroke_width=20,
                            stroke_color="#FFFFFF",
                            background_color="#000000",
                            height=280,
                            width=280,
                            drawing_mode="freedraw",
                            key=f"canvas_{st.session_state['canvas_key']}"
                        )

                        if canvas_result.image_data is not None:
                            image = Image.fromarray(canvas_result.image_data).convert('L').resize((28, 28))
                            st.image(image, caption="H√¨nh ·∫£nh v·∫Ω tay", width=100)
                            image_array = np.array(image).reshape(1, 784) / 255.0
                            if st.button("D·ª± ƒëo√°n"):
                                pred = model.predict(image_array, verbose=0)
                                prediction = f"D·ª± ƒëo√°n: {np.argmax(pred)} (ƒê·ªô tin c·∫≠y: {np.max(pred)*100:.2f}%)"
                                st.session_state['predictions'].append(prediction)
                                st.write(prediction)

                        if st.session_state['predictions']:
                            st.subheader("L·ªãch s·ª≠ d·ª± ƒëo√°n")
                            for p in st.session_state['predictions']:
                                st.write(p)

    ### Tab 7: Th√¥ng tin hu·∫•n luy·ªán
    with tab_log_info:
        st.markdown('<div class="section-title">Theo d√µi K·∫øt qu·∫£</div>', unsafe_allow_html=True)
        try:
            with st.spinner("ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán..."):
                runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])
                if not runs:
                    st.info(f"Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o trong Experiment ID {EXPERIMENT_ID}.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    selected_run_name = st.selectbox("Ch·ªçn run:", list(run_options.values()))
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi:", value=selected_run_name)
                    if st.button("C·∫≠p nh·∫≠t t√™n"):
                        client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                        st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                        st.rerun()

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y"):
                        client.delete_run(selected_run_id)
                        st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                        st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt")
                    st.write(f"**T√™n:** {selected_run_name}")
                    st.write(f"**ID:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")
                    st.json(selected_run.data.params, expanded=True)
                    st.json(selected_run.data.metrics, expanded=True)

                    st.subheader("üìà L·ªãch s·ª≠ Hu·∫•n luy·ªán")
                    if 'training_results' in st.session_state and selected_run_id == st.session_state['training_results']['run_id']:
                        results = st.session_state['training_results']
                        col_loss, col_acc = st.columns(2)
                        with col_loss:
                            if 'loss_history' in results:
                                fig, ax = plt.subplots(figsize=(6, 4))
                                ax.plot(range(1, len(results['loss_history']) + 1), results['loss_history'], label='Loss')
                                ax.set_xlabel("V√≤ng")
                                ax.set_ylabel("Loss")
                                ax.legend()
                                st.pyplot(fig)
                                plt.close(fig)
                        with col_acc:
                            if 'accuracy_history' in results:
                                fig, ax = plt.subplots(figsize=(6, 4))
                                ax.plot(range(1, len(results['accuracy_history']) + 1), results['accuracy_history'], label='Accuracy')
                                ax.set_xlabel("V√≤ng")
                                ax.set_ylabel("Accuracy")
                                ax.legend()
                                st.pyplot(fig)
                                plt.close(fig)

                    st.subheader("So s√°nh c√°c Run")
                    selected_runs = st.multiselect("Ch·ªçn run ƒë·ªÉ so s√°nh:", list(run_options.values()), default=[selected_run_name])
                    if selected_runs:
                        selected_run_ids = [k for k, v in run_options.items() if v in selected_runs]
                        comparison_data = []
                        for run_id in selected_run_ids:
                            run = client.get_run(run_id)
                            run_data = {
                                "T√™n": run.data.tags.get('mlflow.runName', run_id),
                                "Accuracy Test": run.data.metrics.get('accuracy_test', 'N/A'),
                                "Th·ªùi gian": run.data.metrics.get('training_time', 'N/A'),
                                "S·ªë l·ªõp ·∫©n": run.data.params.get('hidden_layer_sizes', 'N/A'),
                                "Learning Rate": run.data.params.get('learning_rate', 'N/A'),
                                "Epochs": run.data.params.get('epochs', 'N/A')
                            }
                            comparison_data.append(run_data)
                        st.table(pd.DataFrame(comparison_data))

        except Exception as e:
            st.error(f"L·ªói khi t·∫£i th√¥ng tin hu·∫•n luy·ªán: {e}")
        st.markdown(f"üìä **Xem chi ti·∫øt tr√™n MLflow**: [{mlflow_tracking_uri}/#/experiments/{EXPERIMENT_ID}]({mlflow_tracking_uri}/#/experiments/{EXPERIMENT_ID})", unsafe_allow_html=True)

if __name__ == "__main__":
    run_mnist_pseudo_labeling_app()