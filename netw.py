import os
import mlflow
import streamlit as st
import openml
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.neural_network import MLPClassifier
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time
import requests

# H√†m t·∫£i d·ªØ li·ªáu MNIST kh√¥ng c√≥ @st.cache_data
def fetch_mnist_data():
    mnist = openml.datasets.get_dataset(554)
    X, y, _, _ = mnist.get_data(target=mnist.default_target_attribute)
    return X, y

def run_mnist_neural_network_app():
    # Thi·∫øt l·∫≠p MLflow
    mlflow_tracking_uri = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(mlflow_tracking_uri)
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets. Vui l√≤ng ki·ªÉm h√¨nh secrets.toml ho·∫∑c m√¥i tr∆∞·ªùng tri·ªÉn khai.")
        st.stop()

    try:
        response = requests.get(mlflow_tracking_uri, timeout=5)
        if response.status_code != 200:
            st.error(f"K·∫øt n·ªëi ƒë·∫øn MLflow server th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}. Vui l√≤ng ki·ªÉm tra MLFLOW_TRACKING_URI: {mlflow_tracking_uri}")
            st.stop()
    except requests.exceptions.RequestException as e:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MLflow server t·∫°i {mlflow_tracking_uri}. L·ªói: {e}. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c URI.")
        st.stop()

    EXPERIMENT_ID = "5"

    try:
        client = MlflowClient()
        experiment = client.get_experiment(EXPERIMENT_ID)
        if experiment is None:
            st.error(f"Experiment ID {EXPERIMENT_ID} kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra Experiment ID tr√™n MLflow UI.")
            st.stop()
    except Exception as e:
        st.error(f"L·ªói khi truy xu·∫•t Experiment ID {EXPERIMENT_ID}: {e}. Vui l√≤ng ki·ªÉm tra MLflow server ho·∫∑c th√¥ng tin x√°c th·ª±c.")
        st.stop()

    st.title("Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Neural Network")

    st.markdown("""
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-MML-AM_CHTML" async></script>
        <style>
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: pointer;
                color: #1f77b4;
                font-weight: bold;
                margin-left: 5px;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 400px;
                background-color: #f9f9f9;
                color: #333;
                text-align: left;
                border-radius: 6px;
                padding: 10px;
                position: absolute;
                z-index: 1;
                right: 105%;
                top: 50%;
                transform: translateY(-50%);
                opacity: 0;
                transition: opacity 0.3s;
                border: 1px solid #ccc;
                font-size: 0.9em;
                line-height: 1.4;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
        </style>
    """, unsafe_allow_html=True)

    tabs = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "X·ª≠ l√Ω d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", "Hu·∫•n luy·ªán/ƒê√°nh gi√°", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"])
    tab_info, tab_load, tab_preprocess, tab_split, tab_train_eval, tab_demo, tab_log_info = tabs

    with tab_info:
        st.header("Gi·ªõi thi·ªáu v·ªÅ ·ª®ng d·ª•ng v√† M·∫°ng Neural Network")
        st.markdown("""
        Ch√†o b·∫°n! ƒê√¢y l√† ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ t·∫≠p d·ªØ li·ªáu **MNIST** b·∫±ng **M·∫°ng n∆°-ron nh√¢n t·∫°o (Neural Network)**. H√£y kh√°m ph√° c√°c t√≠nh nƒÉng v√† c√°ch ho·∫°t ƒë·ªông c·ªßa n√≥ nh√©!
        """, unsafe_allow_html=True)

        st.subheader("Ch·ªçn th√¥ng tin ƒë·ªÉ xem")
        info_option = st.selectbox(
            "",
            [
                "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?",
                "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a",
                "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o",
                "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)"
            ],
            label_visibility="collapsed",
            help="Ch·ªçn ƒë·ªÉ xem chi ti·∫øt v·ªÅ ·ª©ng d·ª•ng, d·ªØ li·ªáu, ho·∫∑c m√¥ h√¨nh."
        )

        if info_option == "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 1. ·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?")
                st.markdown("""
                ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay d·ª±a tr√™n t·∫≠p d·ªØ li·ªáu **MNIST**, s·ª≠ d·ª•ng **M·∫°ng n∆°-ron nh√¢n t·∫°o (Neural Network)**.  
                - **MNIST**: T·∫≠p d·ªØ li·ªáu g·ªìm $70,000$ ·∫£nh ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$, m·ªói ·∫£nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel (t·ªïng c·ªông $784$ ƒë·∫∑c tr∆∞ng).  
                - **M·ª•c ti√™u**:  
                  - X√¢y d·ª±ng v√† hu·∫•n luy·ªán m·ªôt m·∫°ng n∆°-ron ƒë·ªÉ nh·∫≠n di·ªán ch√≠nh x√°c c√°c ch·ªØ s·ªë.  
                  - Cung c·∫•p c√¥ng c·ª• tr·ª±c quan ƒë·ªÉ h·ªçc t·∫≠p v√† ƒë√°nh gi√° hi·ªáu qu·∫£ c·ªßa thu·∫≠t to√°n.  

                **Th√¥ng tin c∆° b·∫£n**:  
                - **$784$ ƒë·∫∑c tr∆∞ng**: M·ªói ·∫£nh ƒë∆∞·ª£c bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng vector $784$ chi·ªÅu (gi√° tr·ªã pixel t·ª´ $0$ ƒë·∫øn $255$).  
                - **$70,000$ m·∫´u**: T·ªïng s·ªë ·∫£nh, ƒë∆∞·ª£c chia th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra.  
                - **Nhi·ªám v·ª•**: D·ª± ƒëo√°n nh√£n ($0$-$9$) d·ª±a tr√™n ƒë·∫∑c tr∆∞ng pixel.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 2. T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a")
                st.markdown("""
                **MNIST** l√† t·∫≠p d·ªØ li·ªáu chu·∫©n trong h·ªçc m√°y, ƒë∆∞·ª£c t·∫°o b·ªüi Yann LeCun v√† c√°c c·ªông s·ª±.  
                - **ƒê·∫∑c ƒëi·ªÉm**:  
                  - G·ªìm c√°c ·∫£nh ch·ªØ s·ªë vi·∫øt tay t·ª´ h·ªçc sinh trung h·ªçc v√† nh√¢n vi√™n ƒëi·ªÅu tra d√¢n s·ªë M·ªπ.  
                  - Chu·∫©n h√≥a th√†nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel, thang ƒë·ªô x√°m (gi√° tr·ªã t·ª´ $0$ ƒë·∫øn $255$).  

                **√ù nghƒ©a**:  
                - L√† b√†i to√°n c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng ph√¢n lo·∫°i c·ªßa c√°c m√¥ h√¨nh h·ªçc m√°y.  
                - ƒê∆°n gi·∫£n nh∆∞ng ƒë·ªß ph·ª©c t·∫°p ƒë·ªÉ ƒë√°nh gi√° kh·∫£ nƒÉng ph√¢n bi·ªát c√°c l·ªõp t∆∞∆°ng t·ª± (v√≠ d·ª•: "$4$" v√† "$9$").  
                - Ph√π h·ª£p cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† nghi√™n c·ª©u m√¥ h√¨nh ph·ª©c t·∫°p.  
                """, unsafe_allow_html=True)

                st.subheader("üì∑ Minh h·ªça d·ªØ li·ªáu MNIST")
                st.markdown("""
                D∆∞·ªõi ƒë√¢y l√† ·∫£nh minh h·ªça $10$ ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$ t·ª´ t·∫≠p d·ªØ li·ªáu MNIST ƒë·ªÉ b·∫°n h√¨nh dung. M·ªói ch·ªØ s·ªë ƒë∆∞·ª£c bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng ma tr·∫≠n $28 \\times 28$ pixel.
                """, unsafe_allow_html=True)
                try:
                    mnist_image = Image.open("mnist.png")
                    st.image(mnist_image, caption="·∫¢nh minh h·ªça $10$ ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$ trong MNIST", width=800)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `mnist.png`. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i ·∫£nh: {e}")
                status_text.text("ƒê√£ t·∫£i 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                st.subheader("üìä 3. Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o")
                st.markdown("""
                **Neural Network (M·∫°ng n∆°-ron nh√¢n t·∫°o)** l√† m·ªôt m√¥ h√¨nh h·ªçc m√°y m√¥ ph·ªèng c√°ch ho·∫°t ƒë·ªông c·ªßa m·∫°ng n∆°-ron sinh h·ªçc trong n√£o ng∆∞·ªùi.  
                - **C·∫•u tr√∫c**: G·ªìm c√°c **n∆°-ron nh√¢n t·∫°o** (nodes) ƒë∆∞·ª£c t·ªï ch·ª©c th√†nh c√°c **l·ªõp (layers)**:  
                  - **L·ªõp ƒë·∫ßu v√†o (Input Layer)**: Nh·∫≠n d·ªØ li·ªáu ($784$ pixel t·ª´ ·∫£nh MNIST).  
                  - **L·ªõp ·∫©n (Hidden Layers)**: X·ª≠ l√Ω th√¥ng tin b·∫±ng c√°ch k·∫øt h·ª£p tuy·∫øn t√≠nh v√† √°p d·ª•ng h√†m k√≠ch ho·∫°t phi tuy·∫øn.  
                  - **L·ªõp ƒë·∫ßu ra (Output Layer)**: ƒê∆∞a ra d·ª± ƒëo√°n (nh√£n t·ª´ $0$-$9$).  

                Neural Network ƒë·∫∑c bi·ªát hi·ªáu qu·∫£ v·ªõi b√†i to√°n MNIST nh·ªù kh·∫£ nƒÉng h·ªçc c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p t·ª´ d·ªØ li·ªáu h√¨nh ·∫£nh.
                """, unsafe_allow_html=True)

                st.subheader("üõ†Ô∏è C√°c b∆∞·ªõc th·ª±c hi·ªán trong Neural Network")
                st.markdown("""
                1. **Kh·ªüi t·∫°o m√¥ h√¨nh**:  
                   - X√°c ƒë·ªãnh c·∫•u tr√∫c m·∫°ng (s·ªë l·ªõp ·∫©n, s·ªë n∆°-ron m·ªói l·ªõp).  
                   - Kh·ªüi t·∫°o **tr·ªçng s·ªë** $W$ v√† **bias** $b$ ng·∫´u nhi√™n (th∆∞·ªùng t·ª´ ph√¢n ph·ªëi Gaussian).  
                """, unsafe_allow_html=True)
                try:
                    st.image(os.path.join("plnw", "step1_init.png"), caption="Minh h·ªça B∆∞·ªõc 1: Kh·ªüi t·∫°o m√¥ h√¨nh", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 1.")

                st.markdown("""
                2. **Lan truy·ªÅn thu·∫≠n (Feedforward)**:  
                   - T√≠nh gi√° tr·ªã d·ª± ƒëo√°n $\\hat{Y}$ t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o $X$:  
                     - **L·ªõp ƒë·∫ßu v√†o**: $A^{(0)} = X$ (ma tr·∫≠n $N \\times 784$, $N$ l√† s·ªë m·∫´u).  
                     - **Cho m·ªói l·ªõp $l$**:  
                       - T·ªïng tuy·∫øn t√≠nh:  
                         $$ Z^{(l)} = A^{(l-1)} \\cdot W^{(l)} + b^{(l)} $$  
                       - √Åp d·ª•ng h√†m k√≠ch ho·∫°t:  
                         $$ A^{(l)} = \\sigma(Z^{(l)}) $$  
                     - **L·ªõp ƒë·∫ßu ra**: $\\hat{Y} = A^{(L)}$ (ma tr·∫≠n $N \\times 10$).  
                   - V√≠ d·ª• h√†m k√≠ch ho·∫°t **sigmoid**:  
                     $$ \\sigma(z) = \\frac{1}{1 + e^{-z}} $$
                """, unsafe_allow_html=True)
                try:
                    st.image(os.path.join("plnw", "step2_feedforward.png"), caption="Minh h·ªça B∆∞·ªõc 2: Lan truy·ªÅn thu·∫≠n", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 2.")

                st.markdown("""
                3. **T√≠nh h√†m m·∫•t m√°t (Loss Function)**:  
                   - ƒêo ƒë·ªô sai l·ªách gi·ªØa $\\hat{Y}$ v√† $Y$ (gi√° tr·ªã th·ª±c). V·ªõi MNIST, d√πng **Cross-Entropy**:  
                     $$ L = -\\frac{1}{N} \\sum_{i=1}^{N} \\sum_{j=0}^{9} y_{ij} \\cdot \\log(\\hat{y}_{ij}) $$  
                   - Trong ƒë√≥:  
                     - $y_{ij}$: Nh√£n th·ª±c (d·∫°ng one-hot encoded).  
                     - $\\hat{y}_{ij}$: X√°c su·∫•t d·ª± ƒëo√°n cho l·ªõp $j$.  
                """, unsafe_allow_html=True)
                try:
                    st.image(os.path.join("plnw", "step3_loss.png"), caption="Minh h·ªça B∆∞·ªõc 3: T√≠nh h√†m m·∫•t m√°t", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 3.")

                st.markdown("""
                4. **Lan truy·ªÅn ng∆∞·ª£c (Backpropagation)**:  
                   - T√≠nh ƒë·∫°o h√†m c·ªßa $L$ theo $W^{(l)}$ v√† $b^{(l)}$ ƒë·ªÉ c·∫≠p nh·∫≠t tham s·ªë:  
                     - T·∫°i **L·ªõp ƒë·∫ßu ra**:  
                       $$ \\delta^{(L)} = \\hat{Y} - Y $$  
                     - T·∫°i **L·ªõp ·∫©n**:  
                       $$ \\delta^{(l)} = (\\delta^{(l+1)} \\cdot (W^{(l+1)})^T) \\odot \\sigma'(Z^{(l)}) $$  
                     - $\\sigma'(z)$: ƒê·∫°o h√†m h√†m k√≠ch ho·∫°t (v·ªõi sigmoid: $\\sigma'(z) = \\sigma(z) \\cdot (1 - \\sigma(z))$).  
                     - ƒê·∫°o h√†m theo tr·ªçng s·ªë v√† bias:  
                       $$ \\frac{\\partial L}{\\partial W^{(l)}} = (A^{(l-1)})^T \\cdot \\delta^{(l)} $$  
                       $$ \\frac{\\partial L}{\\partial b^{(l)}} = \\sum_{i=1}^{N} \\delta^{(l)}_i $$
                """, unsafe_allow_html=True)
                try:
                    st.image(os.path.join("plnw", "step4_backprop.png"), caption="Minh h·ªça B∆∞·ªõc 4: Lan truy·ªÅn ng∆∞·ª£c", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 4.")

                st.markdown("""
                5. **C·∫≠p nh·∫≠t tham s·ªë (Gradient Descent)**:  
                   - ƒêi·ªÅu ch·ªânh $W$ v√† $b$ ƒë·ªÉ gi·∫£m m·∫•t m√°t:  
                     $$ W^{(l)} = W^{(l)} - \\eta \\cdot \\frac{\\partial L}{\\partial W^{(l)}} $$  
                     $$ b^{(l)} = b^{(l)} - \\eta \\cdot \\frac{\\partial L}{\\partial b^{(l)}} $$  
                   - Trong ƒë√≥: $\\eta$ l√† **t·ªëc ƒë·ªô h·ªçc (learning rate)**.  
                """, unsafe_allow_html=True)
                try:
                    st.image(os.path.join("plnw", "step5_gradient.png"), caption="Minh h·ªça B∆∞·ªõc 5: C·∫≠p nh·∫≠t tham s·ªë", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 5.")

                st.markdown("""
                6. **L·∫∑p l·∫°i**:  
                   - Quay l·∫°i b∆∞·ªõc $2$ qua nhi·ªÅu **epoch** cho ƒë·∫øn khi $L$ h·ªôi t·ª•.  
                """, unsafe_allow_html=True)
                try:
                    st.image(os.path.join("plnw", "step6_repeat_improved.png"), caption="Minh h·ªça B∆∞·ªõc 6: L·∫∑p l·∫°i", width=600)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça cho B∆∞·ªõc 6.")

                st.subheader("‚öôÔ∏è C√°c tham s·ªë c∆° b·∫£n v√† c√¥ng d·ª•ng")
                st.markdown("""
                D∆∞·ªõi ƒë√¢y l√† c√°c tham s·ªë c∆° b·∫£n b·∫°n s·∫Ω s·ª≠ d·ª•ng ƒë·ªÉ ƒëi·ªÅu ch·ªânh m√¥ h√¨nh trong ·ª©ng d·ª•ng n√†y:  

                - **S·ªë l·ªõp ·∫©n (Number of Hidden Layers)**:  
                  - **√ù nghƒ©a**: Quy·∫øt ƒë·ªãnh ƒë·ªô s√¢u c·ªßa m·∫°ng (t·ª´ $1$ ƒë·∫øn $3$ l·ªõp).  
                  - **C√¥ng d·ª•ng**: Nhi·ªÅu l·ªõp ·∫©n gi√∫p h·ªçc ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p h∆°n, nh∆∞ng tƒÉng th·ªùi gian t√≠nh to√°n.  
                  - **V√≠ d·ª•**: $1$ l·ªõp ·∫©n cho b√†i to√°n ƒë∆°n gi·∫£n, $2$-$3$ l·ªõp cho ƒë·ªô ch√≠nh x√°c cao h∆°n.  

                - **S·ªë n∆°-ron m·ªói l·ªõp (Neurons per Layer)**:  
                  - **√ù nghƒ©a**: S·ªë ƒë∆°n v·ªã x·ª≠ l√Ω trong m·ªói l·ªõp ·∫©n (t·ª´ $10$ ƒë·∫øn $500$).  
                  - **C√¥ng d·ª•ng**: Nhi·ªÅu n∆°-ron tƒÉng kh·∫£ nƒÉng h·ªçc, nh∆∞ng c√≥ th·ªÉ g√¢y qu√° t·∫£i.  
                  - **C√¥ng th·ª©c li√™n quan**: ƒê·∫ßu ra m·ªói l·ªõp:  
                    $$ A^{(l)} = \\sigma(W^{(l)} \\cdot A^{(l-1)} + b^{(l)}) $$  

                - **T·ªëc ƒë·ªô h·ªçc (Learning Rate, $\\eta$)**:  
                  - **√ù nghƒ©a**: T·ªëc ƒë·ªô c·∫≠p nh·∫≠t tr·ªçng s·ªë (v√≠ d·ª•: $0.01$, $0.001$, $0.0005$, $0.0001$).  
                  - **C√¥ng d·ª•ng**: Gi√° tr·ªã nh·ªè h·ªçc ch·∫≠m nh∆∞ng ·ªïn ƒë·ªãnh, gi√° tr·ªã l·ªõn h·ªçc nhanh nh∆∞ng c√≥ th·ªÉ kh√¥ng h·ªôi t·ª•.  
                  - **C√¥ng th·ª©c**: C·∫≠p nh·∫≠t tr·ªçng s·ªë:  
                    $$ W^{(l)} = W^{(l)} - \\eta \\cdot \\frac{\\partial L}{\\partial W^{(l)}} $$  

                - **S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa (Max Iterations)**:  
                  - **√ù nghƒ©a**: S·ªë epoch t·ªëi ƒëa ƒë·ªÉ hu·∫•n luy·ªán (t·ª´ $50$ ƒë·∫øn $500$).  
                  - **C√¥ng d·ª•ng**: Gi·ªõi h·∫°n s·ªë l·∫ßn m·∫°ng h·ªçc qua d·ªØ li·ªáu. Nhi·ªÅu l·∫ßn l·∫∑p tƒÉng ƒë·ªô ch√≠nh x√°c nh∆∞ng t·ªën th·ªùi gian.  

                - **H√†m k√≠ch ho·∫°t (Activation Function, $\\sigma$)**:  
                  - **√ù nghƒ©a**: Quy·∫øt ƒë·ªãnh c√°ch n∆°-ron x·ª≠ l√Ω ƒë·∫ßu v√†o (ReLU, Sigmoid, Tanh).  
                  - **C√¥ng d·ª•ng**: Gi√∫p m·∫°ng h·ªçc ƒë·∫∑c tr∆∞ng phi tuy·∫øn.  
                  - **C√¥ng th·ª©c**:  
                    - ReLU: $$ \\sigma(z) = \\max(0, z) $$  
                    - Sigmoid: $$ \\sigma(z) = \\frac{1}{1 + e^{-z}} $$  
                    - Tanh: $$ \\sigma(z) = \\tanh(z) $$  

                - **Optimizer (Solver)**:  
                  - **√ù nghƒ©a**: Ph∆∞∆°ng ph√°p t·ªëi ∆∞u h√≥a tr·ªçng s·ªë (LBFGS, SGD, Adam).  
                  - **C√¥ng d·ª•ng**: ƒêi·ªÅu ch·ªânh c√°ch m·∫°ng c·∫≠p nh·∫≠t tham s·ªë ƒë·ªÉ gi·∫£m m·∫•t m√°t.  
                  - **V√≠ d·ª•**:  
                    - **SGD**: Gradient Descent ng·∫´u nhi√™n, ƒë∆°n gi·∫£n nh∆∞ng ch·∫≠m.  
                    - **Adam**: Nhanh v√† hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu l·ªõn.  
                """, unsafe_allow_html=True)

                st.subheader("üü™ ∆Øu ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm")
                st.markdown("""
                ##### ‚úÖ **∆Øu ƒëi·ªÉm**:  
                - H·ªçc ƒë∆∞·ª£c c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p t·ª´ d·ªØ li·ªáu h√¨nh ·∫£nh nh∆∞ MNIST.  
                - Linh ho·∫°t v·ªõi nhi·ªÅu tham s·ªë ƒë·ªÉ t·ªëi ∆∞u h√≥a.  

                ##### ‚ùå **Nh∆∞·ª£c ƒëi·ªÉm**:  
                - T·ªën th·ªùi gian hu·∫•n luy·ªán n·∫øu s·ªë m·∫´u l·ªõn ho·∫∑c c·∫•u tr√∫c m·∫°ng ph·ª©c t·∫°p.  
                - C·∫ßn ƒëi·ªÅu ch·ªânh tham s·ªë c·∫©n th·∫≠n ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£ t·ªët nh·∫•t.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 4. C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)")
                st.markdown("""
                ƒê·ªô ch√≠nh x√°c (**Accuracy**) ƒëo t·ª∑ l·ªá d·ª± ƒëo√°n ƒë√∫ng:  
                $$ \\text{Accuracy} = \\frac{\\text{S·ªë m·∫´u d·ª± ƒëo√°n ƒë√∫ng}}{\\text{T·ªïng s·ªë m·∫´u}} $$  
                - **V√≠ d·ª•**: D·ª± ƒëo√°n ƒë√∫ng $92/100$ ·∫£nh ‚Üí $\\text{Accuracy} = 92\\%$.  
                - **√ù nghƒ©a**: V·ªõi Neural Network, Accuracy ƒëo kh·∫£ nƒÉng m√¥ h√¨nh ph√¢n lo·∫°i ƒë√∫ng c√°c ch·ªØ s·ªë d·ª±a tr√™n ƒë·∫∑c tr∆∞ng pixel h·ªçc ƒë∆∞·ª£c.  
                """, unsafe_allow_html=True)
                status_text.text("ƒê√£ t·∫£i 100%")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

    with tab_load:
        st.header("T·∫£i D·ªØ li·ªáu")

        if st.button("T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML"):
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ OpenML..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                try:
                    X, y = fetch_mnist_data()
                    st.session_state['full_data'] = (X, y)
                    with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Load"):
                        mlflow.log_param("total_samples", X.shape[0])
                    st.success("T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                    st.write("K√≠ch th∆∞·ªõc d·ªØ li·ªáu g·ªëc:", X.shape)
                    status_text.text("ƒê√£ t·∫£i 100%")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")
                    progress_bar.progress(0)
                    status_text.empty()

        if 'full_data' in st.session_state:
            X_full, y_full = st.session_state['full_data']
            num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", 
                                    min_value=10, max_value=70000, value=min(1000, len(X_full)), step=1,
                                    help="Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ x·ª≠ l√Ω (t·ªëi ƒëa 70,000).")
            if st.button("Ch·ªët s·ªë l∆∞·ª£ng m·∫´u"):
                with st.spinner(f"ƒêang l·∫•y {num_samples} m·∫´u..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                        time.sleep(0.05)
                    indices = np.random.choice(len(X_full), size=num_samples, replace=False)
                    X_sampled = X_full.iloc[indices]
                    y_sampled = y_full.iloc[indices]
                    st.session_state['data'] = (X_sampled, y_sampled)
                    with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample"):
                        mlflow.log_param("num_samples", num_samples)
                    st.success(f"ƒê√£ ch·ªët {num_samples} m·∫´u!")
                    status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

    with tab_preprocess:
        st.header("X·ª≠ l√≠ D·ªØ li·ªáu")

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† ch·ªët s·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc.")
        else:
            X, y = st.session_state['data']
            if "data_original" not in st.session_state:
                st.session_state["data_original"] = (X.copy(), y.copy())

            if "data_processed" in st.session_state:
                data_processed = st.session_state["data_processed"]
                if not (isinstance(data_processed, tuple) and len(data_processed) == 2):
                    st.session_state.pop("data_processed", None)

            st.subheader("D·ªØ li·ªáu G·ªëc")
            fig, axes = plt.subplots(2, 5, figsize=(10, 4))
            for i, ax in enumerate(axes.flat):
                ax.imshow(X.iloc[i].values.reshape(28, 28), cmap='gray')
                ax.set_title(f"Label: {y.iloc[i]}")
                ax.axis("off")
            st.pyplot(fig)

            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button("Normalization", key="normalize_btn"):
                    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                            time.sleep(0.05)
                        X_norm = X / 255.0
                        st.session_state["data_processed"] = (X_norm, y)
                        st.success("ƒê√£ chu·∫©n ho√° d·ªØ li·ªáu!")
                        status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()
                        st.rerun()
            with col2:
                st.markdown("""
                    <div class="tooltip">
                        ?
                        <span class="tooltiptext">
                            ƒê∆∞a d·ªØ li·ªáu v·ªÅ kho·∫£ng [0, 1] b·∫±ng c√°ch chia cho 255.<br>
                            C√¥ng d·ª•ng: ƒê·∫£m b·∫£o thang ƒëo ƒë·ªìng nh·∫•t, h·ªØu √≠ch cho Neural Network.
                        </span>
                    </div>
                """, unsafe_allow_html=True)

            if "data_processed" in st.session_state:
                data_processed = st.session_state["data_processed"]
                if isinstance(data_processed, tuple) and len(data_processed) == 2:
                    try:
                        X_processed, y_processed = data_processed
                        st.subheader("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
                        fig, axes = plt.subplots(2, 5, figsize=(10, 4))
                        for i, ax in enumerate(axes.flat):
                            ax.imshow(X_processed.iloc[i].values.reshape(28, 28), cmap='gray')
                            ax.set_title(f"Label: {y_processed.iloc[i]}")
                            ax.axis("off")
                        st.pyplot(fig)
                    except (ValueError, TypeError, AttributeError) as e:
                        st.error(f"L·ªói khi hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω: {e}. Vui l√≤ng th·ª≠ chu·∫©n h√≥a l·∫°i d·ªØ li·ªáu.")
                        st.session_state.pop("data_processed", None)
                else:
                    st.error("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng th·ª≠ chu·∫©n h√≥a l·∫°i d·ªØ li·ªáu.")
                    st.session_state.pop("data_processed", None)
            else:
                st.info("D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng nh·∫•n 'Normalization' ƒë·ªÉ x·ª≠ l√Ω.")

    with tab_split:
        st.header("Chia T·∫≠p D·ªØ li·ªáu")

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            data_source = st.session_state.get('data_processed', st.session_state['data'])
            X, y = data_source
            total_samples = len(X)
            st.write(f"T·ªïng s·ªë m·∫´u: {total_samples}")

            test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20, help="Ph·∫ßn trƒÉm d·ªØ li·ªáu d√πng cho t·∫≠p Test.")
            valid_pct = st.slider("T·ª∑ l·ªá Validation (%)", 0, 50, 20, help="Ph·∫ßn trƒÉm d·ªØ li·ªáu d√πng cho t·∫≠p Validation.")

            test_size = test_pct / 100
            X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
            valid_size = (valid_pct / 100) / (1 - test_size) if test_size < 1 else 0
            X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=valid_size, random_state=42)

            st.write(f"Train: {len(X_train)}, Validation: {len(X_valid)}, Test: {len(X_test)}")
            if st.button("X√°c nh·∫≠n", key="confirm_split_button"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                        time.sleep(0.05)
                    st.session_state['split_data'] = {
                        "X_train": X_train, "y_train": y_train,
                        "X_valid": X_valid, "y_valid": y_valid,
                        "X_test": X_test, "y_test": y_test
                    }
                    st.success("ƒê√£ chia d·ªØ li·ªáu!")
                    status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

    with tab_train_eval:
        st.header("Hu·∫•n luy·ªán v√† ƒê√°nh gi√° M√¥ h√¨nh")

        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc khi hu·∫•n luy·ªán m√¥ h√¨nh.")
        else:
            # L·∫•y d·ªØ li·ªáu ƒë√£ chia
            X_train = st.session_state['split_data']["X_train"]
            y_train = st.session_state['split_data']["y_train"]
            X_valid = st.session_state['split_data']["X_valid"]
            y_valid = st.session_state['split_data']["y_valid"]
            X_test = st.session_state['split_data']["X_test"]
            y_test = st.session_state['split_data']["y_test"]

            num_samples = len(X_train)
            st.write(f"**S·ªë m·∫´u hu·∫•n luy·ªán**: {num_samples}")

            # H√†m t·ª± ƒë·ªông ch·ªçn tham s·ªë t·ªëi ∆∞u d·ª±a tr√™n s·ªë m·∫´u, bao g·ªìm s·ªë l·ªõp ·∫©n
            def get_optimal_params(num_samples):
                if num_samples < 1000:
                    return {
                        "hidden_layer_sizes": (32,),  # 1 l·ªõp ·∫©n
                        "learning_rate_init": 0.01,
                        "max_iter": 50,
                        "activation": "relu",
                        "solver": "adam",
                        "batch_size": 32
                    }
                elif 1000 <= num_samples < 5000:
                    return {
                        "hidden_layer_sizes": (64,),  # 1 l·ªõp ·∫©n
                        "learning_rate_init": 0.005,
                        "max_iter": 100,
                        "activation": "relu",
                        "solver": "adam",
                        "batch_size": 64
                    }
                elif 5000 <= num_samples <= 20000:
                    return {
                        "hidden_layer_sizes": (128, 64),  # 2 l·ªõp ·∫©n
                        "learning_rate_init": 0.001,
                        "max_iter": 150,
                        "activation": "relu",
                        "solver": "adam",
                        "batch_size": 128
                    }
                else:  # >20000 m·∫´u
                    return {
                        "hidden_layer_sizes": (256, 128),  # 2 l·ªõp ·∫©n
                        "learning_rate_init": 0.0005,
                        "max_iter": 200,
                        "activation": "relu",
                        "solver": "adam",
                        "batch_size": 256
                    }

            # T·ª± ƒë·ªông ch·ªçn tham s·ªë t·ªëi ∆∞u ban ƒë·∫ßu
            if "optimal_params" not in st.session_state:
                st.session_state["optimal_params"] = get_optimal_params(num_samples)
            
            # L·∫•y tham s·ªë hi·ªán t·∫°i (∆∞u ti√™n tham s·ªë ng∆∞·ªùi d√πng ch·ªânh n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng t·ªëi ∆∞u)
            params = st.session_state.get("training_params", st.session_state["optimal_params"].copy())

            # Hi·ªÉn th·ªã b·∫£ng tham s·ªë t·ªëi ∆∞u v·ªõi c·ªôt "S·ªë l·ªõp ·∫©n"
            st.subheader("‚öôÔ∏è C·∫•u h√¨nh tham s·ªë m√¥ h√¨nh (T·ª± ƒë·ªông ch·ªçn s·ªë l·ªõp ·∫©n)")
            st.markdown("""
            C√°c tham s·ªë t·ªëi ∆∞u ƒë∆∞·ª£c t·ª± ƒë·ªông ch·ªçn d·ª±a tr√™n s·ªë m·∫´u ƒë·ªÉ hu·∫•n luy·ªán nhanh:
            | S·ªë m·∫´u       | S·ªë l·ªõp ·∫©n | K√≠ch th∆∞·ªõc l·ªõp ·∫©n | T·ªëc ƒë·ªô h·ªçc | S·ªë l·∫ßn l·∫∑p | H√†m k√≠ch ho·∫°t | Tr√¨nh t·ªëi ∆∞u | K√≠ch th∆∞·ªõc batch |
            |--------------|-----------|-------------------|------------|------------|---------------|--------------|------------------|
            | <1000        | 1         | 32                | 0.01       | 50         | ReLU          | adam         | 32               |
            | 1000-5000    | 1         | 64                | 0.005      | 100        | ReLU          | adam         | 64               |
            | 5000-20000   | 2         | (128, 64)         | 0.001      | 150        | ReLU          | adam         | 128              |
            | >20000       | 2         | (256, 128)        | 0.0005     | 200        | ReLU          | adam         | 256              |
            """, unsafe_allow_html=True)

            # Hi·ªÉn th·ªã th√¥ng tin tham s·ªë t·ªëi ∆∞u t·ª± ƒë·ªông
            st.info(f"**Tham s·ªë t·ªëi ∆∞u t·ª± ƒë·ªông cho {num_samples} m·∫´u**: S·ªë l·ªõp ·∫©n = {len(st.session_state['optimal_params']['hidden_layer_sizes'])}, "
                    f"K√≠ch th∆∞·ªõc l·ªõp ·∫©n = {st.session_state['optimal_params']['hidden_layer_sizes']}, "
                    f"T·ªëc ƒë·ªô h·ªçc = {st.session_state['optimal_params']['learning_rate_init']}, S·ªë l·∫ßn l·∫∑p = {st.session_state['optimal_params']['max_iter']}, "
                    f"H√†m k√≠ch ho·∫°t = {st.session_state['optimal_params']['activation']}, Tr√¨nh t·ªëi ∆∞u = {st.session_state['optimal_params']['solver']}, "
                    f"K√≠ch th∆∞·ªõc batch = {st.session_state['optimal_params']['batch_size']}")

            # Giao di·ªán t√πy ch·ªânh tham s·ªë
            col_param1, col_param2 = st.columns(2)

            with col_param1:
                with st.expander("C·∫•u tr√∫c m·∫°ng", expanded=False):
                    num_hidden_layers = st.number_input(
                        "S·ªë l·ªõp ·∫©n", min_value=1, max_value=3, value=len(params["hidden_layer_sizes"]),
                        help="S·ªë l·ªõp ·∫©n quy·∫øt ƒë·ªãnh ƒë·ªô s√¢u c·ªßa m·∫°ng (t·ªëi ƒëa 3 l·ªõp)."
                    )
                    hidden_size = st.number_input(
                        "S·ªë n∆°-ron m·ªói l·ªõp", min_value=10, max_value=512, value=params["hidden_layer_sizes"][0],
                        help="S·ªë n∆°-ron trong m·ªói l·ªõp ·∫©n (t·ªëi ƒëa 512)."
                    )
                    params["hidden_layer_sizes"] = tuple([hidden_size] * num_hidden_layers)
                    params["activation"] = st.selectbox(
                        "H√†m k√≠ch ho·∫°t", ["relu", "sigmoid", "tanh"],
                        index=["relu", "sigmoid", "tanh"].index(params["activation"]),
                        help="Ch·ªçn h√†m k√≠ch ho·∫°t ƒë·ªÉ x·ª≠ l√Ω phi tuy·∫øn t√≠nh."
                    )

            with col_param2:
                with st.expander("T·ªëi ∆∞u h√≥a", expanded=False):
                    params["learning_rate_init"] = st.selectbox(
                        "T·ªëc ƒë·ªô h·ªçc", [0.01, 0.005, 0.001, 0.0005],
                        index=[0.01, 0.005, 0.001, 0.0005].index(params["learning_rate_init"]),
                        help="T·ªëc ƒë·ªô c·∫≠p nh·∫≠t tr·ªçng s·ªë trong qu√° tr√¨nh hu·∫•n luy·ªán."
                    )
                    params["max_iter"] = st.number_input(
                        "S·ªë l·∫ßn l·∫∑p", min_value=5, max_value=200, value=params["max_iter"],
                        help="S·ªë l·∫ßn l·∫∑p to√†n b·ªô d·ªØ li·ªáu (t·ªëi ƒëa 200 ƒë·ªÉ tƒÉng t·ªëc)."
                    )
                    params["batch_size"] = st.number_input(
                        "K√≠ch th∆∞·ªõc batch", min_value=1, max_value=256, value=params["batch_size"],
                        help="S·ªë m·∫´u x·ª≠ l√Ω trong m·ªói l·∫ßn l·∫∑p (t·ªëi ƒëa 256 ƒë·ªÉ tƒÉng t·ªëc)."
                    )
                    params["solver"] = st.selectbox(
                        "Tr√¨nh t·ªëi ∆∞u", ["lbfgs", "sgd", "adam"],
                        index=["lbfgs", "sgd", "adam"].index(params["solver"]),
                        help="Ph∆∞∆°ng ph√°p t·ªëi ∆∞u h√≥a tr·ªçng s·ªë (adam th∆∞·ªùng nhanh nh·∫•t)."
                    )

            # N√∫t kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u
            if st.button("üîÑ Kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u", help="Quay l·∫°i tham s·ªë t·ªëi ∆∞u t·ª± ƒë·ªông d·ª±a tr√™n s·ªë m·∫´u"):
                st.session_state["training_params"] = st.session_state["optimal_params"].copy()
                st.success("ƒê√£ kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u!")
                st.rerun()

            # L∆∞u tham s·ªë hi·ªán t·∫°i v√†o session state
            st.session_state["training_params"] = params

            # N√∫t hu·∫•n luy·ªán
            if st.button("üöÄ B·∫Øt ƒë·∫ßu Hu·∫•n luy·ªán", key="train_button", type="primary"):
                try:
                    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        start_time = time.time()

                        status_text.text("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu...")
                        progress_bar.progress(20)
                        time.sleep(0.05)

                        model = MLPClassifier(
                            hidden_layer_sizes=params["hidden_layer_sizes"],
                            max_iter=params["max_iter"],
                            learning_rate_init=params["learning_rate_init"],
                            activation=params["activation"],
                            solver=params["solver"],
                            batch_size=params["batch_size"],
                            verbose=True
                        )

                        status_text.text("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
                        for i in [30, 40, 50, 60, 70]:
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang hu·∫•n luy·ªán {i}%")
                            time.sleep(0.05)
                        model.fit(X_train, y_train)

                        status_text.text("ƒêang ƒë√°nh gi√° m√¥ h√¨nh...")
                        for i in [80, 90]:
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang ƒë√°nh gi√° {i}%")
                            time.sleep(0.05)
                        y_valid_pred = model.predict(X_valid)
                        y_test_pred = model.predict(X_test)
                        acc_valid = accuracy_score(y_valid, y_valid_pred)
                        acc_test = accuracy_score(y_test, y_test_pred)
                        cm_valid = confusion_matrix(y_valid, y_valid_pred)
                        cm_test = confusion_matrix(y_test, y_test_pred)

                        status_text.text("ƒêang l∆∞u k·∫øt qu·∫£...")
                        progress_bar.progress(100)
                        status_text.text("ƒêang l∆∞u k·∫øt qu·∫£ 100%")
                        time.sleep(0.05)

                        run_name = f"NeuralNetwork_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=run_name) as run:
                            mlflow.log_params({
                                "hidden_layer_sizes": params["hidden_layer_sizes"],
                                "learning_rate_init": params["learning_rate_init"],
                                "max_iter": params["max_iter"],
                                "activation": params["activation"],
                                "solver": params["solver"],
                                "batch_size": params["batch_size"]
                            })
                            mlflow.log_metric("accuracy_val", acc_valid)
                            mlflow.log_metric("accuracy_test", acc_test)
                            mlflow.log_metric("training_time", time.time() - start_time)

                            st.session_state['model'] = model
                            st.session_state['training_results'] = {
                                'accuracy_val': acc_valid,
                                'accuracy_test': acc_test,
                                'cm_valid': cm_valid,
                                'cm_test': cm_test,
                                'run_name': run_name,
                                'run_id': run.info.run_id,
                                'params': params,
                                'training_time': time.time() - start_time
                            }

                        status_text.text("Ho√†n t·∫•t hu·∫•n luy·ªán 100%")
                        st.success(f"ƒê√£ hu·∫•n luy·ªán xong! Th·ªùi gian: {time.time() - start_time:.2f} gi√¢y")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()
                        st.rerun()

                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán: {e}")
                    progress_bar.progress(0)
                    status_text.empty()

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
            if 'training_results' in st.session_state:
                results = st.session_state['training_results']
                st.subheader("üìä K·∫øt qu·∫£ Hu·∫•n luy·ªán")

                col_result1, col_result2, col_result3 = st.columns(3)
                with col_result1:
                    st.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{results['training_time']:.2f} gi√¢y")
                with col_result2:
                    st.metric("ƒê·ªô ch√≠nh x√°c Validation", f"{results['accuracy_val']*100:.2f}%")
                with col_result3:
                    st.metric("ƒê·ªô ch√≠nh x√°c Test", f"{results['accuracy_test']*100:.2f}%")

                st.subheader("üìà Ma tr·∫≠n Nh·∫ßm l·∫´n")
                col_cm1, col_cm2 = st.columns(2)
                with col_cm1:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_valid'], annot=True, fmt="d", cmap="Blues", ax=ax, cbar=False)
                    ax.set_title("Validation")
                    st.pyplot(fig)
                with col_cm2:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_test'], annot=True, fmt="d", cmap="Blues", ax=ax, cbar=False)
                    ax.set_title("Test")
                    st.pyplot(fig)

                st.subheader("‚ÑπÔ∏è Th√¥ng tin Chi ti·∫øt")
                with st.expander("Xem chi ti·∫øt", expanded=False):
                    st.markdown("**Th√¥ng tin l·∫ßn ch·∫°y:**")
                    st.write(f"- T√™n: {results['run_name']}")
                    st.write(f"- ID: {results['run_id']}")
                    st.write(f"- Th·ªùi gian hu·∫•n luy·ªán: {results['training_time']:.2f} gi√¢y")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Validation: {results['accuracy_val']*100:.2f}%")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Test: {results['accuracy_test']*100:.2f}%")
                    st.markdown("**Tham s·ªë ƒë√£ ch·ªçn:**")
                    st.json({
                        "S·ªë l·ªõp ·∫©n": len(results['params']['hidden_layer_sizes']),
                        "S·ªë n∆°-ron m·ªói l·ªõp": results['params']['hidden_layer_sizes'],
                        "T·ªëc ƒë·ªô h·ªçc": results['params']['learning_rate_init'],
                        "S·ªë l·∫ßn l·∫∑p": results['params']['max_iter'],
                        "K√≠ch th∆∞·ªõc batch": results['params']['batch_size'],
                        "H√†m k√≠ch ho·∫°t": results['params']['activation'],
                        "Tr√¨nh t·ªëi ∆∞u": results['params']['solver']
                    })

    with tab_demo:
        st.header("Demo D·ª± ƒëo√°n")

        if 'split_data' not in st.session_state or 'model' not in st.session_state:
            st.info("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi s·ª≠ d·ª•ng demo.")
        else:
            st.markdown("""
            Trong tab n√†y, b·∫°n c√≥ th·ªÉ th·ª≠ nghi·ªám d·ª± ƒëo√°n ch·ªØ s·ªë vi·∫øt tay b·∫±ng c√°ch:
            - S·ª≠ d·ª•ng **d·ªØ li·ªáu Test** t·ª´ t·∫≠p d·ªØ li·ªáu MNIST.
            - **Upload ·∫£nh** ch·ªØ s·ªë (k√≠ch th∆∞·ªõc 28x28, thang ƒë·ªô x√°m).
            - **V·∫Ω s·ªë** tr·ª±c ti·∫øp tr√™n canvas.
            K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ch·ªØ s·ªë ƒë∆∞·ª£c d·ª± ƒëo√°n c√πng x√°c su·∫•t cao nh·∫•t (max_proba).
            """, unsafe_allow_html=True)

            mode = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c:", ["D·ªØ li·ªáu Test", "Upload ·∫£nh", "V·∫Ω s·ªë"], help="Ch·ªçn c√°ch b·∫°n mu·ªën th·ª≠ nghi·ªám d·ª± ƒëo√°n.")
            progress_bar = st.progress(0)
            status_text = st.empty()

            def preprocess_input(data):
                return data / 255.0

            is_normalized = 'data_processed' in st.session_state

            if mode == "D·ªØ li·ªáu Test":
                X_test = st.session_state['split_data']["X_test"]
                y_test = st.session_state['split_data']["y_test"]
                idx = st.slider("Ch·ªçn m·∫´u Test", 0, len(X_test)-1, 0, help="Ch·ªçn m·ªôt m·∫´u t·ª´ t·∫≠p d·ªØ li·ªáu Test ƒë·ªÉ d·ª± ƒëo√°n.")
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.write("**·∫¢nh m·∫´u Test ƒë∆∞·ª£c ch·ªçn:**")
                    fig, ax = plt.subplots(figsize=(2, 2))
                    ax.imshow(X_test.iloc[idx].values.reshape(28, 28), cmap='gray')
                    ax.axis('off')
                    st.pyplot(fig)
                with col2:
                    st.write(f"**Nh√£n th·ª±c t·∫ø:** {y_test.iloc[idx]}")

                if st.button("D·ª± ƒëo√°n", key="predict_test_button"):
                    with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                        for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                            time.sleep(0.05)

                        sample = X_test.iloc[idx].values.reshape(1, -1)
                        if not is_normalized:
                            sample = preprocess_input(sample)
                        model = st.session_state['model']
                        prediction = model.predict(sample)[0]
                        proba = model.predict_proba(sample)[0]
                        max_proba = np.max(proba) * 100

                        st.success(f"D·ª± ƒëo√°n: **{prediction}** | X√°c su·∫•t cao nh·∫•t (max_proba): **{max_proba:.2f}%** | Nh√£n th·ª±c t·∫ø: **{y_test.iloc[idx]}**")
                        status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()

            elif mode == "Upload ·∫£nh":
                uploaded_images = st.file_uploader("Upload ·∫£nh (28x28, thang ƒë·ªô x√°m)", type=["png", "jpg"], accept_multiple_files=True,
                                                  help="T·∫£i l√™n m·ªôt ho·∫∑c nhi·ªÅu ·∫£nh ch·ªØ s·ªë vi·∫øt tay (ƒë·ªãnh d·∫°ng PNG/JPG, k√≠ch th∆∞·ªõc 28x28, thang ƒë·ªô x√°m).")
                if uploaded_images:
                    for i, uploaded_image in enumerate(uploaded_images):
                        try:
                            img = Image.open(uploaded_image).convert('L').resize((28, 28))
                            st.image(img, caption=f"·∫¢nh {i+1} ƒë∆∞·ª£c upload", width=280)
                            
                            img_array = np.array(img).flatten().reshape(1, -1)
                            if not is_normalized:
                                img_array = preprocess_input(img_array)
                            
                            if st.button(f"D·ª± ƒëo√°n ·∫£nh {i+1}", key=f"predict_upload_{i}"):
                                with st.spinner(f"ƒêang d·ª± ƒëo√°n ·∫£nh {i+1}..."):
                                    for j in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                                        progress_bar.progress(j)
                                        status_text.text(f"ƒêang x·ª≠ l√Ω {j}%")
                                        time.sleep(0.05)

                                    model = st.session_state['model']
                                    prediction = model.predict(img_array)[0]
                                    proba = model.predict_proba(img_array)[0]
                                    max_proba = np.max(proba) * 100

                                    st.success(f"D·ª± ƒëo√°n cho ·∫£nh {i+1}: **{prediction}** | X√°c su·∫•t cao nh·∫•t (max_proba): **{max_proba:.2f}%**")
                                    status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                                    time.sleep(0.5)
                                    status_text.empty()
                                    progress_bar.empty()

                        except Exception as e:
                            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh {i+1}: {e}. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh (28x28, thang ƒë·ªô x√°m).")
                            progress_bar.progress(0)
                            status_text.empty()

            elif mode == "V·∫Ω s·ªë":
                st.write("V·∫Ω m·ªôt ch·ªØ s·ªë t·ª´ 0-9 tr√™n canvas b√™n d∆∞·ªõi (k√≠ch th∆∞·ªõc 280x280, s·∫Ω ƒë∆∞·ª£c resize v·ªÅ 28x28):")
                canvas_result = st_canvas(
                    fill_color="black",
                    stroke_width=20,
                    stroke_color="white",
                    background_color="black",
                    width=280,
                    height=280,
                    drawing_mode="freedraw",
                    key="canvas",
                    help="V·∫Ω m·ªôt ch·ªØ s·ªë t·ª´ 0-9. Nh·∫•n 'D·ª± ƒëo√°n s·ªë ƒë√£ v·∫Ω' ƒë·ªÉ xem k·∫øt qu·∫£."
                )
                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button("D·ª± ƒëo√°n s·ªë ƒë√£ v·∫Ω", key="predict_draw_button"):
                        if canvas_result.image_data is not None and np.any(canvas_result.image_data):
                            with st.spinner("ƒêang x·ª≠ l√Ω h√¨nh v·∫Ω..."):
                                for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                                    progress_bar.progress(i)
                                    status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                                    time.sleep(0.05)

                                img = Image.fromarray((canvas_result.image_data * 255).astype(np.uint8)).convert('L').resize((28, 28))
                                img_array = np.array(img).flatten().reshape(1, -1)
                                if not is_normalized:
                                    img_array = preprocess_input(img_array)
                                model = st.session_state['model']
                                prediction = model.predict(img_array)[0]
                                proba = model.predict_proba(img_array)[0]
                                max_proba = np.max(proba) * 100

                                st.success(f"D·ª± ƒëo√°n: **{prediction}** | X√°c su·∫•t cao nh·∫•t (max_proba): **{max_proba:.2f}%**")
                                st.image(img, caption="H√¨nh v·∫Ω c·ªßa b·∫°n", use_container_width=True)
                                status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                                time.sleep(0.5)
                                status_text.empty()
                                progress_bar.empty()
                        else:
                            st.warning("Vui l√≤ng v·∫Ω m·ªôt ch·ªØ s·ªë tr∆∞·ªõc khi d·ª± ƒëo√°n!")
                            progress_bar.progress(0)
                            status_text.empty()
                with col2:
                    if st.button("X√≥a Canvas", key="clear_canvas_button"):
                        st.session_state['canvas_key'] = st.session_state.get('canvas_key', 0) + 1
                        st.rerun()

    with tab_log_info:
        st.header("Theo d√µi K·∫øt qu·∫£")

        st.markdown(f"""
        Tab n√†y cho ph√©p b·∫°n xem danh s√°ch c√°c l·∫ßn hu·∫•n luy·ªán ƒë√£ th·ª±c hi·ªán t·ª´ Experiment ID {EXPERIMENT_ID}. Ch·ªçn m·ªôt l·∫ßn ch·∫°y ƒë·ªÉ xem chi ti·∫øt, ƒë·ªïi t√™n ho·∫∑c x√≥a.
        """, unsafe_allow_html=True)

        try:
            with st.spinner("ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                client = MlflowClient()
                runs = client.search_runs(
                    experiment_ids=[EXPERIMENT_ID],
                    order_by=["attributes.start_time DESC"]
                )

                if not runs:
                    st.info(f"Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o ƒë∆∞·ª£c ghi nh·∫≠n trong Experiment ID {EXPERIMENT_ID}.")
                    status_text.text("ƒê√£ t·∫£i 100%")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    run_names = list(run_options.values())
                    run_ids = list(run_options.keys())

                    default_index = 0

                    st.subheader("Danh s√°ch Run")
                    selected_run_name = st.selectbox(
                        "Ch·ªçn run:",
                        options=run_names,
                        index=default_index,
                        key="main_select",
                        help="Ch·ªçn m·ªôt l·∫ßn ch·∫°y ƒë·ªÉ xem chi ti·∫øt, ƒë·ªïi t√™n ho·∫∑c x√≥a."
                    )
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input(
                        "Nh·∫≠p t√™n m·ªõi:",
                        value=selected_run_name,
                        key="rename_input"
                    )
                    if st.button("C·∫≠p nh·∫≠t t√™n", key="rename_button"):
                        with st.spinner("ƒêang c·∫≠p nh·∫≠t t√™n..."):
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                                time.sleep(0.05)
                            if new_run_name.strip() and new_run_name.strip() != selected_run_name:
                                client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                                if 'training_results' in st.session_state and st.session_state['training_results']['run_id'] == selected_run_id:
                                    st.session_state['training_results']['run_name'] = new_run_name.strip()
                                st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                                status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                                time.sleep(0.5)
                                status_text.empty()
                                progress_bar.empty()
                                st.rerun()
                            elif not new_run_name.strip():
                                st.warning("Vui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá.")
                                progress_bar.progress(0)
                                status_text.empty()
                            else:
                                st.info("T√™n m·ªõi tr√πng v·ªõi t√™n hi·ªán t·∫°i.")
                                progress_bar.progress(0)
                                status_text.empty()

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y", key="delete_button"):
                        with st.spinner("ƒêang x√≥a l·∫ßn ch·∫°y..."):
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            for i in [20, 30, 40, 50, 60, 70, 80, 90, 100]:
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                                time.sleep(0.05)
                            client.delete_run(selected_run_id)
                            if 'training_results' in st.session_state and st.session_state['training_results']['run_id'] == selected_run_id:
                                del st.session_state['training_results']
                            st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                            status_text.text("ƒê√£ x·ª≠ l√Ω 100%")
                            time.sleep(0.5)
                            status_text.empty()
                            progress_bar.empty()
                            st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt c·ªßa Run")
                    st.write(f"**T√™n l·∫ßn ch·∫°y:** {selected_run_name}")
                    st.write(f"**ID l·∫ßn ch·∫°y:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")

                    st.markdown("**Tham s·ªë:**", unsafe_allow_html=True)
                    if selected_run.data.params:
                        st.json(selected_run.data.params, expanded=True)
                    else:
                        st.write("Kh√¥ng c√≥ tham s·ªë ƒë∆∞·ª£c ghi nh·∫≠n.")

                    st.markdown("**K·∫øt qu·∫£:**", unsafe_allow_html=True)
                    if selected_run.data.metrics:
                        metrics_display = {}
                        training_time = selected_run.data.metrics.get("training_time", "N/A")
                        metrics_display["Th·ªùi gian th·ª±c hi·ªán (gi√¢y)"] = f"{float(training_time):.2f}" if training_time != "N/A" else "N/A"
                        accuracy_val = selected_run.data.metrics.get("accuracy_val", "N/A")
                        metrics_display["ƒê·ªô ch√≠nh x√°c Validation"] = f"{float(accuracy_val)*100:.2f}%" if accuracy_val != "N/A" else "N/A"
                        accuracy_test = selected_run.data.metrics.get("accuracy_test", "N/A")
                        metrics_display["ƒê·ªô ch√≠nh x√°c Test"] = f"{float(accuracy_test)*100:.2f}%" if accuracy_test != "N/A" else "N/A"
                        st.json(metrics_display, expanded=True)
                    else:
                        st.write("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë∆∞·ª£c ghi nh·∫≠n.")

                    st.subheader("Truy c·∫≠p MLflow UI")
                    mlflow_url = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
                    if st.button("M·ªü MLflow UI tr√™n Dagshub"):
                        st.markdown(f'[Click ƒë·ªÉ m·ªü MLflow UI]({mlflow_url})', unsafe_allow_html=True)

                    status_text.text("ƒê√£ t·∫£i 100%")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi MLflow ho·∫∑c kh√¥ng t√¨m th·∫•y Experiment ID {EXPERIMENT_ID}: {e}. Vui l√≤ng ki·ªÉm tra MLFLOW_TRACKING_URI v√† th√¥ng tin x√°c th·ª±c.")
            progress_bar.progress(0)
            status_text.empty()

if __name__ == "__main__":
    run_mnist_neural_network_app()