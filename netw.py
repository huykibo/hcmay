import os
import mlflow
import streamlit as st
import openml
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.neural_network import MLPClassifier
from sklearn.decomposition import PCA
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time

def run_mnist_neural_network_app():
    # Thi·∫øt l·∫≠p MLflow
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(st.secrets["mlflow"]["MLFLOW_TRACKING_URI"])
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets. Vui l√≤ng c·∫•u h√¨nh secrets.")
        st.stop()

    st.title("Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Neural Network")

    # CSS cho tooltip v√† MathJax
    st.markdown("""
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-MML-AM_CHTML" async></script>
        <style>
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: pointer;
                color: #1f77b4;
                font-weight: bold;
                margin-left: 5px;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 400px;
                background-color: #f9f9f9;
                color: #333;
                text-align: left;
                border-radius: 6px;
                padding: 10px;
                position: absolute;
                z-index: 1;
                right: 105%;
                top: 50%;
                transform: translateY(-50%);
                opacity: 0;
                transition: opacity 0.3s;
                border: 1px solid #ccc;
                font-size: 0.9em;
                line-height: 1.4;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
        </style>
    """, unsafe_allow_html=True)

    # C√°c tab
    tabs = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "X·ª≠ l√Ω d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", "Hu·∫•n luy·ªán/ƒê√°nh gi√°", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"])
    tab_info, tab_load, tab_preprocess, tab_split, tab_train_eval, tab_demo, tab_log_info = tabs

    # Tab 1: Th√¥ng tin
    with tab_info:
        st.header("Gi·ªõi thi·ªáu v·ªÅ ·ª®ng d·ª•ng v√† M·∫°ng Neural Network")
        st.markdown("""
        Ch√†o b·∫°n! ƒê√¢y l√† ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ t·∫≠p d·ªØ li·ªáu **MNIST** b·∫±ng **M·∫°ng n∆°-ron nh√¢n t·∫°o (Neural Network)**. H√£y kh√°m ph√° c√°c t√≠nh nƒÉng v√† c√°ch ho·∫°t ƒë·ªông c·ªßa n√≥ nh√©!
        """, unsafe_allow_html=True)

        st.subheader("Ch·ªçn th√¥ng tin ƒë·ªÉ xem")
        info_option = st.selectbox(
            "",
            [
                "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?",
                "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a",
                "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o",
                "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)"
            ],
            label_visibility="collapsed",
            help="Ch·ªçn ƒë·ªÉ xem chi ti·∫øt v·ªÅ ·ª©ng d·ª•ng, d·ªØ li·ªáu, ho·∫∑c m√¥ h√¨nh."
        )

        if info_option == "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 91, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%...")
                    time.sleep(0.05)
                st.subheader("üìò 1. ·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?")
                st.markdown("""
                ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay d·ª±a tr√™n t·∫≠p d·ªØ li·ªáu **MNIST**, s·ª≠ d·ª•ng **M·∫°ng n∆°-ron nh√¢n t·∫°o (Neural Network)**.  
                - **MNIST**: T·∫≠p d·ªØ li·ªáu g·ªìm $70,000$ ·∫£nh ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$, m·ªói ·∫£nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel (t·ªïng c·ªông $784$ ƒë·∫∑c tr∆∞ng).  
                - **M·ª•c ti√™u**:  
                  - X√¢y d·ª±ng v√† hu·∫•n luy·ªán m·ªôt m·∫°ng n∆°-ron ƒë·ªÉ nh·∫≠n di·ªán ch√≠nh x√°c c√°c ch·ªØ s·ªë.  
                  - Cung c·∫•p c√¥ng c·ª• tr·ª±c quan ƒë·ªÉ h·ªçc t·∫≠p v√† ƒë√°nh gi√° hi·ªáu qu·∫£ c·ªßa thu·∫≠t to√°n.  
                """, unsafe_allow_html=True)
                progress_bar.progress(100)
                status_text.text("ƒê√£ t·∫£i 100%!")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 91, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%...")
                    time.sleep(0.05)
                st.subheader("üìò 2. T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a")
                st.markdown("""
                **MNIST** l√† t·∫≠p d·ªØ li·ªáu chu·∫©n trong h·ªçc m√°y, ƒë∆∞·ª£c t·∫°o b·ªüi Yann LeCun v√† c√°c c·ªông s·ª±.  
                - **ƒê·∫∑c ƒëi·ªÉm**:  
                  - G·ªìm c√°c ·∫£nh ch·ªØ s·ªë vi·∫øt tay t·ª´ h·ªçc sinh trung h·ªçc v√† nh√¢n vi√™n ƒëi·ªÅu tra d√¢n s·ªë M·ªπ.  
                  - Chu·∫©n h√≥a th√†nh k√≠ch th∆∞·ªõc $28 \\times 28$ pixel, thang ƒë·ªô x√°m (gi√° tr·ªã t·ª´ $0$ ƒë·∫øn $255$).  
                - **√ù nghƒ©a**:  
                  - L√† b√†i to√°n c∆° b·∫£n ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng ph√¢n lo·∫°i c·ªßa c√°c m√¥ h√¨nh h·ªçc m√°y.  
                  - Ph√π h·ª£p cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† nghi√™n c·ª©u m√¥ h√¨nh ph·ª©c t·∫°p.  
                """, unsafe_allow_html=True)
                st.subheader("üì∑ Minh h·ªça d·ªØ li·ªáu MNIST")
                try:
                    mnist_image = Image.open("mnist.png")
                    st.image(mnist_image, caption="·∫¢nh minh h·ªça $10$ ch·ªØ s·ªë t·ª´ $0$ ƒë·∫øn $9$ trong MNIST", width=800)
                except FileNotFoundError:
                    st.error("Kh√¥ng t√¨m th·∫•y file `mnist.png`. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
                progress_bar.progress(100)
                status_text.text("ƒê√£ t·∫£i 100%!")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 91, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%...")
                    time.sleep(0.05)
                st.subheader("üìä 3. Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o")
                st.markdown("""
                **Neural Network** l√† m√¥ h√¨nh h·ªçc m√°y m√¥ ph·ªèng m·∫°ng n∆°-ron sinh h·ªçc trong n√£o ng∆∞·ªùi.  
                - **C·∫•u tr√∫c**: G·ªìm c√°c **l·ªõp (layers)**:  
                  - **L·ªõp ƒë·∫ßu v√†o**: Nh·∫≠n d·ªØ li·ªáu ($784$ pixel t·ª´ ·∫£nh MNIST).  
                  - **L·ªõp ·∫©n**: X·ª≠ l√Ω th√¥ng tin b·∫±ng c√°ch k·∫øt h·ª£p tuy·∫øn t√≠nh v√† h√†m k√≠ch ho·∫°t phi tuy·∫øn.  
                  - **L·ªõp ƒë·∫ßu ra**: D·ª± ƒëo√°n nh√£n ($0$-$9$).  
                """, unsafe_allow_html=True)
                st.subheader("üõ†Ô∏è C√°c b∆∞·ªõc th·ª±c hi·ªán")
                st.markdown("""
                1. **Kh·ªüi t·∫°o m√¥ h√¨nh**: X√°c ƒë·ªãnh c·∫•u tr√∫c m·∫°ng v√† kh·ªüi t·∫°o **tr·ªçng s·ªë** $W$, **bias** $b$.  
                2. **Lan truy·ªÅn thu·∫≠n**: T√≠nh $\\hat{Y}$ t·ª´ $X$ qua c√°c l·ªõp:  
                   $$ Z^{(l)} = A^{(l-1)} \\cdot W^{(l)} + b^{(l)}, \\quad A^{(l)} = \\sigma(Z^{(l)}) $$  
                3. **H√†m m·∫•t m√°t**: Cross-Entropy:  
                   $$ L = -\\frac{1}{N} \\sum_{i=1}^{N} \\sum_{j=0}^{9} y_{ij} \\cdot \\log(\\hat{y}_{ij}) $$  
                4. **Lan truy·ªÅn ng∆∞·ª£c**: T√≠nh ƒë·∫°o h√†m ƒë·ªÉ c·∫≠p nh·∫≠t $W$ v√† $b$.  
                5. **C·∫≠p nh·∫≠t tham s·ªë**: Gradient Descent:  
                   $$ W^{(l)} = W^{(l)} - \\eta \\cdot \\frac{\\partial L}{\\partial W^{(l)}} $$  
                """, unsafe_allow_html=True)
                progress_bar.progress(100)
                status_text.text("ƒê√£ t·∫£i 100%!")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        elif info_option == "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 91, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%...")
                    time.sleep(0.05)
                st.subheader("üìò 4. C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)")
                st.markdown("""
                $$ \\text{Accuracy} = \\frac{\\text{S·ªë m·∫´u d·ª± ƒëo√°n ƒë√∫ng}}{\\text{T·ªïng s·ªë m·∫´u}} $$  
                - **V√≠ d·ª•**: D·ª± ƒëo√°n ƒë√∫ng $92/100$ ·∫£nh ‚Üí $\\text{Accuracy} = 92\\%$.  
                """, unsafe_allow_html=True)
                progress_bar.progress(100)
                status_text.text("ƒê√£ t·∫£i 100%!")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

    # Tab 2: T·∫£i d·ªØ li·ªáu
    with tab_load:
        st.header("T·∫£i D·ªØ li·ªáu")
        
        if st.button("T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML"):
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ OpenML..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 91, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%...")
                    time.sleep(0.1)
                try:
                    mnist = openml.datasets.get_dataset(554)
                    X, y, _, _ = mnist.get_data(target=mnist.default_target_attribute)
                    st.session_state['full_data'] = (X, y)
                    with mlflow.start_run(run_name="Data_Load"):
                        mlflow.log_param("total_samples", X.shape[0])
                    st.success("T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                    st.write("K√≠ch th∆∞·ªõc d·ªØ li·ªáu g·ªëc:", X.shape)
                    progress_bar.progress(100)
                    status_text.text("ƒê√£ t·∫£i 100%!")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")
                    progress_bar.progress(0)
                    status_text.empty()

        if 'full_data' in st.session_state:
            X_full, y_full = st.session_state['full_data']
            num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", 
                                    min_value=10, max_value=70000, value=min(1000, len(X_full)), step=1)
            if st.button("Ch·ªët s·ªë l∆∞·ª£ng m·∫´u"):
                with st.spinner(f"ƒêang l·∫•y {num_samples} m·∫´u..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 91, 10):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang x·ª≠ l√Ω {i}%...")
                        time.sleep(0.05)
                    indices = np.random.choice(len(X_full), size=num_samples, replace=False)
                    X_sampled = X_full.iloc[indices]
                    y_sampled = y_full.iloc[indices]
                    st.session_state['data'] = (X_sampled, y_sampled)
                    with mlflow.start_run(run_name="Data_Sample"):
                        mlflow.log_param("num_samples", num_samples)
                    st.success(f"ƒê√£ ch·ªët {num_samples} m·∫´u!")
                    progress_bar.progress(100)
                    status_text.text("ƒê√£ x·ª≠ l√Ω 100%!")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

    # Tab 3: X·ª≠ l√Ω d·ªØ li·ªáu
    with tab_preprocess:
        st.header("X·ª≠ l√≠ D·ªØ li·ªáu")
        
        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† ch·ªët s·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc.")
        else:
            X, y = st.session_state['data']
            if "data_original" not in st.session_state:
                st.session_state["data_original"] = (X.copy(), y.copy())

            st.subheader("D·ªØ li·ªáu G·ªëc")
            fig, axes = plt.subplots(2, 5, figsize=(10, 4))
            for i, ax in enumerate(axes.flat):
                ax.imshow(X.iloc[i].values.reshape(28, 28), cmap='gray')
                ax.set_title(f"Label: {y.iloc[i]}")
                ax.axis("off")
            st.pyplot(fig)

            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button("Normalization", key="normalize_btn"):
                    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        for i in range(0, 91, 10):
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang x·ª≠ l√Ω {i}%...")
                            time.sleep(0.05)
                        X_norm = X / 255.0
                        st.session_state["data_processed"] = (X_norm, y)
                        st.success("ƒê√£ chu·∫©n ho√° d·ªØ li·ªáu!")
                        progress_bar.progress(100)
                        status_text.text("ƒê√£ x·ª≠ l√Ω 100%!")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()
                        st.rerun()
            with col2:
                st.markdown("""
                    <div class="tooltip">
                        ?
                        <span class="tooltiptext">
                            ƒê∆∞a d·ªØ li·ªáu v·ªÅ kho·∫£ng [0, 1] b·∫±ng c√°ch chia cho 255.<br>
                            C√¥ng d·ª•ng: ƒê·∫£m b·∫£o thang ƒëo ƒë·ªìng nh·∫•t, h·ªØu √≠ch cho Neural Network.
                        </span>
                    </div>
                """, unsafe_allow_html=True)

            if "data_processed" in st.session_state:
                X_processed, y_processed = st.session_state["data_processed"]
                st.subheader("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
                fig, axes = plt.subplots(2, 5, figsize=(10, 4))
                for i, ax in enumerate(axes.flat):
                    ax.imshow(X_processed.iloc[i].values.reshape(28, 28), cmap='gray')
                    ax.set_title(f"Label: {y_processed.iloc[i]}")
                    ax.axis("off")
                st.pyplot(fig)

    # Tab 4: Chia d·ªØ li·ªáu
    with tab_split:
        st.header("Chia T·∫≠p D·ªØ li·ªáu")
        
        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            data_source = st.session_state.get('data_processed', st.session_state['data'])
            X, y = data_source
            total_samples = len(X)
            st.write(f"T·ªïng s·ªë m·∫´u: {total_samples}")

            test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20)
            valid_pct = st.slider("T·ª∑ l·ªá Validation (%)", 0, 50, 20)

            test_size = test_pct / 100
            X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
            valid_size = (valid_pct / 100) / (1 - test_size) if test_size < 1 else 0
            X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=valid_size, random_state=42)

            st.write(f"Train: {len(X_train)}, Validation: {len(X_valid)}, Test: {len(X_test)}")
            if st.button("X√°c nh·∫≠n", key="confirm_split_button"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in range(0, 91, 10):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang x·ª≠ l√Ω {i}%...")
                        time.sleep(0.05)
                    st.session_state['split_data'] = {
                        "X_train": X_train, "y_train": y_train,
                        "X_valid": X_valid, "y_valid": y_valid,
                        "X_test": X_test, "y_test": y_test
                    }
                    st.success("ƒê√£ chia d·ªØ li·ªáu!")
                    progress_bar.progress(100)
                    status_text.text("ƒê√£ x·ª≠ l√Ω 100%!")
                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

    # Tab 5: Hu·∫•n luy·ªán/ƒê√°nh gi√°
    with tab_train_eval:
        st.header("Hu·∫•n luy·ªán v√† ƒê√°nh gi√°")
        
        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            X_train = st.session_state['split_data']["X_train"]
            num_samples = len(X_train)
            st.write(f"S·ªë m·∫´u hu·∫•n luy·ªán: {num_samples}")

            st.subheader("‚öôÔ∏è C√†i ƒë·∫∑t tham s·ªë m√¥ h√¨nh")
            params = {}
            if num_samples < 1000:
                params["hidden_size"] = 50
                params["learning_rate"] = 0.01
                params["max_iter"] = 100
            elif 1000 <= num_samples <= 5000:
                params["hidden_size"] = 100
                params["learning_rate"] = 0.001
                params["max_iter"] = 200
            else:
                params["hidden_size"] = 200
                params["learning_rate"] = 0.0005
                params["max_iter"] = 300

            params["hidden_size"] = st.number_input("S·ªë n∆°-ron l·ªõp ·∫©n", min_value=10, max_value=500, value=params["hidden_size"])
            params["learning_rate"] = st.selectbox("T·ªëc ƒë·ªô h·ªçc", [0.01, 0.001, 0.0005, 0.0001], index=[0.01, 0.001, 0.0005, 0.0001].index(params["learning_rate"]))
            params["max_iter"] = st.number_input("S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa", min_value=50, max_value=500, value=params["max_iter"])

            if st.button("Th·ª±c hi·ªán Hu·∫•n luy·ªán", key="train_button"):
                with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    start_time = time.time()
                    for i in range(0, 91, 10):
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang hu·∫•n luy·ªán {i}%...")
                        time.sleep(0.1)

                    X_train = st.session_state['split_data']["X_train"]
                    y_train = st.session_state['split_data']["y_train"]
                    X_valid = st.session_state['split_data']["X_valid"]
                    y_valid = st.session_state['split_data']["y_valid"]
                    X_test = st.session_state['split_data']["X_test"]
                    y_test = st.session_state['split_data']["y_test"]

                    pipeline = Pipeline([
                        ('pca', PCA(n_components=50)),
                        ('classifier', MLPClassifier(hidden_layer_sizes=(params["hidden_size"],), 
                                                     max_iter=params["max_iter"], 
                                                     learning_rate_init=params["learning_rate"],
                                                     solver='lbfgs'))
                    ])
                    pipeline.fit(X_train, y_train)

                    run_name = f"NeuralNetwork_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    with mlflow.start_run(run_name=run_name) as run:
                        mlflow.log_param("hidden_size", params["hidden_size"])
                        mlflow.log_param("learning_rate", params["learning_rate"])
                        mlflow.log_param("max_iter", params["max_iter"])

                        y_valid_pred = pipeline.predict(X_valid)
                        y_test_pred = pipeline.predict(X_test)
                        acc_valid = accuracy_score(y_valid, y_valid_pred)
                        acc_test = accuracy_score(y_test, y_test_pred)
                        cm_valid = confusion_matrix(y_valid, y_valid_pred)
                        cm_test = confusion_matrix(y_test, y_test_pred)

                        training_time = time.time() - start_time
                        mlflow.log_metric("accuracy_val", acc_valid)
                        mlflow.log_metric("accuracy_test", acc_test)
                        mlflow.log_metric("training_time_seconds", training_time)
                        mlflow.sklearn.log_model(pipeline, "model")

                        st.session_state['model'] = pipeline
                        st.session_state['training_results'] = {
                            'training_time': training_time,
                            'accuracy_val': acc_valid,
                            'accuracy_test': acc_test,
                            'cm_valid': cm_valid,
                            'cm_test': cm_test,
                            'run_name': run_name,
                            'run_id': run.info.run_id,
                            'params': params
                        }
                        st.session_state['new_run_added'] = True  # B√°o hi·ªáu c√≥ run m·ªõi

                    progress_bar.progress(100)
                    status_text.text("ƒê√£ hu·∫•n luy·ªán 100%!")
                    st.success(f"Hu·∫•n luy·ªán ho√†n t·∫•t! Th·ªùi gian: {training_time:.2f} gi√¢y")
                    st.write(f"ƒê·ªô ch√≠nh x√°c Validation: {acc_valid:.4f}")
                    st.write(f"ƒê·ªô ch√≠nh x√°c Test: {acc_test:.4f}")

                    st.subheader("üìà Ma tr·∫≠n nh·∫ßm l·∫´n")
                    fig, ax = plt.subplots()
                    sns.heatmap(cm_test, annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Confusion Matrix - Test")
                    st.pyplot(fig)

                    time.sleep(0.5)
                    status_text.empty()
                    progress_bar.empty()

    # Tab 6: Demo d·ª± ƒëo√°n
    with tab_demo:
        st.header("Demo D·ª± ƒëo√°n")
        
        if 'split_data' not in st.session_state or 'model' not in st.session_state:
            st.info("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")
        else:
            mode = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c:", ["D·ªØ li·ªáu Test", "Upload ·∫£nh", "V·∫Ω s·ªë"])

            def preprocess_input(data):
                return data / 255.0

            is_normalized = 'data_processed' in st.session_state

            if mode == "D·ªØ li·ªáu Test":
                X_test = st.session_state['split_data']["X_test"]
                y_test = st.session_state['split_data']["y_test"]
                idx = st.slider("Ch·ªçn m·∫´u Test", 0, len(X_test)-1, 0)
                if st.button("D·ª± ƒëo√°n", key="predict_test_button"):
                    with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        for i in range(0, 91, 10):
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang x·ª≠ l√Ω {i}%...")
                            time.sleep(0.05)
                        sample = X_test.iloc[idx].values.reshape(1, -1)
                        if not is_normalized:
                            sample = preprocess_input(sample)
                        pred = st.session_state['model'].predict(sample)[0]
                        true_label = y_test.iloc[idx]
                        st.success(f"D·ª± ƒëo√°n: {pred} | Th·ª±c t·∫ø: {true_label}")
                        fig, ax = plt.subplots()
                        ax.imshow(sample.reshape(28, 28), cmap='gray')
                        ax.axis('off')
                        st.pyplot(fig)
                        progress_bar.progress(100)
                        status_text.text("ƒê√£ x·ª≠ l√Ω 100%!")
                        time.sleep(0.5)
                        status_text.empty()
                        progress_bar.empty()

            elif mode == "Upload ·∫£nh":
                uploaded_images = st.file_uploader("Upload ·∫£nh (28x28, grayscale)", type=["png", "jpg"], accept_multiple_files=True)
                if uploaded_images:
                    for i, img_file in enumerate(uploaded_images):
                        if st.button(f"D·ª± ƒëo√°n ·∫£nh {i+1}", key=f"predict_upload_{i}"):
                            with st.spinner(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}..."):
                                progress_bar = st.progress(0)
                                status_text = st.empty()
                                for j in range(0, 91, 10):
                                    progress_bar.progress(j)
                                    status_text.text(f"ƒêang x·ª≠ l√Ω {j}%...")
                                    time.sleep(0.05)
                                img = Image.open(img_file).convert('L').resize((28, 28))
                                img_array = np.array(img).flatten().reshape(1, -1)
                                if not is_normalized:
                                    img_array = preprocess_input(img_array)
                                pred = st.session_state['model'].predict(img_array)[0]
                                st.success(f"D·ª± ƒëo√°n ·∫£nh {i+1}: {pred}")
                                st.image(img, caption=f"·∫¢nh {i+1}", use_container_width=True)
                                progress_bar.progress(100)
                                status_text.text("ƒê√£ x·ª≠ l√Ω 100%!")
                                time.sleep(0.5)
                                status_text.empty()
                                progress_bar.empty()

            elif mode == "V·∫Ω s·ªë":
                st.write("V·∫Ω s·ªë t·ª´ 0-9 (28x28 pixel):")
                canvas_result = st_canvas(
                    fill_color="black", stroke_width=20, stroke_color="white",
                    background_color="black", width=280, height=280, drawing_mode="freedraw", key="canvas"
                )
                if st.button("D·ª± ƒëo√°n", key="predict_draw_button"):
                    if canvas_result.image_data is not None:
                        with st.spinner("ƒêang x·ª≠ l√Ω..."):
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            for i in range(0, 91, 10):
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang x·ª≠ l√Ω {i}%...")
                                time.sleep(0.05)
                            img = Image.fromarray((canvas_result.image_data * 255).astype(np.uint8)).convert('L').resize((28, 28))
                            img_array = np.array(img).flatten().reshape(1, -1)
                            if not is_normalized:
                                img_array = preprocess_input(img_array)
                            pred = st.session_state['model'].predict(img_array)[0]
                            st.success(f"D·ª± ƒëo√°n: {pred}")
                            progress_bar.progress(100)
                            status_text.text("ƒê√£ x·ª≠ l√Ω 100%!")
                            time.sleep(0.5)
                            status_text.empty()
                            progress_bar.empty()
                    else:
                        st.warning("Vui l√≤ng v·∫Ω tr∆∞·ªõc!")

    # Tab 7: Th√¥ng tin hu·∫•n luy·ªán
    with tab_log_info:
        st.header("Theo d√µi K·∫øt qu·∫£")
        
        st.markdown("""
        Tab n√†y cho ph√©p b·∫°n xem danh s√°ch c√°c l·∫ßn hu·∫•n luy·ªán ƒë√£ th·ª±c hi·ªán t·ª´ Experiment ID 5. Ch·ªçn m·ªôt l·∫ßn ch·∫°y ƒë·ªÉ xem chi ti·∫øt, ƒë·ªïi t√™n ho·∫∑c x√≥a.
        """, unsafe_allow_html=True)

        try:
            with st.spinner("ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in range(0, 91, 10):
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%...")
                    time.sleep(0.05)
                client = MlflowClient()
                experiment_id = "5"
                runs = client.search_runs(
                    experiment_ids=[experiment_id],
                    order_by=["attributes.start_time DESC"]
                )

                if not runs:
                    st.info("Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o ƒë∆∞·ª£c ghi nh·∫≠n trong Experiment ID 5.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    run_names = list(run_options.values())
                    run_ids = list(run_options.keys())

                    # Ch·ªçn run m·ªõi nh·∫•t n·∫øu c√≥ run m·ªõi t·ª´ Tab 5
                    if 'new_run_added' in st.session_state and st.session_state['new_run_added']:
                        default_index = 0
                        st.session_state['new_run_added'] = False
                    else:
                        default_index = 0 if 'selected_run_name' not in st.session_state else run_names.index(st.session_state['selected_run_name'])

                    st.subheader("Danh s√°ch Run")
                    selected_run_name = st.selectbox(
                        "Ch·ªçn run:",
                        options=run_names,
                        index=default_index,
                        key="main_select",
                        help="Ch·ªçn m·ªôt l·∫ßn ch·∫°y ƒë·ªÉ xem chi ti·∫øt, ƒë·ªïi t√™n ho·∫∑c x√≥a."
                    )
                    st.session_state['selected_run_name'] = selected_run_name
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input(
                        "Nh·∫≠p t√™n m·ªõi:",
                        value=selected_run_name,
                        key="rename_input"
                    )
                    if st.button("C·∫≠p nh·∫≠t t√™n", key="rename_button"):
                        with st.spinner("ƒêang c·∫≠p nh·∫≠t t√™n..."):
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            for i in range(0, 91, 10):
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang x·ª≠ l√Ω {i}%...")
                                time.sleep(0.05)
                            if new_run_name.strip() and new_run_name.strip() != selected_run_name:
                                client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                                if 'training_results' in st.session_state and st.session_state['training_results']['run_id'] == selected_run_id:
                                    st.session_state['training_results']['run_name'] = new_run_name.strip()
                                st.session_state['selected_run_name'] = new_run_name.strip()
                                st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                                st.rerun()
                            else:
                                st.warning("Vui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá ho·∫∑c kh√°c v·ªõi t√™n hi·ªán t·∫°i.")

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y", key="delete_button"):
                        with st.spinner("ƒêang x√≥a l·∫ßn ch·∫°y..."):
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            for i in range(0, 91, 10):
                                progress_bar.progress(i)
                                status_text.text(f"ƒêang x·ª≠ l√Ω {i}%...")
                                time.sleep(0.05)
                            client.delete_run(selected_run_id)
                            if 'training_results' in st.session_state and st.session_state['training_results']['run_id'] == selected_run_id:
                                del st.session_state['training_results']
                            st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                            if st.session_state['selected_run_name'] == selected_run_name:
                                st.session_state['selected_run_name'] = run_names[0] if run_names else None
                            st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt c·ªßa Run")
                    st.write(f"**T√™n l·∫ßn ch·∫°y:** {selected_run_name}")
                    st.write(f"**ID l·∫ßn ch·∫°y:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")
                    st.markdown("**Tham s·ªë:**", unsafe_allow_html=True)
                    st.json(selected_run.data.params)
                    st.markdown("**K·∫øt qu·∫£:**", unsafe_allow_html=True)
                    metrics_display = {
                        "Th·ªùi gian th·ª±c hi·ªán (gi√¢y)": f"{float(selected_run.data.metrics.get('training_time_seconds', 0)):.2f}",
                        "ƒê·ªô ch√≠nh x√°c Validation": f"{float(selected_run.data.metrics.get('accuracy_val', 0))*100:.2f}%",
                        "ƒê·ªô ch√≠nh x√°c Test": f"{float(selected_run.data.metrics.get('accuracy_test', 0))*100:.2f}%"
                    }
                    st.json(metrics_display)

                progress_bar.progress(100)
                status_text.text("ƒê√£ t·∫£i 100%!")
                time.sleep(0.5)
                status_text.empty()
                progress_bar.empty()

        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi MLflow ho·∫∑c kh√¥ng t√¨m th·∫•y Experiment ID 5: {e}")

if __name__ == "__main__":
    run_mnist_neural_network_app()