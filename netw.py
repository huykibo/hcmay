import os
import mlflow
import streamlit as st
import openml
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.neural_network import MLPClassifier
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from mlflow.tracking import MlflowClient
from streamlit_drawable_canvas import st_canvas
from datetime import datetime
import time
import requests

# H√†m t·∫£i d·ªØ li·ªáu MNIST
def fetch_mnist_data():
    mnist = openml.datasets.get_dataset(554)
    X, y, _, _ = mnist.get_data(target=mnist.default_target_attribute)
    return X, y

# H√†m ki·ªÉm tra v√† chu·∫©n h√≥a d·ªØ li·ªáu pixel v·ªÅ [0, 255] (d√πng cho c√°c tab kh√°c)
def validate_and_fix_pixels(X, name="d·ªØ li·ªáu"):
    invalid_mask = (X < 0) | (X > 255)
    if np.any(invalid_mask):
        st.warning(f"Ph√°t hi·ªán gi√° tr·ªã pixel kh√¥ng h·ª£p l·ªá trong {name} (ngo√†i [0, 255]). ƒêang chu·∫©n h√≥a...")
        X_fixed = np.clip(X, 0, 255)
        return X_fixed, True
    return X, False

def run_mnist_neural_network_app():
    # Thi·∫øt l·∫≠p MLflow
    mlflow_tracking_uri = "https://dagshub.com/huykibo/streamlit_mlflow.mlflow"
    try:
        os.environ["MLFLOW_TRACKING_USERNAME"] = st.secrets["mlflow"]["MLFLOW_TRACKING_USERNAME"]
        os.environ["MLFLOW_TRACKING_PASSWORD"] = st.secrets["mlflow"]["MLFLOW_TRACKING_PASSWORD"]
        mlflow.set_tracking_uri(mlflow_tracking_uri)
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a {e} trong st.secrets.")
        st.stop()

    try:
        response = requests.get(mlflow_tracking_uri, timeout=5)
        if response.status_code != 200:
            st.error(f"K·∫øt n·ªëi MLflow th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}.")
            st.stop()
    except requests.exceptions.RequestException as e:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi MLflow: {e}.")
        st.stop()

    EXPERIMENT_ID = "5"

    try:
        client = MlflowClient()
        experiment = client.get_experiment(EXPERIMENT_ID)
        if experiment is None:
            st.error(f"Experiment ID {EXPERIMENT_ID} kh√¥ng t·ªìn t·∫°i.")
            st.stop()
    except Exception as e:
        st.error(f"L·ªói truy xu·∫•t Experiment ID {EXPERIMENT_ID}: {e}.")
        st.stop()

    st.title("Ph√¢n lo·∫°i Ch·ªØ s·ªë MNIST v·ªõi Neural Network")

    st.markdown("""
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-MML-AM_CHTML" async></script>
        <style>
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: pointer;
                color: #1f77b4;
                font-weight: bold;
                margin-left: 5px;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 400px;
                background-color: #f9f9f9;
                color: #333;
                text-align: left;
                border-radius: 6px;
                padding: 10px;
                position: absolute;
                z-index: 1;
                right: 105%;
                top: 50%;
                transform: translateY(-50%);
                opacity: 0;
                transition: opacity 0.3s;
                border: 1px solid #ccc;
                font-size: 0.9em;
                line-height: 1.4;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
        </style>
    """, unsafe_allow_html=True)

    tabs = st.tabs(["Th√¥ng tin", "T·∫£i d·ªØ li·ªáu", "X·ª≠ l√Ω d·ªØ li·ªáu", "Chia d·ªØ li·ªáu", "Hu·∫•n luy·ªán/ƒê√°nh gi√°", "Demo d·ª± ƒëo√°n", "Th√¥ng tin hu·∫•n luy·ªán"])
    tab_info, tab_load, tab_preprocess, tab_split, tab_train_eval, tab_demo, tab_log_info = tabs

    with tab_info:
        st.header("Gi·ªõi thi·ªáu v·ªÅ ·ª®ng d·ª•ng v√† M·∫°ng Neural Network")
        st.markdown("""
        ƒê√¢y l√† ·ª©ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ **MNIST** b·∫±ng **Neural Network**.
        """, unsafe_allow_html=True)

        st.subheader("Ch·ªçn th√¥ng tin ƒë·ªÉ xem")
        info_option = st.selectbox("", ["·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?", "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a", 
                                        "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o", "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)"],
                                   label_visibility="collapsed")
        
        if info_option == "·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?":
            with st.spinner("ƒêang t·∫£i th√¥ng tin..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 40, 60, 80, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                st.subheader("üìò 1. ·ª®ng d·ª•ng n√†y l√† g√¨ v√† m·ª•c ti√™u c·ªßa n√≥?")
                st.markdown("""
                ·ª®ng d·ª•ng ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay t·ª´ **MNIST** b·∫±ng **Neural Network**.  
                - **MNIST**: $70,000$ ·∫£nh ch·ªØ s·ªë (0-9), m·ªói ·∫£nh $28 \\times 28$ pixel ($784$ ƒë·∫∑c tr∆∞ng).  
                - **M·ª•c ti√™u**: Nh·∫≠n di·ªán ch√≠nh x√°c ch·ªØ s·ªë v√† cung c·∫•p c√¥ng c·ª• h·ªçc t·∫≠p tr·ª±c quan.  
                """, unsafe_allow_html=True)
                status_text.empty()
                progress_bar.empty()
        
        elif info_option == "T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a":
            st.subheader("üìä 2. T·∫≠p d·ªØ li·ªáu MNIST: ƒê·∫∑c ƒëi·ªÉm v√† √Ω nghƒ©a")
            st.markdown("""
            - **Ngu·ªìn g·ªëc**: MNIST (Modified National Institute of Standards and Technology) l√† t·∫≠p d·ªØ li·ªáu chu·∫©n trong h·ªçc m√°y.  
            - **C·∫•u tr√∫c**: $60,000$ m·∫´u hu·∫•n luy·ªán + $10,000$ m·∫´u ki·ªÉm tra, m·ªói m·∫´u l√† ·∫£nh thang ƒë·ªô x√°m $28 \\times 28$.  
            - **√ù nghƒ©a**: ƒê∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i ƒë·ªÉ ki·ªÉm tra hi·ªáu su·∫•t c√°c thu·∫≠t to√°n ph√¢n lo·∫°i h√¨nh ·∫£nh.  
            """, unsafe_allow_html=True)
        
        elif info_option == "Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o":
            st.subheader("üß† 3. Neural Network ‚Äì M·∫°ng n∆°-ron nh√¢n t·∫°o")
            st.markdown("""
            - **Kh√°i ni·ªám**: M√¥ h√¨nh h·ªçc m√°y m√¥ ph·ªèng n√£o ng∆∞·ªùi, g·ªìm c√°c l·ªõp n∆°-ron (input, hidden, output).  
            - **·ª®ng d·ª•ng trong MNIST**: Nh·∫≠n di·ªán ch·ªØ s·ªë qua c√°c l·ªõp ·∫©n x·ª≠ l√Ω ƒë·∫∑c tr∆∞ng pixel.  
            - **Tham s·ªë ch√≠nh**: S·ªë l·ªõp ·∫©n, s·ªë n∆°-ron, t·ªëc ƒë·ªô h·ªçc, h√†m k√≠ch ho·∫°t (ReLU, sigmoid,...).  
            """, unsafe_allow_html=True)
        
        elif info_option == "C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)":
            st.subheader("üìà 4. C√¥ng th·ª©c ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c (Accuracy)")
            st.markdown("""
            ƒê·ªô ch√≠nh x√°c ƒë∆∞·ª£c t√≠nh b·∫±ng:  
            $$ \\text{Accuracy} = \\frac{\\text{S·ªë m·∫´u d·ª± ƒëo√°n ƒë√∫ng}}{\\text{T·ªïng s·ªë m·∫´u}} \\times 100\\% $$  
            - **√ù nghƒ©a**: ƒêo l∆∞·ªùng t·ª∑ l·ªá d·ª± ƒëo√°n ch√≠nh x√°c c·ªßa m√¥ h√¨nh tr√™n t·∫≠p ki·ªÉm tra ho·∫∑c validation.  
            """, unsafe_allow_html=True)

    with tab_load:
        st.header("T·∫£i D·ªØ li·ªáu")

        if st.button("T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML"):
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 40, 60, 80, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                try:
                    X, y = fetch_mnist_data()
                    st.session_state['full_data'] = (X, y)
                    with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Load"):
                        mlflow.log_param("total_samples", X.shape[0])
                    st.success("T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                    st.write("K√≠ch th∆∞·ªõc d·ªØ li·ªáu g·ªëc:", X.shape)
                    status_text.empty()
                    progress_bar.empty()
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")
                    status_text.empty()
                    progress_bar.empty()

        if 'full_data' in st.session_state:
            X_full, y_full = st.session_state['full_data']
            
            st.subheader("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu")
            st.markdown("""
            D·ª±a tr√™n b√†i to√°n ph√¢n lo·∫°i MNIST v·ªõi Neural Network, ƒë√¢y l√† c√°c g·ª£i √Ω:
            - **100 m·∫´u**: D√†nh cho th·ª≠ nghi·ªám nhanh, th·ªùi gian hu·∫•n luy·ªán r·∫•t ng·∫Øn (~v√†i gi√¢y), nh∆∞ng ƒë·ªô ch√≠nh x√°c th·∫•p.
            - **1,000 m·∫´u**: Ph√π h·ª£p ƒë·ªÉ ki·ªÉm tra m√¥ h√¨nh c∆° b·∫£n, th·ªùi gian hu·∫•n luy·ªán ng·∫Øn (~10-20 gi√¢y), ƒë·ªô ch√≠nh x√°c trung b√¨nh.
            - **10,000 m·∫´u**: C√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† hi·ªáu su·∫•t, th·ªùi gian hu·∫•n luy·ªán v·ª´a ph·∫£i (~1-2 ph√∫t), ƒë·ªô ch√≠nh x√°c kh√° t·ªët.
            - **50,000 m·∫´u**: D√†nh cho hu·∫•n luy·ªán chuy√™n s√¢u, th·ªùi gian l√¢u h∆°n (~5-10 ph√∫t), ƒë·ªô ch√≠nh x√°c cao.
            """)
            
            sample_options = {
                "100 m·∫´u (Th·ª≠ nghi·ªám nhanh)": 100,
                "1,000 m·∫´u (Ki·ªÉm tra c∆° b·∫£n)": 1000,
                "10,000 m·∫´u (C√¢n b·∫±ng hi·ªáu su·∫•t)": 10000,
                "50,000 m·∫´u (Hu·∫•n luy·ªán chuy√™n s√¢u)": 50000
            }
            selected_option = st.selectbox("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", list(sample_options.keys()))
            num_samples = sample_options[selected_option]

            if st.button("Ch·ªët s·ªë l∆∞·ª£ng m·∫´u"):
                with st.spinner(f"ƒêang l·∫•y {num_samples} m·∫´u..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in [20, 40, 60, 80, 100]:
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                        time.sleep(0.05)
                    indices = np.random.choice(len(X_full), size=num_samples, replace=False)
                    X_sampled = X_full.iloc[indices]
                    y_sampled = y_full.iloc[indices]
                    st.session_state['data'] = (X_sampled, y_sampled)
                    with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name="Data_Sample"):
                        mlflow.log_param("num_samples", num_samples)
                    st.success(f"ƒê√£ ch·ªët {num_samples} m·∫´u!")
                    status_text.empty()
                    progress_bar.empty()

    with tab_preprocess:
        st.header("X·ª≠ l√Ω D·ªØ li·ªáu")

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† ch·ªët s·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc.")
        else:
            X, y = st.session_state['data']
            if "data_original" not in st.session_state:
                st.session_state["data_original"] = (X.copy(), y.copy())

            st.subheader("D·ªØ li·ªáu G·ªëc")
            fig, axes = plt.subplots(2, 5, figsize=(10, 4))
            for i, ax in enumerate(axes.flat):
                ax.imshow(X.iloc[i].values.reshape(28, 28), cmap='gray')
                ax.set_title(f"Label: {y.iloc[i]}")
                ax.axis("off")
            st.pyplot(fig)

            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button("Normalization", key="normalize_btn"):
                    with st.spinner("ƒêang chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 1]..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        for i in [20, 40, 60, 80, 100]:
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                            time.sleep(0.05)
                        X_norm = X / 255.0
                        st.session_state["data_processed"] = (X_norm, y)
                        st.success("ƒê√£ chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ [0, 1]!")
                        status_text.empty()
                        progress_bar.empty()
                        st.rerun()
            with col2:
                st.markdown("""
                    <div class="tooltip">? (Norm)
                        <span class="tooltiptext">
                            ƒê∆∞a d·ªØ li·ªáu v·ªÅ [0, 1] b·∫±ng c√°ch chia cho 255.<br>
                            C√¥ng d·ª•ng: ƒê·∫£m b·∫£o thang ƒëo ƒë·ªìng nh·∫•t cho Neural Network.
                        </span>
                    </div>
                """, unsafe_allow_html=True)

            if "data_processed" in st.session_state:
                X_processed, y_processed = st.session_state["data_processed"]
                st.subheader("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
                fig, axes = plt.subplots(2, 5, figsize=(10, 4))
                for i, ax in enumerate(axes.flat):
                    ax.imshow(X_processed.iloc[i].values.reshape(28, 28), cmap='gray')
                    ax.set_title(f"Label: {y_processed.iloc[i]}")
                    ax.axis("off")
                st.pyplot(fig)

    with tab_split:
        st.header("Chia T·∫≠p D·ªØ li·ªáu")

        if 'data' not in st.session_state:
            st.info("Vui l√≤ng t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            data_source = st.session_state.get('data_processed', st.session_state['data'])
            X, y = data_source
            total_samples = len(X)
            st.write(f"T·ªïng s·ªë m·∫´u: {total_samples}")

            test_pct = st.slider("T·ª∑ l·ªá Test (%)", 0, 50, 20)
            valid_pct = st.slider("T·ª∑ l·ªá Validation (%)", 0, 50, 20)

            test_size = test_pct / 100
            X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
            valid_size = (valid_pct / 100) / (1 - test_size) if test_size < 1 else 0
            X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=valid_size, random_state=42)

            st.write(f"Train: {len(X_train)}, Validation: {len(X_valid)}, Test: {len(X_test)}")
            if st.button("X√°c nh·∫≠n", key="confirm_split_button"):
                with st.spinner("ƒêang chia d·ªØ li·ªáu..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    for i in [20, 40, 60, 80, 100]:
                        progress_bar.progress(i)
                        status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                        time.sleep(0.05)
                    st.session_state['split_data'] = {
                        "X_train": X_train, "y_train": y_train,
                        "X_valid": X_valid, "y_valid": y_valid,
                        "X_test": X_test, "y_test": y_test
                    }
                    st.success("ƒê√£ chia d·ªØ li·ªáu!")
                    status_text.empty()
                    progress_bar.empty()

    with tab_train_eval:
        st.header("Hu·∫•n luy·ªán v√† ƒê√°nh gi√° M√¥ h√¨nh")

        if 'split_data' not in st.session_state:
            st.info("Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc.")
        else:
            X_train = st.session_state['split_data']["X_train"]
            y_train = st.session_state['split_data']["y_train"]
            X_valid = st.session_state['split_data']["X_valid"]
            y_valid = st.session_state['split_data']["y_valid"]
            X_test = st.session_state['split_data']["X_test"]
            y_test = st.session_state['split_data']["y_test"]

            num_samples = len(X_train)
            st.write(f"**S·ªë m·∫´u hu·∫•n luy·ªán**: {num_samples}")

            # H√†m t·ªëi ∆∞u tham s·ªë
            def get_optimal_params(num_samples):
                if num_samples < 1000:
                    return {"hidden_layer_sizes": (16,), "learning_rate_init": 0.01, "max_iter": 30, 
                            "activation": "relu", "solver": "adam", "batch_size": 64}
                elif 1000 <= num_samples < 5000:
                    return {"hidden_layer_sizes": (32,), "learning_rate_init": 0.005, "max_iter": 50, 
                            "activation": "relu", "solver": "adam", "batch_size": 128}
                elif 5000 <= num_samples <= 20000:
                    return {"hidden_layer_sizes": (64, 32), "learning_rate_init": 0.001, "max_iter": 75, 
                            "activation": "relu", "solver": "adam", "batch_size": 256}
                else:
                    return {"hidden_layer_sizes": (128, 64), "learning_rate_init": 0.0005, "max_iter": 100, 
                            "activation": "relu", "solver": "adam", "batch_size": 512}

            if "optimal_params" not in st.session_state:
                st.session_state["optimal_params"] = get_optimal_params(num_samples)
            params = st.session_state.get("training_params", st.session_state["optimal_params"].copy())

            st.subheader("‚öôÔ∏è C·∫•u h√¨nh tham s·ªë m√¥ h√¨nh")
            st.markdown("""
            | S·ªë m·∫´u       | S·ªë l·ªõp ·∫©n | K√≠ch th∆∞·ªõc l·ªõp ·∫©n | T·ªëc ƒë·ªô h·ªçc | S·ªë l·∫ßn l·∫∑p | H√†m k√≠ch ho·∫°t | Tr√¨nh t·ªëi ∆∞u | K√≠ch th∆∞·ªõc batch |
            |--------------|-----------|-------------------|------------|------------|---------------|--------------|------------------|
            | <1000        | 1         | 16                | 0.01       | 30         | ReLU          | adam         | 64               |
            | 1000-5000    | 1         | 32                | 0.005      | 50         | ReLU          | adam         | 128              |
            | 5000-20000   | 2         | (64, 32)          | 0.001      | 75         | ReLU          | adam         | 256              |
            | >20000       | 2         | (128, 64)         | 0.0005     | 100        | ReLU          | adam         | 512              |
            """, unsafe_allow_html=True)

            st.info(f"Tham s·ªë t·ªëi ∆∞u cho {num_samples} m·∫´u: {st.session_state['optimal_params']}")

            col_param1, col_param2 = st.columns(2)
            with col_param1:
                with st.expander("C·∫•u tr√∫c m·∫°ng"):
                    num_hidden_layers = st.number_input("S·ªë l·ªõp ·∫©n", min_value=1, max_value=2, value=len(params["hidden_layer_sizes"]))
                    hidden_size = st.number_input("S·ªë n∆°-ron m·ªói l·ªõp", min_value=16, max_value=128, value=params["hidden_layer_sizes"][0])
                    params["hidden_layer_sizes"] = tuple([hidden_size] * num_hidden_layers)
                    params["activation"] = st.selectbox("H√†m k√≠ch ho·∫°t", ["relu", "sigmoid", "tanh"], 
                                                        index=["relu", "sigmoid", "tanh"].index(params["activation"]))
            with col_param2:
                with st.expander("T·ªëi ∆∞u h√≥a"):
                    params["learning_rate_init"] = st.selectbox("T·ªëc ƒë·ªô h·ªçc", [0.01, 0.005, 0.001, 0.0005], 
                                                                index=[0.01, 0.005, 0.001, 0.0005].index(params["learning_rate_init"]))
                    params["max_iter"] = st.number_input("S·ªë l·∫ßn l·∫∑p", min_value=10, max_value=100, value=params["max_iter"])
                    params["batch_size"] = st.number_input("K√≠ch th∆∞·ªõc batch", min_value=64, max_value=512, value=params["batch_size"])
                    params["solver"] = st.selectbox("Tr√¨nh t·ªëi ∆∞u", ["adam", "sgd", "lbfgs"], 
                                                    index=["adam", "sgd", "lbfgs"].index(params["solver"]))

            if st.button("üîÑ Kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u"):
                st.session_state["training_params"] = st.session_state["optimal_params"].copy()
                st.success("ƒê√£ kh√¥i ph·ª•c tham s·ªë t·ªëi ∆∞u!")
                st.rerun()

            st.session_state["training_params"] = params

            if st.button("üöÄ B·∫Øt ƒë·∫ßu Hu·∫•n luy·ªán", type="primary"):
                try:
                    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        start_time = time.time()

                        status_text.text("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu...")
                        progress_bar.progress(20)

                        model = MLPClassifier(**params, verbose=True)
                        status_text.text("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
                        for i in [40, 60, 80]:
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang hu·∫•n luy·ªán {i}%")
                            time.sleep(0.05)
                        model.fit(X_train, y_train)

                        status_text.text("ƒêang ƒë√°nh gi√° m√¥ h√¨nh...")
                        progress_bar.progress(90)
                        y_valid_pred = model.predict(X_valid)
                        y_test_pred = model.predict(X_test)
                        acc_valid = accuracy_score(y_valid, y_valid_pred)
                        acc_test = accuracy_score(y_test, y_test_pred)
                        cm_valid = confusion_matrix(y_valid, y_valid_pred)
                        cm_test = confusion_matrix(y_test, y_test_pred)

                        status_text.text("ƒêang l∆∞u k·∫øt qu·∫£...")
                        progress_bar.progress(100)
                        run_name = f"NeuralNetwork_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                        with mlflow.start_run(experiment_id=EXPERIMENT_ID, run_name=run_name) as run:
                            mlflow.log_params(params)
                            mlflow.log_metric("accuracy_val", acc_valid)
                            mlflow.log_metric("accuracy_test", acc_test)
                            mlflow.log_metric("training_time", time.time() - start_time)

                            st.session_state['model'] = model
                            st.session_state['training_results'] = {
                                'accuracy_val': acc_valid, 'accuracy_test': acc_test,
                                'cm_valid': cm_valid, 'cm_test': cm_test,
                                'run_name': run_name, 'run_id': run.info.run_id,
                                'params': params, 'training_time': time.time() - start_time
                            }

                        st.success(f"ƒê√£ hu·∫•n luy·ªán xong! Th·ªùi gian: {time.time() - start_time:.2f} gi√¢y")
                        status_text.empty()
                        progress_bar.empty()
                        st.rerun()

                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán: {e}")
                    status_text.empty()
                    progress_bar.empty()

            if 'training_results' in st.session_state:
                results = st.session_state['training_results']
                st.subheader("üìä K·∫øt qu·∫£ Hu·∫•n luy·ªán")
                col_result1, col_result2, col_result3 = st.columns(3)
                with col_result1:
                    st.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{results['training_time']:.2f} gi√¢y")
                with col_result2:
                    st.metric("ƒê·ªô ch√≠nh x√°c Validation", f"{results['accuracy_val']*100:.2f}%")
                with col_result3:
                    st.metric("ƒê·ªô ch√≠nh x√°c Test", f"{results['accuracy_test']*100:.2f}%")

                st.subheader("üìà Ma tr·∫≠n Nh·∫ßm l·∫´n")
                col_cm1, col_cm2 = st.columns(2)
                with col_cm1:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_valid'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Validation")
                    st.pyplot(fig)
                with col_cm2:
                    fig, ax = plt.subplots(figsize=(6, 5))
                    sns.heatmap(results['cm_test'], annot=True, fmt="d", cmap="Blues", ax=ax)
                    ax.set_title("Test")
                    st.pyplot(fig)
                
                st.subheader("‚ÑπÔ∏è Th√¥ng tin Chi ti·∫øt")
                with st.expander("Xem chi ti·∫øt", expanded=False):
                    st.markdown("**Th√¥ng tin l·∫ßn ch·∫°y:**")
                    st.write(f"- T√™n: {results['run_name']}")
                    st.write(f"- ID: {results['run_id']}")
                    st.write(f"- Th·ªùi gian hu·∫•n luy·ªán: {results['training_time']:.2f} gi√¢y")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Validation: {results['accuracy_val']*100:.2f}%")
                    st.write(f"- ƒê·ªô ch√≠nh x√°c Test: {results['accuracy_test']*100:.2f}%")
                    st.markdown("**Tham s·ªë ƒë√£ ch·ªçn:**")
                    st.json({
                        "S·ªë l·ªõp ·∫©n": len(results['params']['hidden_layer_sizes']),
                        "S·ªë n∆°-ron m·ªói l·ªõp": results['params']['hidden_layer_sizes'],
                        "T·ªëc ƒë·ªô h·ªçc": results['params']['learning_rate_init'],
                        "S·ªë l·∫ßn l·∫∑p": results['params']['max_iter'],
                        "K√≠ch th∆∞·ªõc batch": results['params']['batch_size'],
                        "H√†m k√≠ch ho·∫°t": results['params']['activation'],
                        "Tr√¨nh t·ªëi ∆∞u": results['params']['solver']
                    })

    with tab_demo:
        st.header("Demo D·ª± ƒëo√°n")

        if 'split_data' not in st.session_state or 'model' not in st.session_state:
            st.info("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")
        else:
            mode = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c:", ["D·ªØ li·ªáu Test", "Upload ·∫£nh", "V·∫Ω s·ªë"])
            progress_bar = st.progress(0)
            status_text = st.empty()

            def preprocess_input(data):
                return data / 255.0

            is_normalized = 'data_processed' in st.session_state

            if mode == "D·ªØ li·ªáu Test":
                X_test = st.session_state['split_data']["X_test"]
                y_test = st.session_state['split_data']["y_test"]
                idx = st.slider("Ch·ªçn m·∫´u Test", 0, len(X_test)-1, 0)
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.write("**·∫¢nh m·∫´u Test:**")
                    fig, ax = plt.subplots(figsize=(2, 2))
                    ax.imshow(X_test.iloc[idx].values.reshape(28, 28), cmap='gray')
                    ax.axis('off')
                    st.pyplot(fig)
                with col2:
                    st.write(f"**Nh√£n th·ª±c t·∫ø:** {y_test.iloc[idx]}")

                if st.button("D·ª± ƒëo√°n"):
                    with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                        for i in [20, 40, 60, 80, 100]:
                            progress_bar.progress(i)
                            status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                            time.sleep(0.05)
                        sample = X_test.iloc[idx].values.reshape(1, -1)
                        if not is_normalized:
                            sample = preprocess_input(sample)
                        model = st.session_state['model']
                        prediction = model.predict(sample)[0]
                        proba = model.predict_proba(sample)[0]
                        max_proba = np.max(proba) * 100
                        st.success(f"D·ª± ƒëo√°n: **{prediction}** | X√°c su·∫•t: **{max_proba:.2f}%** | Nh√£n th·ª±c t·∫ø: **{y_test.iloc[idx]}**")
                        status_text.empty()
                        progress_bar.empty()

            elif mode == "Upload ·∫£nh":
                uploaded_images = st.file_uploader("Upload ·∫£nh (28x28, thang ƒë·ªô x√°m)", type=["png", "jpg"], accept_multiple_files=True)
                if uploaded_images:
                    for i, uploaded_image in enumerate(uploaded_images):
                        try:
                            img = Image.open(uploaded_image).convert('L').resize((28, 28))
                            st.image(img, caption=f"·∫¢nh {i+1}", width=280)
                            img_array = np.array(img).flatten().reshape(1, -1)
                            img_array, fixed = validate_and_fix_pixels(img_array, f"·∫£nh upload {i+1}")
                            if fixed:
                                st.success(f"ƒê√£ chu·∫©n h√≥a ·∫£nh {i+1} v·ªÅ [0, 255]!")
                            if not is_normalized:
                                img_array = preprocess_input(img_array)
                            
                            if st.button(f"D·ª± ƒëo√°n ·∫£nh {i+1}", key=f"predict_upload_{i}"):
                                with st.spinner(f"ƒêang d·ª± ƒëo√°n ·∫£nh {i+1}..."):
                                    for j in [20, 40, 60, 80, 100]:
                                        progress_bar.progress(j)
                                        status_text.text(f"ƒêang x·ª≠ l√Ω {j}%")
                                        time.sleep(0.05)
                                    model = st.session_state['model']
                                    prediction = model.predict(img_array)[0]
                                    proba = model.predict_proba(img_array)[0]
                                    max_proba = np.max(proba) * 100
                                    st.success(f"D·ª± ƒëo√°n: **{prediction}** | X√°c su·∫•t: **{max_proba:.2f}%**")
                                    status_text.empty()
                                    progress_bar.empty()
                        except Exception as e:
                            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh {i+1}: {e}")

            elif mode == "V·∫Ω s·ªë":
                st.write("V·∫Ω ch·ªØ s·ªë t·ª´ 0-9:")
                canvas_result = st_canvas(fill_color="black", stroke_width=20, stroke_color="white", 
                                          background_color="black", width=280, height=280, drawing_mode="freedraw", key="canvas")
                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button("D·ª± ƒëo√°n s·ªë ƒë√£ v·∫Ω"):
                        if canvas_result.image_data is not None and np.any(canvas_result.image_data):
                            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                                for i in [20, 40, 60, 80, 100]:
                                    progress_bar.progress(i)
                                    status_text.text(f"ƒêang x·ª≠ l√Ω {i}%")
                                    time.sleep(0.05)
                                img = Image.fromarray((canvas_result.image_data * 255).astype(np.uint8)).convert('L').resize((28, 28))
                                img_array = np.array(img).flatten().reshape(1, -1)
                                img_array, fixed = validate_and_fix_pixels(img_array, "h√¨nh v·∫Ω")
                                if fixed:
                                    st.success("ƒê√£ chu·∫©n h√≥a h√¨nh v·∫Ω v·ªÅ [0, 255]!")
                                if not is_normalized:
                                    img_array = preprocess_input(img_array)
                                model = st.session_state['model']
                                prediction = model.predict(img_array)[0]
                                proba = model.predict_proba(img_array)[0]
                                max_proba = np.max(proba) * 100
                                st.success(f"D·ª± ƒëo√°n: **{prediction}** | X√°c su·∫•t: **{max_proba:.2f}%**")
                                st.image(img, caption="H√¨nh v·∫Ω c·ªßa b·∫°n")
                                status_text.empty()
                                progress_bar.empty()
                        else:
                            st.warning("Vui l√≤ng v·∫Ω tr∆∞·ªõc!")
                with col2:
                    if st.button("X√≥a Canvas"):
                        st.session_state['canvas_key'] = st.session_state.get('canvas_key', 0) + 1
                        st.rerun()

    with tab_log_info:
        st.header("Theo d√µi K·∫øt qu·∫£")
        try:
            with st.spinner("ƒêang t·∫£i th√¥ng tin hu·∫•n luy·ªán..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                for i in [20, 40, 60, 80, 100]:
                    progress_bar.progress(i)
                    status_text.text(f"ƒêang t·∫£i {i}%")
                    time.sleep(0.05)
                client = MlflowClient()
                runs = client.search_runs(experiment_ids=[EXPERIMENT_ID], order_by=["attributes.start_time DESC"])

                if not runs:
                    st.info(f"Ch∆∞a c√≥ l·∫ßn ch·∫°y n√†o trong Experiment ID {EXPERIMENT_ID}.")
                else:
                    run_options = {run.info.run_id: run.data.tags.get('mlflow.runName', f"Run_{run.info.run_id}") for run in runs}
                    selected_run_name = st.selectbox("Ch·ªçn run:", list(run_options.values()))
                    selected_run_id = [k for k, v in run_options.items() if v == selected_run_name][0]
                    selected_run = client.get_run(selected_run_id)

                    st.subheader("ƒê·ªïi t√™n Run")
                    new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi:", value=selected_run_name)
                    if st.button("C·∫≠p nh·∫≠t t√™n"):
                        client.set_tag(selected_run_id, "mlflow.runName", new_run_name.strip())
                        st.success(f"ƒê√£ ƒë·ªïi t√™n th√†nh: {new_run_name.strip()}")
                        st.rerun()

                    st.subheader("X√≥a Run")
                    if st.button("X√≥a l·∫ßn ch·∫°y"):
                        client.delete_run(selected_run_id)
                        st.success(f"ƒê√£ x√≥a: {selected_run_name}")
                        st.rerun()

                    st.subheader("Th√¥ng tin chi ti·∫øt")
                    st.write(f"**T√™n:** {selected_run_name}")
                    st.write(f"**ID:** {selected_run_id}")
                    st.write(f"**Th·ªùi gian b·∫Øt ƒë·∫ßu:** {datetime.fromtimestamp(selected_run.info.start_time / 1000)}")
                    st.json(selected_run.data.params, expanded=True)
                    st.json(selected_run.data.metrics, expanded=True)

                status_text.empty()
                progress_bar.empty()
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi MLflow: {e}")

if __name__ == "__main__":
    run_mnist_neural_network_app()